/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "ocStbHostMibModule.h"
#include "vl_ocStbHost_GetData.h"
#include "rdk_debug.h"

/** Initialize the ocStbHostDVIHDMITable table by defining its contents and how it's structured */
void
initialize_table_ocStbHostDVIHDMITable(void)
{
    static oid      ocStbHostDVIHDMITable_oid[] =
        { 1, 3, 6, 1, 4, 1, 4491, 2, 3, 1, 1, 1, 2, 4, 1 };
    size_t          ocStbHostDVIHDMITable_oid_len =
        OID_LENGTH(ocStbHostDVIHDMITable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("ocStbHostDVIHDMITable",
                                            ocStbHostDVIHDMITable_handler,
                                            ocStbHostDVIHDMITable_oid,
                                            ocStbHostDVIHDMITable_oid_len,
                                            HANDLER_CAN_RWRITE);

    table_data = netsnmp_tdata_create_table("ocStbHostDVIHDMITable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info, ASN_UNSIGNED,  /* index: ocStbHostAVInterfaceIndex */
                                     0);

    table_info->min_column = COLUMN_OCSTBHOSTDVIHDMIOUTPUTTYPE;
    table_info->max_column = COLUMN_OCSTBHOSTDVIHDMI3DCOMPATIBILITYMSGDISPLAY;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(OCSTBHOSTDVIHDMITABLE_TIMEOUT/*-1*/,
                                 ocStbHostDVIHDMITable_load,
                                 ocStbHostDVIHDMITable_free,
                                 ocStbHostDVIHDMITable_oid,
                                 ocStbHostDVIHDMITable_oid_len);
        cache->magic = (void *) table_data;


     cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
    NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
    NETSNMP_CACHE_DONT_AUTO_RELEASE;

        netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "ocStbHostDVIHDMITable");
        /*
         * Initialise the contents of the table here
         */
     if(0 == ocStbHostDVIHDMITable_load(cache,table_data))
    {
            //vl_ocStbHostAVInterfaceTable_getdata"
      SNMP_DEBUGPRINT(" ERROR:: Not ye ocStbHostDVIHDMITable_load table initialise here \n");
    }
}


/*
 * Example cache handling - set up table_data list from a suitable file
 */
int
ocStbHostDVIHDMITable_load(netsnmp_cache * cache, void *vmagic) {
    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *row;

      SNMP_DEBUGPRINT("..............Start..ocStbHostDVIHDMITable ............\n");
     if(0 == vl_ocStbHostDVIHDMITable_getdata(table_data))
    {
      //vl_ocStbHostAVInterfaceTable_getdata"
      SNMP_DEBUGPRINT(" ERROR:: Not yet table initialise here \n");
    }

       SNMP_DEBUGPRINT("............END .ocStbHostDVIHDMITable ............\n");
    return 1;

}

void
ocStbHostDVIHDMITable_free(netsnmp_cache * cache, void *vmagic) {
    netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
//    netsnmp_tdata_row *this;
/* To free the table */
    //netsnmp_tdata_delete_table(table);

//     while           ((this = netsnmp_tdata_get_first_row(table))) {
//         netsnmp_tdata_remove_and_delete_row(table, this);}
}



/** handles requests for the ocStbHostDVIHDMITable table */
int
ocStbHostDVIHDMITable_handler(netsnmp_mib_handler *handler,
                                  netsnmp_handler_registration *reginfo,
                                  netsnmp_agent_request_info *reqinfo,
                                  netsnmp_request_info *requests) {

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct ocStbHostDVIHDMITable_entry *table_entry;
    int             ret;

    vl_row = NULL;
    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    // SNMP_DEBUGPRINT("....ocStbHostDVIHDMITable_handler :: ..MODE_GET: ............\n");
    case MODE_GET:
        for (request = requests; request; request = request->next) {
            //table_entry = (struct ocStbHostDVIHDMITable_entry *)                netsnmp_tdata_extract_entry(request);
            /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(ocStbHostDVIHDMITable_entry);

            switch (table_info->colnum) {
            case COLUMN_OCSTBHOSTDVIHDMIOUTPUTTYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIOutputType);
                break;
            case COLUMN_OCSTBHOSTDVIHDMICONNECTIONSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIConnectionStatus);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIREPEATERSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIRepeaterStatus);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIVIDEOXMISSIONSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIVideoXmissionStatus);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIHDCPSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIHDCPStatus);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIVIDEOMUTESTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIVideoMuteStatus);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIOUTPUTFORMAT:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIOutputFormat);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIASPECTRATIO:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIAspectRatio);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIHOSTDEVICEHDCPSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIHostDeviceHDCPStatus);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIAUDIOFORMAT:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIAudioFormat);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIAUDIOSAMPLERATE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIAudioSampleRate);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIAUDIOCHANNELCOUNT:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb,
                                           ASN_UNSIGNED,
                                           table_entry->
                                           ocStbHostDVIHDMIAudioChannelCount);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIAUDIOMUTESTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIAudioMuteStatus);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIAUDIOSAMPLESIZE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIAudioSampleSize);
                break;
            case COLUMN_OCSTBHOSTDVIHDMICOLORSPACE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIColorSpace);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIFRAMERATE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIFrameRate);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIATTACHEDDEVICETYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIAttachedDeviceType);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIEDID:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         ocStbHostDVIHDMIEdid,
                                         table_entry->
                                         ocStbHostDVIHDMIEdid_len);
                break;
            case COLUMN_OCSTBHOSTDVIHDMILIPSYNCDELAY:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMILipSyncDelay);
                break;
            case COLUMN_OCSTBHOSTDVIHDMICECFEATURES:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         ocStbHostDVIHDMICecFeatures,
                                         table_entry->
                                         ocStbHostDVIHDMICecFeatures_len);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIFEATURES:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         ocStbHostDVIHDMIFeatures,
                                         table_entry->
                                         ocStbHostDVIHDMIFeatures_len);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIMAXDEVICECOUNT:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMIMaxDeviceCount);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIPREFERREDVIDEOFORMAT:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->ocStbHostDVIHDMIPreferredVideoFormat);
                break;
            case COLUMN_OCSTBHOSTDVIHDMIEDIDVERSION:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value( request->requestvb, ASN_OCTET_STR,
                                 (u_char*)table_entry->ocStbHostDVIHDMIEdidVersion,
                                          table_entry->ocStbHostDVIHDMIEdidVersion_len);
                break;
            case COLUMN_OCSTBHOSTDVIHDMI3DCOMPATIBILITYCONTROL:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMI3DCompatibilityControl);
                break;
            case COLUMN_OCSTBHOSTDVIHDMI3DCOMPATIBILITYMSGDISPLAY:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostDVIHDMI3DCompatibilityMsgDisplay);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;
        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
        for (request = requests; request; request = request->next) {
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);
            
            switch (table_info->colnum) {
            case COLUMN_OCSTBHOSTDVIHDMI3DCOMPATIBILITYCONTROL:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_OCSTBHOSTDVIHDMI3DCOMPATIBILITYMSGDISPLAY:
                /*
                 * or possibly 'netsnmp_check_vb_truthvalue'
                 */
                ret = netsnmp_check_vb_truthvalue(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_ERR_NOTWRITABLE);
                return SNMP_ERR_NOERROR;
            }
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        for (request = requests; request; request = request->next) {
            table_entry = (struct ocStbHostDVIHDMITable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_OCSTBHOSTDVIHDMI3DCOMPATIBILITYCONTROL:
                table_entry->old_ocStbHostDVIHDMI3DCompatibilityControl =
                    table_entry->ocStbHostDVIHDMI3DCompatibilityControl;
                table_entry->ocStbHostDVIHDMI3DCompatibilityControl =
                    *request->requestvb->val.integer;
            break;
            case COLUMN_OCSTBHOSTDVIHDMI3DCOMPATIBILITYMSGDISPLAY:
                table_entry->old_ocStbHostDVIHDMI3DCompatibilityMsgDisplay =
                    table_entry->ocStbHostDVIHDMI3DCompatibilityMsgDisplay;
                table_entry->ocStbHostDVIHDMI3DCompatibilityMsgDisplay =
                    *request->requestvb->val.integer;
            break;
            }
        }
        break;

    case MODE_SET_UNDO:
        for (request = requests; request; request = request->next) {
            table_entry = (struct ocStbHostDVIHDMITable_entry *)
                netsnmp_tdata_extract_entry(request);
            netsnmp_tdata_extract_row(request);
            netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_OCSTBHOSTDVIHDMI3DCOMPATIBILITYCONTROL:
                table_entry->ocStbHostDVIHDMI3DCompatibilityControl =
                    table_entry->old_ocStbHostDVIHDMI3DCompatibilityControl;
                table_entry->old_ocStbHostDVIHDMI3DCompatibilityControl = 1;
                break;
            case COLUMN_OCSTBHOSTDVIHDMI3DCOMPATIBILITYMSGDISPLAY:
                table_entry->ocStbHostDVIHDMI3DCompatibilityMsgDisplay =
                    table_entry->old_ocStbHostDVIHDMI3DCompatibilityMsgDisplay;
                table_entry->old_ocStbHostDVIHDMI3DCompatibilityMsgDisplay = 1;
                break;
            }
        }
        break;

    case MODE_SET_COMMIT:
        for (request = requests; request; request = request->next) {
            table_entry = (struct ocStbHostDVIHDMITable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_OCSTBHOSTDVIHDMI3DCOMPATIBILITYCONTROL:
            {
                Sset_ocStbHostDVIHDMI3DCompatibilityControl(*request->requestvb->val.integer);
            }
            break;
            case COLUMN_OCSTBHOSTDVIHDMI3DCOMPATIBILITYMSGDISPLAY:
            {
                Sset_ocStbHostDVIHDMI3DCompatibilityMsgDisplay(*request->requestvb->val.integer);
            }
            break;
            }
        }
        break;
    }
    return SNMP_ERR_NOERROR;
}
