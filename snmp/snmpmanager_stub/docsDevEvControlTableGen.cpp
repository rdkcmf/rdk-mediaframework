/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "docsDevEvControlTable.h"
#include "vl_ocStbHost_GetData.h"
#include "docsDevEventTable_enums.h"
#include "utilityMacros.h"
#include "vlMutex.h"
#include "SnmpIORM.h"
#include "persistentconfig.h"
#include "cardManagerIf.h"
#include "rdk_debug.h"
#include "rmf_osal_sync.h"
#include "ipcclient_impl.h"

#if USE_SYSRES_MLT
#include "rpl_new.h"
#endif

#define VL_SNMP_DOCS_EVENT_REPORTING_LOG_FILE_NAME      "/etc/docsDevEventReporting.cfg"
#define VL_SNMP_DOCS_EVENT_REPORTING_TAG_NAME           "DocsDevEvReporting"

static vlMutex vlg_lockDocsDevEvReporting;

int vlStartDocsEventServer();

/** Initializes the docsDevEvControlTable module */
void
init_docsDevEvControlTable(void)
{
    /*
     * here we initialize all the tables we're planning on supporting
     */
    initialize_table_docsDevEvControlTable();
    vlStartDocsEventServer();
}

//# Determine the first/last column names
int ListdocsDevEvControl[10];
static int SzlistdocsDevControl;

/** Initialize the docsDevEvControlTable table by defining its contents and how it's structured */
void
initialize_table_docsDevEvControlTable(void)
{
    static oid      docsDevEvControlTable_oid[] =
        { 1, 3, 6, 1, 2, 1, 69, 1, 5, 7 };
    size_t          docsDevEvControlTable_oid_len =
        OID_LENGTH(docsDevEvControlTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("docsDevEvControlTable",
                                            docsDevEvControlTable_handler,
                                            docsDevEvControlTable_oid,
                                            docsDevEvControlTable_oid_len,
                                            HANDLER_CAN_RWRITE);

    table_data = netsnmp_tdata_create_table("docsDevEvControlTable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info, ASN_INTEGER,   /* index: docsDevEvPriority */
                                     0);

    table_info->min_column = COLUMN_DOCSDEVEVREPORTING;
    table_info->max_column = COLUMN_DOCSDEVEVREPORTING;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(DOCSDEVEVCONTROLTABLE_TIMEOUT,
                                 docsDevEvControlTable_load,
                                 docsDevEvControlTable_free,
                                 docsDevEvControlTable_oid,
                                 docsDevEvControlTable_oid_len);
        cache->magic = (void *) table_data;
    cache->flags = //NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
    NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
    NETSNMP_CACHE_DONT_AUTO_RELEASE;
    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "docsDevEvControlTable");

        /*
         * Initialise the contents of the table here
         */
         if(0 == docsDevEvControlTable_load(cache,table_data))
    {
            //vl_ocStbHostAVInterfaceTable_getdata"
      SNMP_DEBUGPRINT(" ERROR:: Not yet table initialise here \n");
    }
}


/*
 * create a new row in the table
 */
netsnmp_tdata_row *docsDevEvControlTable_createEntry(netsnmp_tdata *
                                                     table_data,
                                                     long
                                                     docsDevEvPriority) {
    struct docsDevEvControlTable_entry *entry;
    netsnmp_tdata_row *row;
          entry = SNMP_MALLOC_TYPEDEF(struct docsDevEvControlTable_entry);
    if              (!entry)
                        return NULL;

                    row = netsnmp_tdata_create_row();
    if              (!row) {
        SNMP_FREE(entry);
        return NULL;
    }
    row->           data = entry;
    entry->docsDevEvPriority = docsDevEvPriority;
    netsnmp_tdata_row_add_index(row, ASN_INTEGER,
                                &(entry->docsDevEvPriority),
                                sizeof(entry->docsDevEvPriority));
    netsnmp_tdata_add_row(table_data, row);
    return row;
}

/*
 * remove a row from the table
 */
void
docsDevEvControlTable_removeEntry(netsnmp_tdata * table_data,
                                      netsnmp_tdata_row * row) {
    struct docsDevEvControlTable_entry *entry;

    if (!row)
        return;                 /* Nothing to remove */
    entry = (struct docsDevEvControlTable_entry *)
        netsnmp_tdata_remove_and_delete_row(table_data, row);
    if (entry)
        SNMP_FREE(entry);       /* XXX - release any other internal resources */
}

static int vlg_aDocsDevEvReportingMethod[] =
{
    DOCSDEVEVREPORTING_LOCAL_VOLATILE    , // not used

    DOCSDEVEVREPORTING_LOCAL_NON_VOLATILE, // EMERGENCY
    DOCSDEVEVREPORTING_LOCAL_NON_VOLATILE, // ALERT
    DOCSDEVEVREPORTING_LOCAL_NON_VOLATILE, // CRITICAL
    DOCSDEVEVREPORTING_LOCAL_NON_VOLATILE, // ERROR

    DOCSDEVEVREPORTING_LOCAL_VOLATILE    , // WARNING
    DOCSDEVEVREPORTING_LOCAL_VOLATILE    , // NOTICE
    DOCSDEVEVREPORTING_LOCAL_VOLATILE    , // INFORMATION
    DOCSDEVEVREPORTING_LOCAL_VOLATILE    , // DEBUG

    DOCSDEVEVREPORTING_LOCAL_VOLATILE    , // not used
};

extern "C" int vl_docsDevEvControlTable_get_reporting_method(int priority)
{
    int eDocsDevEvReportingVal = DOCSDEVEVREPORTING_LOCAL_VOLATILE;
    {
        VL_AUTO_LOCK(vlg_lockDocsDevEvReporting);
        //VL_auto_lock_ptr(vlg_lockDocsDevEvReporting);

        if(priority < DOCSDEVEVLEVEL_EMERGENCY) priority = DOCSDEVEVLEVEL_EMERGENCY;
        if(priority > DOCSDEVEVLEVEL_DEBUG    ) priority = DOCSDEVEVLEVEL_DEBUG;

	eDocsDevEvReportingVal = vlg_aDocsDevEvReportingMethod[priority];
	//auto_unlock_ptr(vlg_lockDocsDevEvReporting);
    }

    return eDocsDevEvReportingVal;
}

extern "C" int vl_docsDevEvControlTable_SET_reporting_method(int priority, int eDocsDevEvReportingVal)
{
    {
        //VL_auto_lock_ptr(vlg_lockDocsDevEvReporting);
        VL_AUTO_LOCK(vlg_lockDocsDevEvReporting);
        if(priority < DOCSDEVEVLEVEL_EMERGENCY) 
        	{
			//auto_unlock_ptr(vlg_lockDocsDevEvReporting);
			return DOCSDEVEVREPORTING_LOCAL_VOLATILE;
        	}
        if(priority > DOCSDEVEVLEVEL_DEBUG    ) 
		{
			//auto_unlock_ptr(vlg_lockDocsDevEvReporting);
			return DOCSDEVEVREPORTING_LOCAL_VOLATILE;
        	}

        if(-1 == eDocsDevEvReportingVal)
        {
            // reset to default
            switch(priority)
            {
                case DOCSDEVEVLEVEL_EMERGENCY:
                case DOCSDEVEVLEVEL_ALERT:
                case DOCSDEVEVLEVEL_CRITICAL:
                case DOCSDEVEVLEVEL_ERROR:
                {
                    eDocsDevEvReportingVal = DOCSDEVEVREPORTING_LOCAL_NON_VOLATILE;
                }
                break;

                case DOCSDEVEVLEVEL_WARNING:
                case DOCSDEVEVLEVEL_NOTICE:
                case DOCSDEVEVLEVEL_INFORMATION:
                case DOCSDEVEVLEVEL_DEBUG:
                default:
                {
                    eDocsDevEvReportingVal = DOCSDEVEVREPORTING_LOCAL_VOLATILE;
                }
                break;
            }
        }

        if((DOCSDEVEVREPORTING_LOCAL_VOLATILE     != eDocsDevEvReportingVal) &&
           (DOCSDEVEVREPORTING_LOCAL_NON_VOLATILE != eDocsDevEvReportingVal))
        {
            eDocsDevEvReportingVal = DOCSDEVEVREPORTING_LOCAL_VOLATILE;
        }

        vlg_aDocsDevEvReportingMethod[priority] = eDocsDevEvReportingVal;
	//auto_unlock_ptr(vlg_lockDocsDevEvReporting);	
    }

    return eDocsDevEvReportingVal;
}

#define VL_LOAD_DOCS_DEV_EV_REPORTING(priority, reporting)                                              \
    eDocsDevEvReportingVal = vl_docsDevEvControlTable_get_reporting_method(priority);                   \
    docsDevEvControlTable_createEntry_allData(table_data, priority, eDocsDevEvReportingVal, count++)

/*
 * Example cache handling - set up table_data list from a suitable file
 */
int
docsDevEvControlTable_load(netsnmp_cache * cache, void *vmagic)
{
    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *row;
    bool replace_table = false;
    int nitemreplace = 0;
    int iftabelcheck = 0;
    int count = 0;
    int local = 0x00;

    if(netsnmp_tdata_row_first(table_data))
    {
        replace_table = true;
    }
    SNMP_DEBUGPRINT("\n docsDevEvControlTable_load ::::::::::::: starts \n");

       Table_free(table_data);
       /*By default WE are showing all the Error List periortie items There are  */
       /*
            * enums for column docsDevEvLevel
            */
            // #define DOCSDEVEVLEVEL_EMERGENCY    1
            // #define DOCSDEVEVLEVEL_ALERT        2
            // #define DOCSDEVEVLEVEL_CRITICAL        3
            // #define DOCSDEVEVLEVEL_ERROR        4
            // #define DOCSDEVEVLEVEL_WARNING        5
            // #define DOCSDEVEVLEVEL_NOTICE        6
            // #define DOCSDEVEVLEVEL_INFORMATION    7
            // #define DOCSDEVEVLEVEL_DEBUG        8
   // }
    {
        VL_AUTO_LOCK(vlg_lockDocsDevEvReporting);
        int eDocsDevEvReportingVal = DOCSDEVEVREPORTING_LOCAL_VOLATILE;

        VL_LOAD_DOCS_DEV_EV_REPORTING(DOCSDEVEVLEVEL_EMERGENCY  , DOCSDEVEVREPORTING_LOCAL_NON_VOLATILE );
        VL_LOAD_DOCS_DEV_EV_REPORTING(DOCSDEVEVLEVEL_ALERT      , DOCSDEVEVREPORTING_LOCAL_NON_VOLATILE );
        VL_LOAD_DOCS_DEV_EV_REPORTING(DOCSDEVEVLEVEL_CRITICAL   , DOCSDEVEVREPORTING_LOCAL_NON_VOLATILE );
        VL_LOAD_DOCS_DEV_EV_REPORTING(DOCSDEVEVLEVEL_ERROR      , DOCSDEVEVREPORTING_LOCAL_NON_VOLATILE );

        VL_LOAD_DOCS_DEV_EV_REPORTING(DOCSDEVEVLEVEL_WARNING    , DOCSDEVEVREPORTING_LOCAL_VOLATILE     );
        VL_LOAD_DOCS_DEV_EV_REPORTING(DOCSDEVEVLEVEL_NOTICE     , DOCSDEVEVREPORTING_LOCAL_VOLATILE     );
        VL_LOAD_DOCS_DEV_EV_REPORTING(DOCSDEVEVLEVEL_INFORMATION, DOCSDEVEVREPORTING_LOCAL_VOLATILE     );
        VL_LOAD_DOCS_DEV_EV_REPORTING(DOCSDEVEVLEVEL_DEBUG      , DOCSDEVEVREPORTING_LOCAL_VOLATILE     );
	 //auto_unlock_ptr(vlg_lockDocsDevEvReporting);
    }

    SNMP_DEBUGPRINT("\n docsDevEvControlTable_load ::::::::::::: END \n");
  return 1;
}

int
docsDevEvControlTable_save(int priority, int eDocsDevEvReportingVal)
{

    return 1;
}

int docsDevEvControlTable_createEntry_allData(netsnmp_tdata * table_data, int priority , int eDocsDevEvReportingVal, int count)
{
    struct docsDevEvControlTable_entry *entry;
    netsnmp_tdata_row *row;
    entry = SNMP_MALLOC_TYPEDEF(struct docsDevEvControlTable_entry);
    if (!entry)
    return 0;

    row = netsnmp_tdata_create_row();
    if (!row) {
    SNMP_FREE(entry);
    return 0;
    }
    row->data = entry;
    entry->docsDevEvPriority = priority;

    /*
     * Column values
     */
    unsigned char docsDevEvReporting[] = {eDocsDevEvReportingVal};

    entry->docsDevEvReporting_len = sizeof(docsDevEvReporting);
    memcpy(entry->docsDevEvReporting, docsDevEvReporting, entry->docsDevEvReporting_len);//max size is 2 bytes "00" local event reporting
    netsnmp_tdata_row_add_index(row, ASN_UNSIGNED,
            &(entry->docsDevEvPriority),
            sizeof(entry->docsDevEvPriority));
    netsnmp_tdata_add_row(table_data, row);
   return 1;

}

void
 docsDevEvControlTable_free(netsnmp_cache * cache, void *vmagic) {
    netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
    /*netsnmp_tdata_row *this;

    while           ((this = netsnmp_tdata_get_first_row(table))) {
        netsnmp_tdata_remove_and_delete_row(table, this);
}*/
}
/** handles requests for the docsDevEvControlTable table */
int
    docsDevEvControlTable_handler(netsnmp_mib_handler *handler,
                                  netsnmp_handler_registration *reginfo,
                                  netsnmp_agent_request_info *reqinfo,
                                  netsnmp_request_info *requests) {

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct docsDevEvControlTable_entry *table_entry = NULL;
    int             ret;

    vl_row = NULL;
    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request = requests; request; request = request->next){
            //table_entry = (struct docsDevEvControlTable_entry *)               netsnmp_tdata_extract_entry(request);
             /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(docsDevEvControlTable_entry);

            switch (table_info->colnum) {
            case COLUMN_DOCSDEVEVREPORTING:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         docsDevEvReporting,
                                         table_entry->
                                         docsDevEvReporting_len);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
        for (request = requests; request; request = request->next) {
            table_entry = (struct docsDevEvControlTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_DOCSDEVEVREPORTING:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                */
                //*request->requestvb->val.integer
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              docsDevEvReporting));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_ERR_NOTWRITABLE);
                return SNMP_ERR_NOERROR;
            }
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        for (request = requests; request; request = request->next) {
            table_entry = (struct docsDevEvControlTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_DOCSDEVEVREPORTING:
                memcpy(table_entry->old_docsDevEvReporting,
                       table_entry->docsDevEvReporting,
                       sizeof(table_entry->docsDevEvReporting));
                table_entry->old_docsDevEvReporting_len =
                    table_entry->docsDevEvReporting_len;
                memset(table_entry->docsDevEvReporting, 0,
                       sizeof(table_entry->docsDevEvReporting));
                memcpy(table_entry->docsDevEvReporting,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->docsDevEvReporting_len =
                    request->requestvb->val_len;
                break;
            }
        }
        break;

    case MODE_SET_UNDO:
        for (request = requests; request; request = request->next) {
            table_entry = (struct docsDevEvControlTable_entry *)
                netsnmp_tdata_extract_entry(request);
            netsnmp_tdata_extract_row(request);
            netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_DOCSDEVEVREPORTING:
                memcpy(table_entry->docsDevEvReporting,
                       table_entry->old_docsDevEvReporting,
                       sizeof(table_entry->docsDevEvReporting));
                memset(table_entry->old_docsDevEvReporting, 0,
                       sizeof(table_entry->docsDevEvReporting));
                table_entry->docsDevEvReporting_len =
                    table_entry->old_docsDevEvReporting_len;
                break;
            }
        }
        break;

    case MODE_SET_COMMIT:
        for (request = requests; request; request = request->next) {
            table_entry = (struct docsDevEvControlTable_entry *)
                    netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
                case COLUMN_DOCSDEVEVREPORTING:
                    memcpy(table_entry->old_docsDevEvReporting,
                           table_entry->docsDevEvReporting,
                           sizeof(table_entry->docsDevEvReporting));
                    table_entry->old_docsDevEvReporting_len =
                            table_entry->docsDevEvReporting_len;
                    memset(table_entry->docsDevEvReporting, 0,
                           sizeof(table_entry->docsDevEvReporting));
                    memcpy(table_entry->docsDevEvReporting,
                           request->requestvb->val.string,
                           request->requestvb->val_len);
                    table_entry->docsDevEvReporting_len =
                            request->requestvb->val_len;
        break;
    }
        }
        break;
    }

    switch (reqinfo->mode)
    {
        case MODE_SET_ACTION:
        case MODE_SET_COMMIT:
        if(NULL != table_entry)
        {
            if((table_entry->docsDevEvReporting_len !=
                    table_entry->old_docsDevEvReporting_len) ||
            (0 != memcmp(table_entry->docsDevEvReporting,
                            table_entry->old_docsDevEvReporting,
                            table_entry->docsDevEvReporting_len)))
            {
                vl_docsDevEvControlTable_SET_reporting_method(table_entry->docsDevEvPriority, table_entry->docsDevEvReporting[0]);
            }
        }
    }

    return SNMP_ERR_NOERROR;
}
