/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "snmpTargetAddrTable.h"
#include "snmpAccessInclude.h"
#include "vl_ocStbHost_GetData.h"
#include "utilityMacros.h"
#include "vlMutex.h"
#include "Tlvevent.h"
#include "SnmpIORM.h"
#include "ip_types.h"
#include "cardManagerIf.h"

static vlMutex & vlg_TlvEventDblock = TlvConfig::vlGetTlvEventDbLock();
#ifdef AUTO_LOCKING

static void auto_lock(rmf_osal_Mutex *mutex)
{

               if(!mutex) 
			   	RDK_LOG(RDK_LOG_ERROR, "LOG.RDK.POD","\n\n\n\n %s: Mutex is NULL \n\n\n", __FUNCTION__);
		 rmf_osal_mutexAcquire(*mutex);
}

static void auto_unlock(rmf_osal_Mutex *mutex)
{
         if(mutex)
		 rmf_osal_mutexRelease(*mutex);
}
#endif

/** Initializes the snmpTargetAddrTable module */
void
init_snmpTargetAddrTable(void)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    /*
     * here we initialize all the tables we're planning on supporting
     */
    initialize_table_snmpTargetAddrTable();
    //auto_unlock(&vlg_TlvEventDblock);
}

//# Determine the first/last column names

/** Initialize the snmpTargetAddrTable table by defining its contents and how it's structured */
void
initialize_table_snmpTargetAddrTable(void)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    static oid      snmpTargetAddrTable_oid[] =
        { 1, 3, 6, 1, 6, 3, 12, 1, 2 };
    size_t          snmpTargetAddrTable_oid_len =
        OID_LENGTH(snmpTargetAddrTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("snmpTargetAddrTable",
                                            snmpTargetAddrTable_handler,
                                            snmpTargetAddrTable_oid,
                                            snmpTargetAddrTable_oid_len,
                                            HANDLER_CAN_RWRITE);

    table_data = netsnmp_tdata_create_table("snmpTargetAddrTable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info, ASN_PRIV_IMPLIED_OCTET_STR/*ASN_OCTET_STR*/, /* index: snmpTargetAddrName */
                                     0);

    table_info->min_column = COLUMN_SNMPTARGETADDRTDOMAIN;
    table_info->max_column = COLUMN_SNMPTARGETADDRROWSTATUS;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(SNMPTARGETADDRTABLE_TIMEOUT,
                                 snmpTargetAddrTable_load,
                                 snmpTargetAddrTable_free,
                                 snmpTargetAddrTable_oid,
                                 snmpTargetAddrTable_oid_len);
        cache->magic = (void *) table_data;
    cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
    NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
    NETSNMP_CACHE_DONT_AUTO_RELEASE;
    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "snmpTargetAddrTable");

        /*
         * Initialise the contents of the table here
         */
       if(0 == snmpTargetAddrTable_load(cache,table_data))
    {
            //snmpTargetAddrExtTable_load"
      SNMP_DEBUGPRINT(" ERROR:: snmpTargetAddrTable_load Not yet table initialise here \n");
    }
//auto_unlock(&vlg_TlvEventDblock);
}


/*
 * create a new row in the table
 */
netsnmp_tdata_row *snmpTargetAddrTable_createEntry(netsnmp_tdata *
                                                   table_data,
                                                   char
                                                   *snmpTargetAddrName,
                                                   size_t
                                                   snmpTargetAddrName_len)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    struct snmpTargetAddrTable_entry *entry;
    netsnmp_tdata_row *row;





            entry = SNMP_MALLOC_TYPEDEF(struct snmpTargetAddrTable_entry);
    if              (!entry){
			   //auto_unlock(&vlg_TlvEventDblock);
                        return NULL;
    	}

                    row = netsnmp_tdata_create_row();
    if              (!row) {
        SNMP_FREE(entry);
	 //auto_unlock(&vlg_TlvEventDblock);
        return NULL;
    }
    row->           data = entry;
    memcpy(entry->snmpTargetAddrName, snmpTargetAddrName,
           snmpTargetAddrName_len);
    entry->snmpTargetAddrName_len = snmpTargetAddrName_len;
    netsnmp_tdata_row_add_index(row, ASN_OCTET_STR,
                                entry->snmpTargetAddrName,
                                snmpTargetAddrName_len);
    netsnmp_tdata_add_row(table_data, row);
    //auto_unlock(&vlg_TlvEventDblock);
    return row;
}

/*
 * remove a row from the table
 */
void
    snmpTargetAddrTable_removeEntry(netsnmp_tdata * table_data,
                                    netsnmp_tdata_row * row)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    struct snmpTargetAddrTable_entry *entry;

    if (!row){
	 //auto_unlock(&vlg_TlvEventDblock);
        return;                 /* Nothing to remove */
    	}
    entry = (struct snmpTargetAddrTable_entry *)
        netsnmp_tdata_remove_and_delete_row(table_data, row);
    if (entry)
        SNMP_FREE(entry);       /* XXX - release any other internal resources */
	//auto_unlock(&vlg_TlvEventDblock);
}

#if 1
vector<VL_TLV_TRANSPORT_ADDR_AND_MASK> vlg_snmp_agent_TargetAddrList;
//={"0A 00 00 00 00 00", "0A 00 00 00 00 00", "0A 00 00 00 00 00"} ;
// shared from snmpTargetParamsTable.cpp
extern vector<v3NotificationReceiver_t> vlg_snmp_agent_NotificationReceiverList;


#ifdef __cplusplus
extern "C" {
#endif
void snmpClearTargetAddrTableEvents()
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    vlg_snmp_agent_TargetAddrList.clear();
  //auto_unlock(&vlg_TlvEventDblock);
}

int static iszTadd;
void snmpTargetAddrTableEventhandling(struct VL_TLV_TRANSPORT_ADDR_AND_MASK & SnmpAddt)//53.2 Transport add access SubTLV ADdrTable 53.2.1
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    vlg_snmp_agent_TargetAddrList.push_back(SnmpAddt);
  //auto_unlock(&vlg_TlvEventDblock);
}
#ifdef __cplusplus
}
#endif
#endif //if 0
/*
 * Example cache handling - set up table_data list from a suitable file
 */
int
snmpTargetAddrTable_load(netsnmp_cache * cache, void *vmagic)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *row;

    SNMP_DEBUGPRINT("\n snmpTargetAddrTable_load :: Start snmpTargetAddrTable_load   :::  \n");
    bool replace_table = false;
    int count = 0;
    if(netsnmp_tdata_row_first(table_data))
    {
        replace_table = true;
    }

    for(count = 0; count < vlg_snmp_agent_TargetAddrList.size(); count++)
    {
        if(replace_table)
        {
            replace_table = false;
            Table_free(table_data);
        }

        snmpTargetAddrTable_createEntry_allData(table_data, vlg_snmp_agent_TargetAddrList[count], count);
    }
    for(count = 0; count < vlg_snmp_agent_NotificationReceiverList.size(); count++)
    {
        if(replace_table)
        {
            replace_table = false;
            Table_free(table_data);
        }

        snmpTargetAddrTable_createEntry_allData(table_data, vlg_snmp_agent_NotificationReceiverList[count], count);
    }
    if((vlg_snmp_agent_TargetAddrList.size() == 0) && (0 == vlg_snmp_agent_NotificationReceiverList.size()))
    {
        Table_free(table_data);
        VL_TLV_TRANSPORT_ADDR_AND_MASK targetAddr;
        snmpTargetAddrTable_createEntry_allData(table_data, targetAddr, count);
    }

    SNMP_DEBUGPRINT("\n snmpTargetAddrTable_load :: End snmpTargetAddrTable_load   :::  \n");
    //auto_unlock(&vlg_TlvEventDblock);
    return 1;
}

int snmpTargetAddrTable_createEntry_allData(netsnmp_tdata * table_data, struct VL_TLV_TRANSPORT_ADDR_AND_MASK & TargetAddr, int count)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    int i = 0;
    SNMP_DEBUGPRINT("\n snmpTargetAddrTable_createEntry_allData ::Start \n");
    struct snmpTargetAddrTable_entry *entry;
    netsnmp_tdata_row *row;
    entry = SNMP_MALLOC_TYPEDEF(struct snmpTargetAddrTable_entry);
    if (!entry){
    //auto_unlock(&vlg_TlvEventDblock);
    return 0;
    	}

    row = netsnmp_tdata_create_row();
    if (!row) {
    SNMP_FREE(entry);
    //auto_unlock(&vlg_TlvEventDblock);
    return 0;
    }
    row->data = entry;
    /*
     * Index values
     */

    char TargetAddrName[STRLEN_CHAR_ACCESS];
    char TargettAddrTagList[STRLEN_CHAR_ACCESS];

    snprintf(TargetAddrName, sizeof(TargetAddrName), "%sconfigTag_%d_%d", TargetAddr.strPrefix.c_str(), TargetAddr.iAccessViewTlv, TargetAddr.iTlvSubEntry);
    snprintf(TargettAddrTagList, sizeof(TargettAddrTagList), "%sconfigTag_%d", TargetAddr.strPrefix.c_str(), TargetAddr.iAccessViewTlv);

    entry->snmpTargetAddrName_len = strlen(TargetAddrName);
    memcpy(entry->snmpTargetAddrName,TargetAddrName, entry->snmpTargetAddrName_len); //@STBconfigTag_0_0


    /*
     * Column values
     */

    // snmpUDPDomain
    oid      snmpTargetAddrTDomain_oid[] = { 1, 3, 6, 1, 6, 1, 1 };
    size_t   snmpTargetAddrTDomain_oid_len = OID_LENGTH(snmpTargetAddrTDomain_oid);

    // transportDomainUdpIpv6
    oid      transportDomainUdpIpv6_oid[] = { 1, 3, 6, 1, 2, 1, 100, 1, 2};
    size_t   transportDomainUdpIpv6_oid_len = OID_LENGTH(transportDomainUdpIpv6_oid);

    if(TargetAddr.TpAddress.size() < VL_IPV6_ADDR_SIZE)
    {
        entry->snmpTargetAddrTDomain_len = snmpTargetAddrTDomain_oid_len;
        for(i = 0; i < snmpTargetAddrTDomain_oid_len; i++)
        {
            entry->snmpTargetAddrTDomain[i] = snmpTargetAddrTDomain_oid[i];
        }
    }
    else
    {
        entry->snmpTargetAddrTDomain_len = transportDomainUdpIpv6_oid_len;
        for(i = 0; i < transportDomainUdpIpv6_oid_len; i++)
        {
            entry->snmpTargetAddrTDomain[i] = transportDomainUdpIpv6_oid[i];
        }
    }

    string strAddressHex = TargetAddr.getAddressStringHex();
    entry->snmpTargetAddrTAddress_len = strAddressHex.size();
    memcpy(entry->snmpTargetAddrTAddress, strAddressHex.c_str(), entry->snmpTargetAddrTAddress_len); //0A 00 00 00 00 00
    SNMP_DEBUGPRINT("entry->snmpTargetAddrTAddress ::: %s\n", entry->snmpTargetAddrTAddress);

    entry->snmpTargetAddrTimeout =   1500 ;
    entry->snmpTargetAddrRetryCount =  3;
    entry->snmpTargetAddrTagList_len = strlen(TargettAddrTagList);
    memcpy(entry->snmpTargetAddrTagList, TargettAddrTagList, entry->snmpTargetAddrTagList_len);     //?@STBconfigTag_0?

    entry->snmpTargetAddrParams_len = strlen("00");
    memcpy(entry->snmpTargetAddrParams,"00",entry->snmpTargetAddrParams_len);        //00


    if(TargetAddr.bIsPermanent)
    {
        entry->snmpTargetAddrStorageType = 4;      //permanent(2)
    }
    else
    {
        entry->snmpTargetAddrStorageType = 2;      //volatile(2)
    }
    entry->snmpTargetAddrRowStatus = 1 ;       //active(1)

    netsnmp_tdata_row_add_index(row, ASN_PRIV_IMPLIED_OCTET_STR, // was ASN_OCTET_STR,
                                entry->snmpTargetAddrName,
                                entry->snmpTargetAddrName_len);

    netsnmp_tdata_add_row(table_data, row);
    SNMP_DEBUGPRINT("\n snmpTargetAddrTable_createEntry_allData ::END \n");
   //auto_unlock(&vlg_TlvEventDblock);
   return 1;

}


int snmpTargetAddrTable_createEntry_allData(netsnmp_tdata * table_data, struct v3NotificationReceiver_t & rReceiver, int count)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    int i = 0;
    SNMP_DEBUGPRINT("\n snmpTargetAddrTable_createEntry_allData ::Start \n");
    struct snmpTargetAddrTable_entry *entry;
    netsnmp_tdata_row *row;
    entry = SNMP_MALLOC_TYPEDEF(struct snmpTargetAddrTable_entry);
    if (!entry){
	 //auto_unlock(&vlg_TlvEventDblock);
        return 0;
    	}

    row = netsnmp_tdata_create_row();
    if (!row) {
        SNMP_FREE(entry);
	 //auto_unlock(&vlg_TlvEventDblock);
        return 0;
    }
    row->data = entry;
    /*
    * Index values
    */

    char TargetAddrName[STRLEN_CHAR_ACCESS];
    char TargettAddrTagList[STRLEN_CHAR_ACCESS];
    char TargetAddrParams[STRLEN_CHAR_ACCESS];

    snprintf(TargetAddrName, sizeof(TargetAddrName), "@STBnotifyconfig_%d_0",count);
    snprintf(TargetAddrParams, sizeof(TargetAddrParams), "@STBnotifyconfig_%d",count);

    char * pszNotifyType = "none";

    switch(rReceiver.eV3TrapType)
    {
        case VL_TLV_217_NOTIFY_TRAP_V1:
        case VL_TLV_217_NOTIFY_TRAP_V2C:
        case VL_TLV_217_NOTIFY_TRAP_V2C_IN_V3:
        {
            pszNotifyType = "@STBnotifyconfig_trap";
        }
        break;

        case VL_TLV_217_NOTIFY_INFORM_V2C:
        case VL_TLV_217_NOTIFY_INFORM_V2C_IN_V3:
        {
            pszNotifyType = "@STBnotifyconfig_inform";
        }
        break;

        default:
        {
            // do nothing
        }
        break;
    }

    snprintf(TargettAddrTagList, sizeof(TargettAddrTagList), "%s",pszNotifyType);

    /*
    * Column values
    */

    // snmpUDPDomain
    oid      snmpTargetAddrTDomain_oid[] = { 1, 3, 6, 1, 6, 1, 1 };
    size_t   snmpTargetAddrTDomain_oid_len = OID_LENGTH(snmpTargetAddrTDomain_oid);

    // transportDomainUdpIpv6
    oid      transportDomainUdpIpv6_oid[] = { 1, 3, 6, 1, 2, 1, 100, 1, 2};
    size_t   transportDomainUdpIpv6_oid_len = OID_LENGTH(transportDomainUdpIpv6_oid);

    VL_TLV_217_IP_ADDR ipAddress;

    if(rReceiver.v3ipV4address.size() > 0)
    {
        entry->snmpTargetAddrTDomain_len = snmpTargetAddrTDomain_oid_len;
        for(i = 0; i < snmpTargetAddrTDomain_oid_len; i++)
        {
            entry->snmpTargetAddrTDomain[i] = snmpTargetAddrTDomain_oid[i];
        }

        snprintf(TargetAddrName, sizeof(TargetAddrName), "@STBnotifyconfig_%d_IPv4",count);
        ipAddress = rReceiver.v3ipV4address;
    }
    if(rReceiver.v3ipV6address.size() > 0)
    {
        entry->snmpTargetAddrTDomain_len = transportDomainUdpIpv6_oid_len;
        for(i = 0; i < transportDomainUdpIpv6_oid_len; i++)
        {
            entry->snmpTargetAddrTDomain[i] = transportDomainUdpIpv6_oid[i];
        }

        snprintf(TargetAddrName, sizeof(TargetAddrName), "@STBnotifyconfig_%d_IPv6",count);
        ipAddress = rReceiver.v3ipV6address;
    }
    ipAddress.push_back(0);
    ipAddress.push_back(0);

    string strAddressHex = VL_TLV_TRANSPORT_ADDR_AND_MASK::getHexString(ipAddress);

    entry->snmpTargetAddrName_len = strlen(TargetAddrName);
    memcpy(entry->snmpTargetAddrName,TargetAddrName, entry->snmpTargetAddrName_len); //@STBconfigTag_0_0

    entry->snmpTargetAddrTAddress_len = strAddressHex.size();
    memcpy(entry->snmpTargetAddrTAddress, strAddressHex.c_str(), entry->snmpTargetAddrTAddress_len); //0A 00 00 00 00 00
    SNMP_DEBUGPRINT("entry->snmpTargetAddrTAddress ::: %s\n", entry->snmpTargetAddrTAddress);

    entry->snmpTargetAddrTimeout =   rReceiver.nV3Timeout;
    entry->snmpTargetAddrRetryCount =  rReceiver.nV3Retries;
    entry->snmpTargetAddrTagList_len = strlen(TargettAddrTagList);
    memcpy(entry->snmpTargetAddrTagList, TargettAddrTagList, entry->snmpTargetAddrTagList_len);     //?@STBconfigTag_0?

    entry->snmpTargetAddrParams_len = strlen(TargetAddrParams);
    memcpy(entry->snmpTargetAddrParams,TargetAddrParams,entry->snmpTargetAddrParams_len);        //00


    entry->snmpTargetAddrStorageType = 2;      //volatile(2)
    entry->snmpTargetAddrRowStatus = 1 ;       //active(1)

    netsnmp_tdata_row_add_index(row, ASN_PRIV_IMPLIED_OCTET_STR, // was ASN_OCTET_STR,
                                entry->snmpTargetAddrName,
                                entry->snmpTargetAddrName_len);

    netsnmp_tdata_add_row(table_data, row);
    SNMP_DEBUGPRINT("\n snmpTargetAddrTable_createEntry_allData ::END \n");
    //auto_unlock(&vlg_TlvEventDblock);
    return 1;

}

void
    snmpTargetAddrTable_free(netsnmp_cache * cache, void *vmagic)
{VL_AUTO_LOCK(vlg_TlvEventDblock);
    
   /* netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *this;

    while           ((this = netsnmp_tdata_get_first_row(table))) {
        netsnmp_tdata_remove_and_delete_row(table, this);
}*/
}
/** handles requests for the snmpTargetAddrTable table */
int
  snmpTargetAddrTable_handler(netsnmp_mib_handler *handler,
                                netsnmp_handler_registration *reginfo,
                                netsnmp_agent_request_info *reqinfo,
                                netsnmp_request_info *requests)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct snmpTargetAddrTable_entry *table_entry;
    int             ret;
    vl_row = NULL;

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request = requests; request; request = request->next) {
            /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(snmpTargetAddrTable_entry);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETADDRTDOMAIN:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OBJECT_ID,
                                         (u_char *) table_entry->
                                         snmpTargetAddrTDomain,
                                         table_entry->
                                         snmpTargetAddrTDomain_len*sizeof(oid));
                break;
            case COLUMN_SNMPTARGETADDRTADDRESS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         snmpTargetAddrTAddress,
                                         table_entry->
                                         snmpTargetAddrTAddress_len);
                break;
            case COLUMN_SNMPTARGETADDRTIMEOUT:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           snmpTargetAddrTimeout);
                break;
            case COLUMN_SNMPTARGETADDRRETRYCOUNT:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           snmpTargetAddrRetryCount);
                break;
            case COLUMN_SNMPTARGETADDRTAGLIST:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         snmpTargetAddrTagList,
                                         table_entry->
                                         snmpTargetAddrTagList_len);
                break;
            case COLUMN_SNMPTARGETADDRPARAMS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         snmpTargetAddrParams,
                                         table_entry->
                                         snmpTargetAddrParams_len);
                break;
            case COLUMN_SNMPTARGETADDRSTORAGETYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           snmpTargetAddrStorageType);
                break;
            case COLUMN_SNMPTARGETADDRROWSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           snmpTargetAddrRowStatus);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpTargetAddrTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETADDRTDOMAIN:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OBJECT_ID,
                                                       sizeof(table_entry->
                                                              snmpTargetAddrTDomain));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETADDRTADDRESS:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              snmpTargetAddrTAddress));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETADDRTIMEOUT:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETADDRRETRYCOUNT:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETADDRTAGLIST:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              snmpTargetAddrTagList));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETADDRPARAMS:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              snmpTargetAddrParams));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETADDRSTORAGETYPE:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
			//auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETADDRROWSTATUS:
                ret = netsnmp_check_vb_rowstatus(request->requestvb,
                                                 (table_entry ? RS_ACTIVE :
                                                  RS_NONEXISTENT));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
			//auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_ERR_NOTWRITABLE);
		 //auto_unlock(&vlg_TlvEventDblock);
                return SNMP_ERR_NOERROR;
            }
        }
        break;

    case MODE_SET_RESERVE2:
        for (request = requests; request; request = request->next) {
            netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETADDRROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    table_row =
                        snmpTargetAddrTable_createEntry(table_data,(char*)
                                                        table_info->
                                                        indexes->val.
                                                        string,
                                                        table_info->
                                                        indexes->val_len);
                    if (table_row) {
                        netsnmp_insert_tdata_row(request, table_row);
                    } else {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_RESOURCEUNAVAILABLE);
			   //auto_unlock(&vlg_TlvEventDblock);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_FREE:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpTargetAddrTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETADDRROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        snmpTargetAddrTable_removeEntry(table_data,
                                                        table_row);
                    }
                }
            }
        }
        break;

    case MODE_SET_ACTION:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpTargetAddrTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETADDRTDOMAIN:
                memcpy(table_entry->old_snmpTargetAddrTDomain,
                       table_entry->snmpTargetAddrTDomain,
                       sizeof(table_entry->snmpTargetAddrTDomain));
                table_entry->old_snmpTargetAddrTDomain_len =
                    table_entry->snmpTargetAddrTDomain_len;
                memset(table_entry->snmpTargetAddrTDomain, 0,
                       sizeof(table_entry->snmpTargetAddrTDomain));
                memcpy(table_entry->snmpTargetAddrTDomain,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->snmpTargetAddrTDomain_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_SNMPTARGETADDRTADDRESS:
                memcpy(table_entry->old_snmpTargetAddrTAddress,
                       table_entry->snmpTargetAddrTAddress,
                       sizeof(table_entry->snmpTargetAddrTAddress));
                table_entry->old_snmpTargetAddrTAddress_len =
                    table_entry->snmpTargetAddrTAddress_len;
                memset(table_entry->snmpTargetAddrTAddress, 0,
                       sizeof(table_entry->snmpTargetAddrTAddress));
                memcpy(table_entry->snmpTargetAddrTAddress,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->snmpTargetAddrTAddress_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_SNMPTARGETADDRTIMEOUT:
                table_entry->old_snmpTargetAddrTimeout =
                    table_entry->snmpTargetAddrTimeout;
                table_entry->snmpTargetAddrTimeout =
                    *request->requestvb->val.integer;
                break;
            case COLUMN_SNMPTARGETADDRRETRYCOUNT:
                table_entry->old_snmpTargetAddrRetryCount =
                    table_entry->snmpTargetAddrRetryCount;
                table_entry->snmpTargetAddrRetryCount =
                    *request->requestvb->val.integer;
                break;
            case COLUMN_SNMPTARGETADDRTAGLIST:
                memcpy(table_entry->old_snmpTargetAddrTagList,
                       table_entry->snmpTargetAddrTagList,
                       sizeof(table_entry->snmpTargetAddrTagList));
                table_entry->old_snmpTargetAddrTagList_len =
                    table_entry->snmpTargetAddrTagList_len;
                memset(table_entry->snmpTargetAddrTagList, 0,
                       sizeof(table_entry->snmpTargetAddrTagList));
                memcpy(table_entry->snmpTargetAddrTagList,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->snmpTargetAddrTagList_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_SNMPTARGETADDRPARAMS:
                memcpy(table_entry->old_snmpTargetAddrParams,
                       table_entry->snmpTargetAddrParams,
                       sizeof(table_entry->snmpTargetAddrParams));
                table_entry->old_snmpTargetAddrParams_len =
                    table_entry->snmpTargetAddrParams_len;
                memset(table_entry->snmpTargetAddrParams, 0,
                       sizeof(table_entry->snmpTargetAddrParams));
                memcpy(table_entry->snmpTargetAddrParams,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->snmpTargetAddrParams_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_SNMPTARGETADDRSTORAGETYPE:
                table_entry->old_snmpTargetAddrStorageType =
                    table_entry->snmpTargetAddrStorageType;
                table_entry->snmpTargetAddrStorageType =
                    *request->requestvb->val.integer;
                break;
            }
        }
        /*
         * Check the internal consistency of an active row
         */
        for (request = requests; request; request = request->next) {
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETADDRROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_ACTIVE:
                case RS_CREATEANDGO:
                    if ( 0/* XXX */ ) {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_INCONSISTENTVALUE);
			   //auto_unlock(&vlg_TlvEventDblock);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_UNDO:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpTargetAddrTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETADDRTDOMAIN:
                memcpy(table_entry->snmpTargetAddrTDomain,
                       table_entry->old_snmpTargetAddrTDomain,
                       sizeof(table_entry->snmpTargetAddrTDomain));
                memset(table_entry->old_snmpTargetAddrTDomain, 0,
                       sizeof(table_entry->snmpTargetAddrTDomain));
                table_entry->snmpTargetAddrTDomain_len =
                    table_entry->old_snmpTargetAddrTDomain_len;
                break;
            case COLUMN_SNMPTARGETADDRTADDRESS:
                memcpy(table_entry->snmpTargetAddrTAddress,
                       table_entry->old_snmpTargetAddrTAddress,
                       sizeof(table_entry->snmpTargetAddrTAddress));
                memset(table_entry->old_snmpTargetAddrTAddress, 0,
                       sizeof(table_entry->snmpTargetAddrTAddress));
                table_entry->snmpTargetAddrTAddress_len =
                    table_entry->old_snmpTargetAddrTAddress_len;
                break;
            case COLUMN_SNMPTARGETADDRTIMEOUT:
                table_entry->snmpTargetAddrTimeout =
                    table_entry->old_snmpTargetAddrTimeout;
                table_entry->old_snmpTargetAddrTimeout = 0;
                break;
            case COLUMN_SNMPTARGETADDRRETRYCOUNT:
                table_entry->snmpTargetAddrRetryCount =
                    table_entry->old_snmpTargetAddrRetryCount;
                table_entry->old_snmpTargetAddrRetryCount = 0;
                break;
            case COLUMN_SNMPTARGETADDRTAGLIST:
                memcpy(table_entry->snmpTargetAddrTagList,
                       table_entry->old_snmpTargetAddrTagList,
                       sizeof(table_entry->snmpTargetAddrTagList));
                memset(table_entry->old_snmpTargetAddrTagList, 0,
                       sizeof(table_entry->snmpTargetAddrTagList));
                table_entry->snmpTargetAddrTagList_len =
                    table_entry->old_snmpTargetAddrTagList_len;
                break;
            case COLUMN_SNMPTARGETADDRPARAMS:
                memcpy(table_entry->snmpTargetAddrParams,
                       table_entry->old_snmpTargetAddrParams,
                       sizeof(table_entry->snmpTargetAddrParams));
                memset(table_entry->old_snmpTargetAddrParams, 0,
                       sizeof(table_entry->snmpTargetAddrParams));
                table_entry->snmpTargetAddrParams_len =
                    table_entry->old_snmpTargetAddrParams_len;
                break;
            case COLUMN_SNMPTARGETADDRSTORAGETYPE:
                table_entry->snmpTargetAddrStorageType =
                    table_entry->old_snmpTargetAddrStorageType;
                table_entry->old_snmpTargetAddrStorageType = 0;
                break;
            case COLUMN_SNMPTARGETADDRROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        snmpTargetAddrTable_removeEntry(table_data,
                                                        table_row);
                    }
                }
                break;
            }
        }
        break;

    case MODE_SET_COMMIT:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpTargetAddrTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETADDRROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_ACTIVE:
                    table_entry->snmpTargetAddrRowStatus = RS_ACTIVE;
                    break;

                case RS_CREATEANDWAIT:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_NOTINSERVICE:
                    table_entry->snmpTargetAddrRowStatus = RS_NOTINSERVICE;
                    break;

                case RS_DESTROY:
                    snmpTargetAddrTable_removeEntry(table_data, table_row);
                }
            }
        }
        break;
    }
    //auto_unlock(&vlg_TlvEventDblock);
    return SNMP_ERR_NOERROR;
}
