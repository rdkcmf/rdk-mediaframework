/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


#include <stdlib.h>
/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.column_enums.conf 12909 2005-09-29 22:16:22Z hardaker $
 */
#ifndef DOCE_EVENTTABLE
#define DOCE_EVENTTABLE

#define DOCS_MAX_CHAR 256
#define TIME_MAX_CHAR 32


/*
 * enums for column docsDevEvLevel 
 */
#define DOCSDEVEVLEVEL_EMERGENCY    1
#define DOCSDEVEVLEVEL_ALERT        2
#define DOCSDEVEVLEVEL_CRITICAL        3
#define DOCSDEVEVLEVEL_ERROR        4
#define DOCSDEVEVLEVEL_WARNING        5
#define DOCSDEVEVLEVEL_NOTICE        6
#define DOCSDEVEVLEVEL_INFORMATION    7
#define DOCSDEVEVLEVEL_DEBUG        8

/*
 * enums for column docsDevEvReporting 
 */
#define DOCSDEVEVREPORTING_LOCAL_VOLATILE       0x10
#define DOCSDEVEVREPORTING_SYSLOG               0x20
#define DOCSDEVEVREPORTING_TRAPS                0x40
#define DOCSDEVEVREPORTING_LOCAL_NON_VOLATILE   0x80


#define MAX_EVENT 12
#define MAX_EVENT_ESTB 7
#define MAX_EVENT_IPV6 6
#define MAX_EVENT_TEXT 100
/**ErrorCoede set  Event-ID TLV parsing*/
//        Event                                     EventID  Eventlevel EventMesg

#define ERRORCODE_I4010     73040100
#define ERRORCODE_I4020     73040200
#define ERRORCODE_I4030     73040300

#define ERRORCODE_I4040     73040400
#define ERRORCODE_I4050     73040500
#define ERRORCODE_I4060     73040600
#define ERRORCODE_I4070     73040700
#define ERRORCODE_I4080     73040800
#define ERRORCODE_I4090     73040900

#define ERRORCODE_I401_1    73040101
#define ERRORCODE_I401_2    73040102
#define ERRORCODE_I401_3    73040103
#define ERRORCODE_I401_11   73041111

#define ERRORCODE_I411_1    73041101
#define ERRORCODE_I411_2    73041102
#define ERRORCODE_I411_3    73041103

#define ERRORCODE_I438_1    73043801
#define ERRORCODE_I438_2    73043802
#define ERRORCODE_I438_3    73043803
#define ERRORCODE_I438_4    73043804

#define ERRORCODE_I443_1    73044301

#define ERRORCODE_I453_1    73045301
#define ERRORCODE_I453_2    73045302
#define ERRORCODE_I453_3    73045303
#define ERRORCODE_I453_4    73045304
#define ERRORCODE_I453_5    73045305
#define ERRORCODE_I453_6    73045306

#define ERRORCODE_I454_1    73045401
#define ERRORCODE_I454_2    73045402
#define ERRORCODE_I454_3    73045403
#define ERRORCODE_I454_4    73045404
#define ERRORCODE_I454_5    73045405

/* DHCP IP Acquistion Events ID */
#define ERRORCODE_D01_0     68000100
#define ERRORCODE_D02_0     68000200
#define ERRORCODE_D03_1     68000301
#define ERRORCODE_D12_0     68001200
#define ERRORCODE_D12_1     68001201
#define ERRORCODE_D12_2     68001202
#define ERRORCODE_D12_3     68001203
#define ERRORCODE_D13_1     68001301
#define ERRORCODE_D13_2     68001302

#define ERRORCODE_D101_0    68010100
#define ERRORCODE_D102_0    68010200
#define ERRORCODE_D103_0    68010300
#define ERRORCODE_D104_0    68010400

/* OCAP Events ID */
#define ERRORCODE_B01_0     66000100
#define ERRORCODE_B02_0     66000200
#define ERRORCODE_B03_0     66000300
#define ERRORCODE_B04_0     66000400
#define ERRORCODE_B05_0     66000500
#define ERRORCODE_B06_0     66000600
#define ERRORCODE_B07_0     66000700
#define ERRORCODE_B08_0     66000800
#define ERRORCODE_B09_0     66000900
#define ERRORCODE_B10_0     66001000
#define ERRORCODE_B11_0     66001100
#define ERRORCODE_B12_0     66001200
#define ERRORCODE_B13_0     66001300
#define ERRORCODE_B14_0     66001400
#define ERRORCODE_B15_0     66001500
#define ERRORCODE_B16_0     66001600
#define ERRORCODE_B17_0     66001700
#define ERRORCODE_B18_0     66001800
#define ERRORCODE_B19_0     66001900
#define ERRORCODE_B20_0     66002000
#define ERRORCODE_B21_0     66002100
#define ERRORCODE_B22_0     66002200
#define ERRORCODE_B23_0     66002300
#define ERRORCODE_B24_0     66002400
#define ERRORCODE_B25_0     66002500
#define ERRORCODE_B26_0     66002600
#define ERRORCODE_B27_XX    66002700
#define ERRORCODE_B28_0     66002800
#define ERRORCODE_B29_0     66002900
#define ERRORCODE_B30_0     66003000
#define ERRORCODE_B31_0     66003100


/*COLUMN_DOCSDEVEVREPORTING*/
#define LOCAL 0x00
#define TRAPS 0x01
#define SYSLOG 0x02



#ifdef __cplusplus
extern "C" {
#endif

extern const char *TLVEventMessg[MAX_EVENT];
extern const char *TLV_DHCP_ESTB_CC_Messg[MAX_EVENT_ESTB];
extern const char *TLV_DHCP_ESTB_IPv6_Messg[MAX_EVENT_IPV6];
//static char old_docdateTime[DOCS_MAX_CHAR];
//static char docdateTime[DOCS_MAX_CHAR];
typedef unsigned long u_long;
typedef enum{
    resetLog = 1,
    useDefaultReporting = 2
} docsdevEvControl_t;

typedef struct {

   int EvnID;
   char EventDesc[256];
}EventIDdesc_t;


/*
docsDevEvIndex OBJECT-TYPE
        SYNTAX      Integer32 (1..2147483647)
        MAX-ACCESS  not-accessible
        STATUS      current
        DESCRIPTION
            "Provides relative ordering of the objects in the event
             log. This object will always increase except when
             (a) the log is reset via docsDevEvControl,
             (b) the device reboots and does not implement non-volatile
             storage for this log, or (c) it reaches the value 2^31.
             The next entry for all the above cases is 1."
        ::= { docsDevEventEntry 1 }*/
  /*
     * Typical data structure for a row entry 
     */
typedef struct docsDevEventTable_entry {
    /*
     * Index values
     */
    long            docsDevEvIndex;
    /*
     * Column values 
     */
    char            docsDevEvFirstTime[TIME_MAX_CHAR];
    size_t          docsDevEvFirstTime_len;
    char            docsDevEvLastTime[TIME_MAX_CHAR];
    size_t          docsDevEvLastTime_len;
    u_long          docsDevEvCounts;
    long            docsDevEvLevel;
    u_long          docsDevEvId;
    char            docsDevEvText[DOCS_MAX_CHAR];
    size_t          docsDevEvText_len;

    int             valid;
} docsDevEventTable_t;

/*
docsDevEvPriority OBJECT-TYPE
        SYNTAX INTEGER {
            emergency(1),
            alert(2),
            critical(3),

            error(4),
            warning(5),
            notice(6),
            information(7),
            debug(8)
        }
        MAX-ACCESS  not-accessible
        STATUS      current
        DESCRIPTION
            "The priority level that is controlled by this
             entry. These are ordered from most (emergency) to least
             (debug) critical.  Each event with a CM or CMTS has a
             particular priority level associated with it (as defined
             by the vendor). During normal operation no event more
             critical than notice(6) should be generated. Events between
             warning and emergency should be generated at appropriate
             levels of problems (e.g. emergency when the box is about to
             crash)."
        ::= { docsDevEvControlEntry 1 }

*/
/*docsDevEvReporting OBJECT-TYPE
        SYNTAX BITS {
            local(0),
            traps(1),
            syslog(2)
        }
        MAX-ACCESS  read-write
        STATUS      current
        DESCRIPTION
            "Defines the action to be taken on occurrence of this
             event class. Implementations may not necessarily support
             all options for all event classes, but at minimum must
             allow traps and syslogging to be disabled. If the
             local(0) bit is set, then log to the internal log, if the
             traps(1) bit is set, then generate a trap, if the
             syslog(2) bit is set, then send a syslog message
             (assuming the syslog address is set)."
        ::= { docsDevEvControlEntry 2 }
*/
/*
  * Typical data structure for a row entry 
 */

#define DOCS_EVENT_REPORTING_BYTES 2
typedef struct docsDevEvControlTable_entry {
    /*
     * Index values 
     */
    long            docsDevEvPriority;

    /*
     * Column values 
     */
    char            docsDevEvReporting[DOCS_EVENT_REPORTING_BYTES];
    size_t          docsDevEvReporting_len;
    char            old_docsDevEvReporting[DOCS_EVENT_REPORTING_BYTES];
    size_t          old_docsDevEvReporting_len;

    int             valid;
} docsDevEvControlTable_t;

/* This Event will gives Error Flag , text and devlevel */
int EdocsDevEventhandling(unsigned long nEventId, int eType = -1, int eClient = -1);
void GetLocalTime_YMDZ(u_char * time_ymdz, size_t *lenght_time);

#ifdef __cplusplus
}
#endif

#endif                          /* DOCE_EVENTTABLE */
