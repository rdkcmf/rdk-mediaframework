/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "snmpNotifyTable.h"
#include "snmpAccessInclude.h"
#include "cardManagerIf.h"
#include "SnmpIORM.h"
#include "vl_ocStbHost_GetData.h"
#include "vlMutex.h"
#include "Tlvevent.h"

static vlMutex & vlg_TlvEventDblock = TlvConfig::vlGetTlvEventDbLock();
#ifdef AUTO_LOCKING

static void auto_lock(rmf_osal_Mutex *mutex)
{

               if(!mutex) 
			   	RDK_LOG(RDK_LOG_ERROR, "LOG.RDK.POD","\n\n\n\n %s: Mutex is NULL \n\n\n", __FUNCTION__);
		 rmf_osal_mutexAcquire(*mutex);
}

static void auto_unlock(rmf_osal_Mutex *mutex)
{
         if(mutex)
		 rmf_osal_mutexRelease(*mutex);
}
#endif
/** Initializes the snmpNotifyTable module */
void
init_snmpNotifyTable(void)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

  /* here we initialize all the tables we're planning on supporting */
    initialize_table_snmpNotifyTable();
  //auto_unlock(&vlg_TlvEventDblock);
}

/** Initialize the snmpNotifyTable table by defining its contents and how it's structured */
void
initialize_table_snmpNotifyTable(void)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    static oid snmpNotifyTable_oid[] = {1,3,6,1,6,3,13,1,1};
    size_t snmpNotifyTable_oid_len   = OID_LENGTH(snmpNotifyTable_oid);
    netsnmp_handler_registration    *reg;
    netsnmp_tdata                   *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg = netsnmp_create_handler_registration(
              "snmpNotifyTable",     snmpNotifyTable_handler,
              snmpNotifyTable_oid, snmpNotifyTable_oid_len,
              HANDLER_CAN_RWRITE
              );

    table_data = netsnmp_tdata_create_table( "snmpNotifyTable", 0 );
    table_info = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    netsnmp_table_helper_add_indexes(table_info,
                           ASN_PRIV_IMPLIED_OCTET_STR/*ASN_OCTET_STR*/,  /* index: snmpNotifyName */
                           0);

    table_info->min_column = COLUMN_SNMPNOTIFYTAG;
    table_info->max_column = COLUMN_SNMPNOTIFYROWSTATUS;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(SNMPNOTIFYTABLE_TIMEOUT,
                                 snmpNotifyTable_load,
                                 snmpNotifyTable_free,
                                 snmpNotifyTable_oid,
                                 snmpNotifyTable_oid_len);
    cache->magic = (void *) table_data;
    cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
    NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
    NETSNMP_CACHE_DONT_AUTO_RELEASE;
    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "snmpNotifyTable");

    /* Initialise the contents of the table here */
    //snmpNotifyTableEventhandling(NULL);
    if(0 == snmpNotifyTable_load(cache,table_data))
    {
        //snmpNotifyTable_load"
        SNMP_DEBUGPRINT(" ERROR:: snmpNotifyTable_load Not yet table initialise here \n");
    }
	//auto_unlock(&vlg_TlvEventDblock);
}

/* create a new row in the table */
netsnmp_tdata_row *
snmpNotifyTable_createEntry(netsnmp_tdata *table_data
                 , char* snmpNotifyName
                 , size_t snmpNotifyName_len)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    struct snmpNotifyTable_entry *entry;
    netsnmp_tdata_row *row;

    entry = SNMP_MALLOC_TYPEDEF(struct snmpNotifyTable_entry);
    if (!entry) {
	 //auto_unlock(&vlg_TlvEventDblock);
        return NULL;
    }
    row = netsnmp_tdata_create_row();
    if (!row) {
        SNMP_FREE(entry);
	 //auto_unlock(&vlg_TlvEventDblock);
        return NULL;
    }
    row->data = entry;
    memcpy(entry->snmpNotifyName, snmpNotifyName, snmpNotifyName_len);
    entry->snmpNotifyName_len = snmpNotifyName_len;
    netsnmp_tdata_row_add_index( row, ASN_OCTET_STR,
                                 entry->snmpNotifyName, snmpNotifyName_len);
    netsnmp_tdata_add_row( table_data, row );
    //auto_unlock(&vlg_TlvEventDblock);
    return row;
}

/* remove a row from the table */
void
snmpNotifyTable_removeEntry(netsnmp_tdata     *table_data,
                 netsnmp_tdata_row *row)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    struct snmpNotifyTable_entry *entry;

    if (!row)
    	{
	 //auto_unlock(&vlg_TlvEventDblock);
        return;    /* Nothing to remove */
    	}
    entry = (struct snmpNotifyTable_entry *)
        netsnmp_tdata_remove_and_delete_row( table_data, row );
    if (entry)
        SNMP_FREE( entry );   /* XXX - release any other internal resources */
    //auto_unlock(&vlg_TlvEventDblock);
}


#if 1
static vector<int> NotifyList;


#ifdef __cplusplus
extern "C" {
#endif

int static iszTadd;
void snmpNotifyTableEventhandling(char *SnmpAddt)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    if(0 == NotifyList.size())
    {
        NotifyList.push_back(SNMPNOTIFYTYPE_INFORM);
        NotifyList.push_back(SNMPNOTIFYTYPE_TRAP);
    }
  //auto_unlock(&vlg_TlvEventDblock);
}
#ifdef __cplusplus
}
#endif
#endif //if 0
/*
 * Example cache handling - set up table_data list from a suitable file
 */
int
snmpNotifyTable_load(netsnmp_cache * cache, void *vmagic)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *row;

    SNMP_DEBUGPRINT("\n snmpNotifyTable_load :: Start snmpNotifyTable_load   :::  \n");
    bool replace_table = false;
    int count = 0;
//    netsnmp_tdata_row *temprow;
    if(netsnmp_tdata_row_first(table_data))
    {
        replace_table = true;
    }

    for(count = 0; count < NotifyList.size(); count++)
    {
        if(replace_table)
        {
            replace_table = false;
            Table_free(table_data);
        }
        SNMP_DEBUGPRINT("NotifyType ::: %d \n", NotifyList[count]);
        snmpNotifyTable_createEntry_allData(table_data, NotifyList[count], count);
    }
    if(NotifyList.size() == 0)
    {
         Table_free(table_data);
         snmpNotifyTable_createEntry_allData(table_data, 0, count);
    }

    SNMP_DEBUGPRINT("\n snmpNotifyTable_load :: End snmpNotifyTable_load   :::  \n");
    //auto_unlock(&vlg_TlvEventDblock);
    return 1;
}

int snmpNotifyTable_createEntry_allData(netsnmp_tdata * table_data, int eNotifyType, int count)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    int i = 0;
    SNMP_DEBUGPRINT("\n snmpNotifyTable_createEntry_allData ::Start \n");
    struct snmpNotifyTable_entry *entry;
    netsnmp_tdata_row *row;
    entry = SNMP_MALLOC_TYPEDEF(struct snmpNotifyTable_entry);
    if (!entry)
    	{
    	//auto_unlock(&vlg_TlvEventDblock);
       return 0;
    	}

    row = netsnmp_tdata_create_row();
    if (!row) {
    SNMP_FREE(entry);
    //auto_unlock(&vlg_TlvEventDblock);
    return 0;
    }
    row->data = entry;
    /*
     * Index values
     */

    char NotifyName[STRLEN_CHAR_ACCESS];
    char NotifyTag[STRLEN_CHAR_ACCESS];

    char * pszNotifyType = "none";

    switch(eNotifyType)
    {
        case SNMPNOTIFYTYPE_TRAP:
        {
            pszNotifyType = "@STBnotifyconfig_trap";
        }
        break;

        case SNMPNOTIFYTYPE_INFORM:
        {
            pszNotifyType = "@STBnotifyconfig_inform";
        }
        break;
    }

    snprintf(NotifyName, sizeof(NotifyName), "%s", pszNotifyType);
    memset (NotifyTag, '\0', sizeof(NotifyTag) );
    strncpy(NotifyTag,NotifyName,sizeof(NotifyTag)-1 );

    entry->snmpNotifyName_len = strlen(NotifyName);
    memcpy(entry->snmpNotifyName,NotifyName, entry->snmpNotifyName_len); //@STBconfigTag_0_0

    entry->snmpNotifyTag_len = strlen(NotifyTag);
    memcpy(entry->snmpNotifyTag, NotifyTag, entry->snmpNotifyTag_len);     //?@STBconfigTag_0?

    entry->snmpNotifyType = eNotifyType;

    switch(eNotifyType)
    {
        case SNMPNOTIFYTYPE_TRAP:
        case SNMPNOTIFYTYPE_INFORM:
        {
            entry->snmpNotifyStorageType = 2;      //volatile(2)
            entry->snmpNotifyRowStatus = 1 ;       //active(1)
        }
        break;

        default:
        {
            entry->snmpNotifyStorageType = 1;      //other(1)
            entry->snmpNotifyRowStatus = 2 ;       //notInService(2)
        }
        break;
    }

    netsnmp_tdata_row_add_index(row, ASN_PRIV_IMPLIED_OCTET_STR, // was ASN_OCTET_STR,
                                entry->snmpNotifyName,
                                entry->snmpNotifyName_len);

    netsnmp_tdata_add_row(table_data, row);
    SNMP_DEBUGPRINT("\n snmpNotifyTable_createEntry_allData ::END \n");
    //auto_unlock(&vlg_TlvEventDblock);
    return 1;

}


void
    snmpNotifyTable_free(netsnmp_cache * cache, void *vmagic)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

   /* netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *this;

    while           ((this = netsnmp_tdata_get_first_row(table))) {
        netsnmp_tdata_remove_and_delete_row(table, this);
}*/
}

/** handles requests for the snmpNotifyTable table */
int
snmpNotifyTable_handler(
    netsnmp_mib_handler               *handler,
    netsnmp_handler_registration      *reginfo,
    netsnmp_agent_request_info        *reqinfo,
    netsnmp_request_info              *requests)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct snmpNotifyTable_entry *table_entry;
    int             ret;
    vl_row = NULL;

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request = requests; request; request = request->next) {
            /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(snmpNotifyTable_entry);

            switch (table_info->colnum) {
            case COLUMN_SNMPNOTIFYTAG:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value( request->requestvb, ASN_OCTET_STR,
                                 (u_char*)table_entry->snmpNotifyTag,
                                          table_entry->snmpNotifyTag_len);
                break;
            case COLUMN_SNMPNOTIFYTYPE:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->snmpNotifyType);
                break;
            case COLUMN_SNMPNOTIFYSTORAGETYPE:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->snmpNotifyStorageType);
                break;
            case COLUMN_SNMPNOTIFYROWSTATUS:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->snmpNotifyRowStatus);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
        for (request=requests; request; request=request->next) {
            table_entry = (struct snmpNotifyTable_entry *)
                              netsnmp_tdata_extract_entry(request);
            table_info  =     netsnmp_extract_table_info( request);

            switch (table_info->colnum) {
            case COLUMN_SNMPNOTIFYTAG:
            /* or possiblc 'netsnmp_check_vb_type_and_size' */
                ret = netsnmp_check_vb_type_and_max_size(
                          request->requestvb, ASN_OCTET_STR, sizeof(table_entry->snmpNotifyTag));
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    //auto_unlock(&vlg_TlvEventDblock);					
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPNOTIFYTYPE:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    //auto_unlock(&vlg_TlvEventDblock);								
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPNOTIFYSTORAGETYPE:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    //auto_unlock(&vlg_TlvEventDblock);			
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPNOTIFYROWSTATUS:
                ret = netsnmp_check_vb_rowstatus(request->requestvb,
                         (table_entry ? RS_ACTIVE : RS_NONEXISTENT ));
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    //auto_unlock(&vlg_TlvEventDblock);			
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error( reqinfo, request,
                                           SNMP_ERR_NOTWRITABLE );
                //auto_unlock(&vlg_TlvEventDblock);			
                return SNMP_ERR_NOERROR;
            }
        }
        break;

    case MODE_SET_RESERVE2:
        for (request=requests; request; request=request->next) {
            netsnmp_tdata_extract_row(  request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info( request);

            switch (table_info->colnum) {
            case COLUMN_SNMPNOTIFYROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    table_row = snmpNotifyTable_createEntry(
                            table_data,
                            (char*)table_info->indexes->val.string,
                            table_info->indexes->val_len);
                    if (table_row) {
                        netsnmp_insert_tdata_row( request, table_row );
                    } else {
                        netsnmp_set_request_error( reqinfo, request,
                                                   SNMP_ERR_RESOURCEUNAVAILABLE );
                        //auto_unlock(&vlg_TlvEventDblock);			
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_FREE:
        for (request=requests; request; request=request->next) {
            table_entry = (struct snmpNotifyTable_entry *)
                              netsnmp_tdata_extract_entry(request);
            table_row   =     netsnmp_tdata_extract_row(  request);
            table_data  =     netsnmp_tdata_extract_table(request);
            table_info  =     netsnmp_extract_table_info( request);

            switch (table_info->colnum) {
            case COLUMN_SNMPNOTIFYROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        snmpNotifyTable_removeEntry(table_data, table_row );
                    }
                }
            }
        }
        break;

    case MODE_SET_ACTION:
        for (request=requests; request; request=request->next) {
            table_entry = (struct snmpNotifyTable_entry *)
                              netsnmp_tdata_extract_entry(request);
            table_info  =     netsnmp_extract_table_info( request);

            switch (table_info->colnum) {
            case COLUMN_SNMPNOTIFYTAG:
                memcpy( table_entry->old_snmpNotifyTag,
                        table_entry->snmpNotifyTag,
                        sizeof(table_entry->snmpNotifyTag));
                table_entry->old_snmpNotifyTag_len =
                        table_entry->snmpNotifyTag_len;
                memset( table_entry->snmpNotifyTag, 0,
                        sizeof(table_entry->snmpNotifyTag));
                memcpy( table_entry->snmpNotifyTag,
                        request->requestvb->val.string,
                        request->requestvb->val_len);
                table_entry->snmpNotifyTag_len =
                        request->requestvb->val_len;
                break;
            case COLUMN_SNMPNOTIFYTYPE:
                table_entry->old_snmpNotifyType = table_entry->snmpNotifyType;
                table_entry->snmpNotifyType     = *request->requestvb->val.integer;
                break;
            case COLUMN_SNMPNOTIFYSTORAGETYPE:
                table_entry->old_snmpNotifyStorageType = table_entry->snmpNotifyStorageType;
                table_entry->snmpNotifyStorageType     = *request->requestvb->val.integer;
                break;
            }
        }
        /* Check the internal consistency of an active row */
        for (request=requests; request; request=request->next) {
                              netsnmp_tdata_extract_entry(request);
            table_info  =     netsnmp_extract_table_info( request);

            switch (table_info->colnum) {
            case COLUMN_SNMPNOTIFYROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_ACTIVE:
                case RS_CREATEANDGO:
                    if ( *request->requestvb->val.integer !=RS_ACTIVE || *request->requestvb->val.integer != RS_CREATEANDGO ) {
                        netsnmp_set_request_error( reqinfo, request,
                                                   SNMP_ERR_INCONSISTENTVALUE );
			   //auto_unlock(&vlg_TlvEventDblock);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_UNDO:
        for (request=requests; request; request=request->next) {
            table_entry = (struct snmpNotifyTable_entry *)
                              netsnmp_tdata_extract_entry(request);
            table_row   =     netsnmp_tdata_extract_row(  request);
            table_data  =     netsnmp_tdata_extract_table(request);
            table_info  =     netsnmp_extract_table_info( request);

            switch (table_info->colnum) {
            case COLUMN_SNMPNOTIFYTAG:
                memcpy( table_entry->snmpNotifyTag,
                        table_entry->old_snmpNotifyTag,
                        sizeof(table_entry->snmpNotifyTag));
                memset( table_entry->old_snmpNotifyTag, 0,
                        sizeof(table_entry->snmpNotifyTag));
                table_entry->snmpNotifyTag_len =
                        table_entry->old_snmpNotifyTag_len;
                break;
            case COLUMN_SNMPNOTIFYTYPE:
                table_entry->snmpNotifyType     = table_entry->old_snmpNotifyType;
                table_entry->old_snmpNotifyType = 0;
                break;
            case COLUMN_SNMPNOTIFYSTORAGETYPE:
                table_entry->snmpNotifyStorageType     = table_entry->old_snmpNotifyStorageType;
                table_entry->old_snmpNotifyStorageType = 0;
                break;
            case COLUMN_SNMPNOTIFYROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        snmpNotifyTable_removeEntry(table_data, table_row );
                    }
                }
                break;
            }
        }
        break;

    case MODE_SET_COMMIT:
        for (request=requests; request; request=request->next) {
            table_entry = (struct snmpNotifyTable_entry *)
                              netsnmp_tdata_extract_entry(request);
            table_row   =     netsnmp_tdata_extract_row(  request);
            table_data  =     netsnmp_tdata_extract_table(request);
            table_info  =     netsnmp_extract_table_info(    request);

            switch (table_info->colnum) {
            case COLUMN_SNMPNOTIFYROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                    table_entry->valid = 1;
                    /* Fall-through */
                case RS_ACTIVE:
                    table_entry->snmpNotifyRowStatus = RS_ACTIVE;
                    break;

                case RS_CREATEANDWAIT:
                    table_entry->valid = 1;
                    /* Fall-through */
                case RS_NOTINSERVICE:
                    table_entry->snmpNotifyRowStatus = RS_NOTINSERVICE;
                    break;

                case RS_DESTROY:
                    snmpNotifyTable_removeEntry(table_data, table_row );
                }
            }
        }
        break;
    }
    //auto_unlock(&vlg_TlvEventDblock);
    return SNMP_ERR_NOERROR;
}
