/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "vacmSecurityToGroupTable.h"
#include "snmpAccessInclude.h"
#include "vl_ocStbHost_GetData.h"
//#include "vlMemCpy.h"
#include "utilityMacros.h"
#include "string.h"
/** Initializes the vacmSecurityToGroupTable module */
void
init_vacmSecurityToGroupTable(void)
{
    /*
     * here we initialize all the tables we're planning on supporting
     */
    initialize_table_vacmSecurityToGroupTable();
}

//# Determine the first/last column names

/** Initialize the vacmSecurityToGroupTable table by defining its contents and how it's structured */
void
initialize_table_vacmSecurityToGroupTable(void)
{
    static oid      vacmSecurityToGroupTable_oid[] =
        { 1, 3, 6, 1, 6, 3, 16, 1, 2 };
    size_t          vacmSecurityToGroupTable_oid_len =
        OID_LENGTH(vacmSecurityToGroupTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("vacmSecurityToGroupTable",
                                            vacmSecurityToGroupTable_handler,
                                            vacmSecurityToGroupTable_oid,
                                            vacmSecurityToGroupTable_oid_len,
                                            HANDLER_CAN_RWRITE);

    table_data = netsnmp_tdata_create_table("vacmSecurityToGroupTable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info, ASN_INTEGER,   /* index: vacmSecurityModel */
                                     ASN_PRIV_IMPLIED_OCTET_STR /*ASN_OCTET_STR*/,     /* index: vacmSecurityName */
                                     0);

    table_info->min_column = COLUMN_VACMGROUPNAME;
    table_info->max_column = COLUMN_VACMSECURITYTOGROUPSTATUS;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(VACMSECURITYTOGROUPTABLE_TIMEOUT,
                                 vacmSecurityToGroupTable_load,
                                 vacmSecurityToGroupTable_free,
                                 vacmSecurityToGroupTable_oid,
                                 vacmSecurityToGroupTable_oid_len);
        cache->magic = (void *) table_data;
    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "vacmSecurityToGroupTable");
     cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
    NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
    NETSNMP_CACHE_DONT_AUTO_RELEASE;

      /*
         * Initialise the contents of the table here
         */
     if(0 == vacmSecurityToGroupTable_load(cache,table_data))
    {
            //snmpCommunityTable_load"
      SNMP_DEBUGPRINT(" ERROR:: vacmSecurityToGroupTable_load Not yet table initialise here \n");
    }
}


/*
 * create a new row in the table
 */
netsnmp_tdata_row *vacmSecurityToGroupTable_createEntry(netsnmp_tdata *
                                                        table_data,
                                                        long
                                                        vacmSecurityModel,
                                                        char
                                                        *vacmSecurityName,
                                                        size_t
                                                        vacmSecurityName_len)
{
    struct vacmSecurityToGroupTable_entry *entry;
    netsnmp_tdata_row *row;
     entry = SNMP_MALLOC_TYPEDEF(struct vacmSecurityToGroupTable_entry);
    if              (!entry)
                        return NULL;

                    row = netsnmp_tdata_create_row();
    if              (!row) {
        SNMP_FREE(entry);
        return NULL;
    }
    row->           data = entry;
    entry->vacmSecurityModel = vacmSecurityModel;
    netsnmp_tdata_row_add_index(row, ASN_INTEGER,
                                &(entry->vacmSecurityModel),
                                sizeof(entry->vacmSecurityModel));
    memcpy(entry->vacmSecurityName, vacmSecurityName,
           vacmSecurityName_len);
    entry->vacmSecurityName_len = vacmSecurityName_len;
    netsnmp_tdata_row_add_index(row, ASN_OCTET_STR,
                                entry->vacmSecurityName,
                                vacmSecurityName_len);
    netsnmp_tdata_add_row(table_data, row);
    return row;
}

/*
 * remove a row from the table
 */
void
   vacmSecurityToGroupTable_removeEntry(netsnmp_tdata * table_data,
                                         netsnmp_tdata_row * row) {
    struct vacmSecurityToGroupTable_entry *entry;

    if (!row)
        return;                 /* Nothing to remove */
    entry = (struct vacmSecurityToGroupTable_entry *)
        netsnmp_tdata_remove_and_delete_row(table_data, row);
    if (entry)
        SNMP_FREE(entry);       /* XXX - release any other internal resources */
}


//snmpCommunityTable_t ListofCommunity[20];
//char Communitysting[20][STRLEN_CHAR_ACCESS]={"public", "supermax", "manuvl"};
//char tlvparseCm[20];
#define MAX_ROW_INDEX_VIEW 20
static int TlvClist ;
//= 2;
//here we will get follwoing vaues from tlv :: numberoftlv-list (n times 53 obj) each interface contains v1 and v2 access
#ifdef __cplusplus
extern "C" {
#endif

int static iszgroup;
//Should give the number times the cox-v1v2 exits in the tlv processing , i.e number of tag 53 exits in the tlv file
void vacmSecurityToGroupTableEventhandling(int tlvconfNlist)
{
        int Szlistdosevent;
       SNMP_DEBUGPRINT("\n snmpV1V2CommunityTableEventhandling :: End snmpV1V2CommunityTableEventhandling   :::  \n");
       // memcpy(Communitysting+isz,tlvparseCm , strlen(tlvparseCm));
        TlvClist = tlvconfNlist; //just for 53 ntimes exits count
        iszgroup++;
        Szlistdosevent = iszgroup;
         if(iszgroup >= MAX_ROW_INDEX_VIEW) //it supports max row 20's
       {
           iszgroup = 0;
           Szlistdosevent = 0;
       }
        SNMP_DEBUGPRINT("\n snmpV1V2CommunityTableEventhandling :: End snmpV1V2CommunityTableEventhandling   ::: iSz %d\n", Szlistdosevent);

      // return 1;
}
#ifdef __cplusplus
}
#endif

/*
 * Example cache handling - set up table_data list from a suitable file
 */

int
   vacmSecurityToGroupTable_load(netsnmp_cache * cache, void *vmagic) {
    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *row;
    char comm[256];
    //iszgroup = TlvClist;
    SNMP_DEBUGPRINT("\n vacmSecurityToGroupTable_load ::   :::  \n");
    bool replace_table = false;
    int count = 0;
    int v1v2;
    if(netsnmp_tdata_row_first(table_data))
    {
        replace_table = true;
    }
     SNMP_DEBUGPRINT("\n vacmSecurityToGroupTable_load :: vacmSecurityToGroupTable_load   ::: iSz %d\n",iszgroup);

     //memcpy(comm,Communitysting[count],sizeof(Communitysting[count]));
    for(count = 0; count < iszgroup; count++)//isz also represents the number of types the 53 tlv has present in tlv.conf
    {
               if(replace_table)
               {
                    replace_table = false;
                    Table_free(table_data);
               }
           //each v1v2 co-exitscommuntiyv1v2 entites in the tlv217 should process v1=1 and v2=2
        for( v1v2 = 1; v1v2 <= 2; v1v2++)
        {
             vacmSecurityToGroupTable_createEntry_allData(table_data,  count, v1v2);

        }

    }
    if(iszgroup == 0)
    {
       Table_free(table_data);
       vacmSecurityToGroupTable_createEntry_allData(table_data,  count, 2);

    }
     SNMP_DEBUGPRINT("\n vacmSecurityToGroupTable_createEntry_allData :: End vacmSecurityToGroupTable_createEntry_allData   :::  \n");
    return 1;

}
int vacmSecurityToGroupTable_createEntry_allData(netsnmp_tdata *table_data, int count, int secmodel)
{
    SNMP_DEBUGPRINT("\n vacmSecurityToGroupTable_createEntry_allData ::Start \n");
   char SecurityName[STRLEN_CHAR_ACCESS];
   char GroupName[STRLEN_CHAR_ACCESS];
    struct vacmSecurityToGroupTable_entry *entry;
    netsnmp_tdata_row *row;
    entry = SNMP_MALLOC_TYPEDEF(struct vacmSecurityToGroupTable_entry);
    if (!entry)
    return 0;

    row = netsnmp_tdata_create_row();
    if (!row) {
    SNMP_FREE(entry);
    return 0;
    }
    row->data = entry;
    /*
     * Index values
     */
    snprintf(SecurityName, sizeof(SecurityName), "@STBconfig_%d",count);//?@STBconfig_0?
    snprintf(GroupName, sizeof(SecurityName), "@STBconfigV%d_%d" ,secmodel ,count);//?@STBconfigV1_0?
    /*
     * Index values
        */
        entry->vacmSecurityModel = secmodel;
        entry->vacmSecurityName_len = strlen(SecurityName);
        memcpy(entry->vacmSecurityName,SecurityName, entry->vacmSecurityName_len);
        /*
        * Column values
        */
            entry->vacmGroupName_len = strlen(GroupName);
        memcpy(entry->vacmGroupName, GroupName, entry->vacmGroupName_len );

            entry->vacmSecurityToGroupStorageType = VACMSECURITYTOGROUPSTORAGETYPE_VOLATILE;
        entry->vacmSecurityToGroupStatus = VACMSECURITYTOGROUPSTATUS_ACTIVE;

        netsnmp_tdata_row_add_index(row, ASN_UNSIGNED,
                             &(entry->vacmSecurityModel),
                                   sizeof(entry->vacmSecurityModel));
        netsnmp_tdata_row_add_index(row, ASN_PRIV_IMPLIED_OCTET_STR, // was ASN_OCTET_STR,
                                entry->vacmSecurityName,
                                entry->vacmSecurityName_len);

         netsnmp_tdata_add_row(table_data, row);

    SNMP_DEBUGPRINT("\n vacmSecurityToGroupTable_createEntry_allData ::END \n");

   return 1;

}

void
   vacmSecurityToGroupTable_free(netsnmp_cache * cache, void *vmagic) {
/*    netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *this;

    while           ((this = netsnmp_tdata_get_first_row(table))) {
        netsnmp_tdata_remove_and_delete_row(table, this);
}*/}
/** handles requests for the vacmSecurityToGroupTable table */
int
  vacmSecurityToGroupTable_handler(netsnmp_mib_handler *handler,
                                     netsnmp_handler_registration *reginfo,
                                     netsnmp_agent_request_info *reqinfo,
                                     netsnmp_request_info *requests) {

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct vacmSecurityToGroupTable_entry *table_entry;
    int             ret;
    vl_row = NULL;

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request = requests; request; request = request->next) {
//             table_entry = (struct vacmSecurityToGroupTable_entry *)                netsnmp_tdata_extract_entry(request);
            /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(vacmSecurityToGroupTable_entry);

            switch (table_info->colnum) {
            case COLUMN_VACMGROUPNAME:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         vacmGroupName,
                                         table_entry->vacmGroupName_len);
                break;
            case COLUMN_VACMSECURITYTOGROUPSTORAGETYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           vacmSecurityToGroupStorageType);
                break;
            case COLUMN_VACMSECURITYTOGROUPSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           vacmSecurityToGroupStatus);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmSecurityToGroupTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMGROUPNAME:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              vacmGroupName));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_VACMSECURITYTOGROUPSTORAGETYPE:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_VACMSECURITYTOGROUPSTATUS:
                ret = netsnmp_check_vb_rowstatus(request->requestvb,
                                                 (table_entry ? RS_ACTIVE :
                                                  RS_NONEXISTENT));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_ERR_NOTWRITABLE);
                return SNMP_ERR_NOERROR;
            }
        }
        break;

    case MODE_SET_RESERVE2:
        for (request = requests; request; request = request->next) {
            netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMSECURITYTOGROUPSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    table_row =
                        vacmSecurityToGroupTable_createEntry(table_data,
                                                             *table_info->
                                                             indexes->val.
                                                             integer,(char*)
                                                             table_info->
                                                             indexes->val.
                                                             string,
                                                             table_info->
                                                             indexes->
                                                             val_len);
                    if (table_row) {
                        netsnmp_insert_tdata_row(request, table_row);
                    } else {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_RESOURCEUNAVAILABLE);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_FREE:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmSecurityToGroupTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMSECURITYTOGROUPSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        vacmSecurityToGroupTable_removeEntry(table_data,
                                                             table_row);
                    }
                }
            }
        }
        break;

    case MODE_SET_ACTION:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmSecurityToGroupTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMGROUPNAME:
                memcpy(table_entry->old_vacmGroupName,
                       table_entry->vacmGroupName,
                       sizeof(table_entry->vacmGroupName));
                table_entry->old_vacmGroupName_len =
                    table_entry->vacmGroupName_len;
                memset(table_entry->vacmGroupName, 0,
                       sizeof(table_entry->vacmGroupName));
                memcpy(table_entry->vacmGroupName,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->vacmGroupName_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_VACMSECURITYTOGROUPSTORAGETYPE:
                table_entry->old_vacmSecurityToGroupStorageType =
                    table_entry->vacmSecurityToGroupStorageType;
                table_entry->vacmSecurityToGroupStorageType =
                    *request->requestvb->val.integer;
                break;
            }
        }
        /*
         * Check the internal consistency of an active row
         */
        for (request = requests; request; request = request->next) {
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMSECURITYTOGROUPSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_ACTIVE:
                case RS_CREATEANDGO:
                    if ( 0 ) {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_INCONSISTENTVALUE);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_UNDO:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmSecurityToGroupTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMGROUPNAME:
                memcpy(table_entry->vacmGroupName,
                       table_entry->old_vacmGroupName,
                       sizeof(table_entry->vacmGroupName));
                memset(table_entry->old_vacmGroupName, 0,
                       sizeof(table_entry->vacmGroupName));
                table_entry->vacmGroupName_len =
                    table_entry->old_vacmGroupName_len;
                break;
            case COLUMN_VACMSECURITYTOGROUPSTORAGETYPE:
                table_entry->vacmSecurityToGroupStorageType =
                    table_entry->old_vacmSecurityToGroupStorageType;
                table_entry->old_vacmSecurityToGroupStorageType = 0;
                break;
            case COLUMN_VACMSECURITYTOGROUPSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        vacmSecurityToGroupTable_removeEntry(table_data,
                                                             table_row);
                    }
                }
                break;
            }
        }
        break;

    case MODE_SET_COMMIT:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmSecurityToGroupTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMSECURITYTOGROUPSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_ACTIVE:
                    table_entry->vacmSecurityToGroupStatus = RS_ACTIVE;
                    break;

                case RS_CREATEANDWAIT:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_NOTINSERVICE:
                    table_entry->vacmSecurityToGroupStatus =
                        RS_NOTINSERVICE;
                    break;

                case RS_DESTROY:
                    vacmSecurityToGroupTable_removeEntry(table_data,
                                                         table_row);
                }
            }
        }
        break;
    }
    return SNMP_ERR_NOERROR;
}
