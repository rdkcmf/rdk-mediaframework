/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "ipNetToPhysicalTable.h"
#include "vl_ocStbHost_GetData.h"
#include "rdk_debug.h"
/** Initializes the ipNetToPhysicalTable module */
// void
// init_ipNetToPhysicalTable(void)
// {
//     /*
//      * here we initialize all the tables we're planning on supporting
//      */
//     initialize_table_ipNetToPhysicalTable();
// }

static netsnmp_tdata  *static_table_data = NULL;
static netsnmp_cache  *static_cache = NULL;

/** Initialize the ipNetToPhysicalTable table by defining its contents and how it's structured  .1.3.6.1.2.1.4.35 */
void
initialize_table_ipNetToPhysicalTable(void)
{
    static oid      ipNetToPhysicalTable_oid[] =
        { 1, 3, 6, 1, 2, 1, 4, 35 };
    size_t          ipNetToPhysicalTable_oid_len =
        OID_LENGTH(ipNetToPhysicalTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("ipNetToPhysicalTable",
                                            ipNetToPhysicalTable_handler,
                                            ipNetToPhysicalTable_oid,
                                            ipNetToPhysicalTable_oid_len,
                                            HANDLER_CAN_RONLY);

    table_data = netsnmp_tdata_create_table("ipNetToPhysicalTable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    //netsnmp_table_helper_add_indexes(table_info, ASN_INTEGER,   /* index: ipNetToPhysicalIfIndex */
    //                                 0);
    netsnmp_table_helper_add_indexes(table_info,
                                     ASN_INTEGER,   /* index: ipNetToPhysicalIfIndex */
                                     ASN_INTEGER,   /* index: ipNetToPhysicalType */
                                     ASN_OCTET_STR, /* index: ipNetToPhysicalNetAddress */
                                     0);

    table_info->min_column = COLUMN_IPNETTOPHYSICALPHYSADDRESS;
    table_info->max_column = COLUMN_IPNETTOPHYSICALROWSTATUS;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(IPNETTOPHYSICALTABLE_TIMEOUT,
                                 ipNetToPhysicalTable_load,
                                 ipNetToPhysicalTable_free,
                                 ipNetToPhysicalTable_oid,
                                 ipNetToPhysicalTable_oid_len);
        cache->magic = (void *) table_data;
         cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
 NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
 NETSNMP_CACHE_DONT_AUTO_RELEASE;

    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "ipNetToPhysicalTable");

        /*
         * Initialise the contents of the table here
         */

         if(0 == ipNetToPhysicalTable_load(cache,table_data))
    {
            //vl_ocStbHostAVInterfaceTable_getdata"
      SNMP_DEBUGPRINT(" ERROR:: Not yet table initialise here \n");
    }
    
    static_table_data = table_data;
    static_cache = cache;
}
/*
 * Example cache handling - set up table_data list from a suitable file
 */
int
ipNetToPhysicalTable_load(netsnmp_cache * cache, void *vmagic) {
    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;

    netsnmp_tdata_row *row;

    /**
     *vl_ipNetToPhysicalTable_getdata module will  Initialise the contents of the table here
     */
       SNMP_DEBUGPRINT("................Start .ipNetToPhysicalTable ............\n");
      if(0 == vl_ipNetToPhysicalTable_getdata(table_data))
    {
          SNMP_DEBUGPRINT(" ERROR:: Not yet table initialise here \n");
    }
       SNMP_DEBUGPRINT("................END .ipNetToPhysicalTable ............\n");
    return 1;

}

void
 ipNetToPhysicalTable_free(netsnmp_cache * cache, void *vmagic) {
    netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
   /* netsnmp_tdata_row *this;

    while           ((this = netsnmp_tdata_get_first_row(table))) {
        netsnmp_tdata_remove_and_delete_row(table, this);
}*/
}
/** handles requests for the ipNetToPhysicalTable table */
int
 ipNetToPhysicalTable_handler(netsnmp_mib_handler *handler,
                                 netsnmp_handler_registration *reginfo,
                                 netsnmp_agent_request_info *reqinfo,
                                 netsnmp_request_info *requests) {

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct ipNetToPhysicalTable_entry *table_entry;
    int             ret;

    vl_row = NULL;
    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request = requests; request; request = request->next) {
           // table_entry = (struct ipNetToPhysicalTable_entry *)           netsnmp_tdata_extract_entry(request);
            /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(ipNetToPhysicalTable_entry);

            switch (table_info->colnum) {
                case COLUMN_IPNETTOPHYSICALIFINDEX:
                    if (!table_entry) {
                        netsnmp_set_request_error(reqinfo, request,
                                SNMP_NOSUCHINSTANCE);
                        continue;
                    }
                    snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                               table_entry->
                                                       ipNetToPhysicalIfIndex);
                    break;
                case COLUMN_IPNETTOPHYSICALNETADDRESSTYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ipNetToPhysicalNetAddressType);
                break;
            case COLUMN_IPNETTOPHYSICALNETADDRESS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         ipNetToPhysicalNetAddress,
                                         table_entry->
                                         ipNetToPhysicalNetAddress_len);
                break;
            case COLUMN_IPNETTOPHYSICALPHYSADDRESS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         ipNetToPhysicalPhysAddress,
                                         table_entry->
                                         ipNetToPhysicalPhysAddress_len);
                break;
            case COLUMN_IPNETTOPHYSICALLASTUPDATED:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb,
                                           ASN_TIMETICKS,
                                           table_entry->
                                           ipNetToPhysicalLastUpdated);
                break;
            case COLUMN_IPNETTOPHYSICALTYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ipNetToPhysicalType);
                break;
            case COLUMN_IPNETTOPHYSICALSTATE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ipNetToPhysicalState);
                break;
            case COLUMN_IPNETTOPHYSICALROWSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ipNetToPhysicalRowStatus);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

    }

    time_t tCurrentTime = time(NULL);
    static time_t tLastUpdate = tCurrentTime;
    if((tCurrentTime-tLastUpdate) > 5)
    {
        if(NULL != static_table_data)
        {
            tLastUpdate = tCurrentTime;
            vl_ipNetToPhysicalTable_getdata(static_table_data);
        }
    }

    return SNMP_ERR_NOERROR;
}
