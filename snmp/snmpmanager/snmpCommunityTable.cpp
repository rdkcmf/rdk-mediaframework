/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "snmpCommunityTable.h"
#include "snmpAccessInclude.h"
#include "vl_ocStbHost_GetData.h"
#include "utilityMacros.h"
#include "cardManagerIf.h"
#include "vlMutex.h"
#include "Tlvevent.h"
#include "TlvConfigObjs.h"

#define vlMemCpy(pDest, pSrc, nCount, nDestCapacity)            \
            memcpy(pDest, pSrc, nCount)

static vlMutex & vlg_TlvEventDblock = TlvConfig::vlGetTlvEventDbLock();
#ifdef AUTO_LOCKING

static void auto_lock(rmf_osal_Mutex *mutex)
{

               if(!mutex) 
			   	RDK_LOG(RDK_LOG_ERROR, "LOG.RDK.POD","\n\n\n\n %s: Mutex is NULL \n\n\n", __FUNCTION__);
		 rmf_osal_mutexAcquire(*mutex);
}

static void auto_unlock(rmf_osal_Mutex *mutex)
{
         if(mutex)
		 rmf_osal_mutexRelease(*mutex);
}
#endif
/** Initializes the snmpCommunityTable module */
void
init_snmpCommunityTable(void)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    /*
     * here we initialize all the tables we're planning on supporting
     */
    initialize_table_snmpCommunityTable();
 //auto_unlock(&vlg_TlvEventDblock);
}

//# Determine the first/last column names

/** Initialize the snmpCommunityTable table by defining its contents and how it's structured */
void
initialize_table_snmpCommunityTable(void)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    static oid      snmpCommunityTable_oid[] =
        { 1, 3, 6, 1, 6, 3, 18, 1, 1 };
    size_t          snmpCommunityTable_oid_len =
        OID_LENGTH(snmpCommunityTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("snmpCommunityTable",
                                            snmpCommunityTable_handler,
                                            snmpCommunityTable_oid,
                                            snmpCommunityTable_oid_len,
                                            HANDLER_CAN_RWRITE);

    table_data = netsnmp_tdata_create_table("snmpCommunityTable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info, ASN_PRIV_IMPLIED_OCTET_STR/*ASN_OCTET_STR*/, /* index: snmpCommunityIndex */
                                     0);

    table_info->min_column = COLUMN_SNMPCOMMUNITYNAME;
    table_info->max_column = COLUMN_SNMPCOMMUNITYSTATUS;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(SNMPCOMMUNITYTABLE_TIMEOUT,
                                 snmpCommunityTable_load,
                                 snmpCommunityTable_free,
                                 snmpCommunityTable_oid,
                                 snmpCommunityTable_oid_len);
        cache->magic = (void *) table_data;
   cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
    NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
    NETSNMP_CACHE_DONT_AUTO_RELEASE;
    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "snmpCommunityTable");

        /*
         * Initialise the contents of the table here
         */

        if(0 == snmpCommunityTable_load(cache,table_data))
    {
            //snmpCommunityTable_load"
      SNMP_DEBUGPRINT(" ERROR:: snmpCommunityTable_load Not yet table initialise here \n");
    }
	//auto_unlock(&vlg_TlvEventDblock);
}

/*
 * create a new row in the table
 */
netsnmp_tdata_row *snmpCommunityTable_createEntry(netsnmp_tdata *
                                                  table_data,
                                                  char *snmpCommunityIndex,
                                                  size_t
                                                  snmpCommunityIndex_len)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    struct snmpCommunityTable_entry *entry;
    netsnmp_tdata_row *row;




              entry = SNMP_MALLOC_TYPEDEF(struct snmpCommunityTable_entry);
    if              (!entry){
			   //auto_unlock(&vlg_TlvEventDblock);
                        return NULL;
    	}

                    row = netsnmp_tdata_create_row();
    if              (!row) {
        SNMP_FREE(entry);{
	 //auto_unlock(&vlg_TlvEventDblock);
        return NULL;
        	}
    }
    row->           data = entry;
    vlMemCpy(entry->snmpCommunityIndex, snmpCommunityIndex,
           snmpCommunityIndex_len, STRLEN_CHAR_ACCESS);
    entry->snmpCommunityIndex_len = snmpCommunityIndex_len;

    netsnmp_tdata_row_add_index(row, ASN_OCTET_STR,
                                entry->snmpCommunityIndex,
                                snmpCommunityIndex_len);
    netsnmp_tdata_add_row(table_data, row);
    //auto_unlock(&vlg_TlvEventDblock);
    return row;
}

/*
 * remove a row from the table
 */
void
    snmpCommunityTable_removeEntry(netsnmp_tdata * table_data,
                                   netsnmp_tdata_row * row)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    struct snmpCommunityTable_entry *entry;

    if (!row){
	 //auto_unlock(&vlg_TlvEventDblock);
        return;                 /* Nothing to remove */
    	}
    entry = (struct snmpCommunityTable_entry *)
        netsnmp_tdata_remove_and_delete_row(table_data, row);
    if (entry)
        SNMP_FREE(entry);       /* XXX - release any other internal resources */
	//auto_unlock(&vlg_TlvEventDblock);
}

struct VlSnmpCommunityStringInfo
{
    int iConfig;
    string strPrefix;
    string strCommunity;
    bool bIsPermanent;

    VlSnmpCommunityStringInfo()
    {
        iConfig = 0;
        bIsPermanent = false;
    }
};

#if 1
vector<struct VlSnmpCommunityStringInfo> CommuntiyStringList;
// shared from snmpTargetParamsTable.cpp
extern vector<v3NotificationReceiver_t> vlg_snmp_agent_NotificationReceiverList;
#ifdef __cplusplus
extern "C" {
#endif
void snmpClearCommunityTableEvents()
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    CommuntiyStringList.clear();
    //auto_unlock(&vlg_TlvEventDblock);
}

int static iszcommunity;
void snmpV1V2CommunityTableEventhandling(int iConfig, char * strPrefix, char * strCommunity, bool bIsPermanent)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    VlSnmpCommunityStringInfo communityInfo;
    communityInfo.iConfig = iConfig;
    communityInfo.strPrefix = strPrefix;
    communityInfo.strCommunity = strCommunity;
    communityInfo.bIsPermanent = bIsPermanent;
    CommuntiyStringList.push_back(communityInfo);
    //auto_unlock(&vlg_TlvEventDblock);
     // return 1;
}
#ifdef __cplusplus
}
#endif
#endif//if 0
/*
 * Example cache handling - set up table_data list from a suitable file
 */

int snmpCommunityTable_load(netsnmp_cache * cache, void *vmagic)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *row;
    char comm[256];
    SNMP_DEBUGPRINT("\n snmpCommunityTable_load ::   :::  \n");
    bool replace_table = false;
    int count = 0;
    if(netsnmp_tdata_row_first(table_data))
    {
        replace_table = true;
    }
    SNMP_DEBUGPRINT("\n snmpCommunityTable_load :: CommuntiyStringList.size() :: %d\n", CommuntiyStringList.size());
    for(count = 0; count < CommuntiyStringList.size(); count++)
    {
        if(replace_table)
        {
            replace_table = false;
            Table_free(table_data);
        }
        SNMP_DEBUGPRINT("Community list of elements in Tlv217loopList are :: %s \n", CommuntiyStringList[count].strCommunity.c_str());
        snmpCommunityTable_createEntry_allData(table_data, CommuntiyStringList[count]);
    }
    if(vlg_snmp_agent_NotificationReceiverList.size() > 0)
    {
        if(replace_table)
        {
            replace_table = false;
            Table_free(table_data);
        }

        snmpCommunityTable_createEntry_allData(table_data, vlg_snmp_agent_NotificationReceiverList[0], 0);
    }
    //SNMP_DEBUGPRINT("\n snmpCommunityTable_load :: snmpCommunityTable_load   ::: iSz %d\n",isz);
    if((CommuntiyStringList.size() == 0) && (0 == vlg_snmp_agent_NotificationReceiverList.size()))
    {
        Table_free(table_data);
        VlSnmpCommunityStringInfo communityInfo;
        communityInfo.strPrefix = "none";
        communityInfo.strCommunity = "empty";
        snmpCommunityTable_createEntry_allData(table_data, communityInfo);
    }
    SNMP_DEBUGPRINT("\n snmpCommunityTable_load :: End snmpCommunityTable_load   :::  \n");
    //auto_unlock(&vlg_TlvEventDblock);
    return 1;
}

int snmpCommunityTable_createEntry_allData(netsnmp_tdata * table_data, struct VlSnmpCommunityStringInfo & communityInfo)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    SNMP_DEBUGPRINT("\n snmpCommunityTable_createEntry_allData ::Start \n");
    char communtiyindex[STRLEN_CHAR_ACCESS];
    char CommunitySecurityName[STRLEN_CHAR_ACCESS];
    char CommunityTransportTag[STRLEN_CHAR_ACCESS];
    struct snmpCommunityTable_entry *entry;
    netsnmp_tdata_row *row;
    entry = SNMP_MALLOC_TYPEDEF(struct snmpCommunityTable_entry);
    if (!entry) {
	 //auto_unlock(&vlg_TlvEventDblock);
        return 0;
     } 
    row = netsnmp_tdata_create_row();
    if (!row) {
        SNMP_FREE(entry);
	 //auto_unlock(&vlg_TlvEventDblock);
        return 0;
    }
    row->data = entry;
    /*
    * Index values
    */

   // entry->snmpCommunityIndex[MAC_CHAR_ACCESS]; //@STBconfig_n
    snprintf(communtiyindex, sizeof(communtiyindex), "%sconfig_%d", communityInfo.strPrefix.c_str(), communityInfo.iConfig);
    snprintf(CommunitySecurityName, sizeof(CommunitySecurityName), "%sconfig_%d", communityInfo.strPrefix.c_str(), communityInfo.iConfig);//"@STBconfig_n" same as index
    snprintf(CommunityTransportTag, sizeof(CommunityTransportTag), "%sconfigTag_%d", communityInfo.strPrefix.c_str(), communityInfo.iConfig);
    /*
    * Column values
    */
    entry->snmpCommunityIndex_len = strlen(communtiyindex);
    memcpy(entry->snmpCommunityIndex, communtiyindex, entry->snmpCommunityIndex_len);

   // SNMP_DEBUGPRINT("\n snmpCommunity Index string ------------ %s\n",entry->snmpCommunityIndex);
    entry->snmpCommunityName_len = strlen(communityInfo.strCommunity.c_str());
    memcpy(entry->snmpCommunityName, (char*)communityInfo.strCommunity.c_str(), entry->snmpCommunityName_len);  //CommunityName public
    //SNMP_DEBUGPRINT("\n Communitysting %s --------- entry->snmpCommunityName- %s \n",Communitysting, entry->snmpCommunityName );
    entry->snmpCommunitySecurityName_len = strlen(CommunitySecurityName);
    memcpy(entry->snmpCommunitySecurityName, CommunitySecurityName, entry->snmpCommunitySecurityName_len);
    //"@STBconfig_n" same as index

    //SNMP_DEBUGPRINT("\n CommunitySecurityName %s --------- entry->snmpCommunitySecurityName- %s \n",CommunitySecurityName  , entry->snmpCommunitySecurityName);
    //entry->old_snmpCommunitySecurityName[MAC_CHAR_ACCESS]; //the Engine ID of the OCHD2.1 associated SNMP Entity                                                           Storage     Status

    memcpy(entry->snmpCommunityContextEngineID, "",strlen(""));
    //SNMP_DEBUGPRINT("\n entry->snmpCommunityContextEngineID- %s \n", entry->snmpCommunityContextEngineID);

    entry->snmpCommunityContextEngineID_len = strlen(entry->snmpCommunityContextEngineID);
    //SNMP_DEBUGPRINT("\n entry->snmpCommunityContextEngineID %s \n", entry->snmpCommunityContextEngineID);
    memcpy(entry->snmpCommunityContextName, "",strlen("")); //"empty string"
    entry->snmpCommunityContextName_len = strlen(entry->snmpCommunityContextName);

      //SNMP_DEBUGPRINT("\n entry->snmpCommunityContextName %s \n", entry->snmpCommunityContextName);

    memcpy(entry->snmpCommunityTransportTag,CommunityTransportTag, strlen(CommunityTransportTag));
    entry->snmpCommunityTransportTag_len = strlen(entry->snmpCommunityTransportTag);

    //SNMP_DEBUGPRINT("\n entry->snmpCommunityTransportTag %s \n", entry->snmpCommunityTransportTag);
    if(communityInfo.bIsPermanent)
    {
        entry->snmpCommunityStorageType = 4;      //permanent(2)
    }
    else
    {
        entry->snmpCommunityStorageType = 2;      //volatile(2)
    }
        //SNMP_DEBUGPRINT("\n entry->snmpCommunityStorageType %d \n", entry->snmpCommunityStorageType);
    entry->snmpCommunityStatus = 1;
          //  SNMP_DEBUGPRINT("\n entry->snmpCommunityStatus %d \n", entry->snmpCommunityStatus);
    //     netsnmp_tdata_row_add_index(row, ASN_UNSIGNED,
    //          (count+1),
    //          sizeof(count+1));
    // SNMP_DEBUGPRINT("\n snmpCommunity Index string ------------ %s\n",entry->snmpCommunityIndex);
    netsnmp_tdata_row_add_index(row, ASN_PRIV_IMPLIED_OCTET_STR, // was ASN_OCTET_STR,
                                entry->snmpCommunityIndex,
                                entry->snmpCommunityIndex_len);

    //SNMP_DEBUGPRINT("\n snmpCommunity Index string ------------ %s\n",entry->snmpCommunityIndex);
    netsnmp_tdata_add_row(table_data, row);
    //SNMP_DEBUGPRINT("\n snmpCommunityTable_createEntry_allData ::END \n");
    //auto_unlock(&vlg_TlvEventDblock);
    return 1;

}



int snmpCommunityTable_createEntry_allData(netsnmp_tdata * table_data, struct v3NotificationReceiver_t & rReceiver, int count)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    SNMP_DEBUGPRINT("\n snmpCommunityTable_createEntry_allData ::Start \n");
    char communtiyindex[STRLEN_CHAR_ACCESS];
    char CommuntiyName[STRLEN_CHAR_ACCESS];
    char CommunitySecurityName[STRLEN_CHAR_ACCESS];
    char CommunityTransportTag[STRLEN_CHAR_ACCESS];
    struct snmpCommunityTable_entry *entry;
    netsnmp_tdata_row *row;
    entry = SNMP_MALLOC_TYPEDEF(struct snmpCommunityTable_entry);
    if (!entry) {
	 //auto_unlock(&vlg_TlvEventDblock);
        return 0;
    }
    row = netsnmp_tdata_create_row();
    if (!row) {
        SNMP_FREE(entry);
	 //auto_unlock(&vlg_TlvEventDblock);
        return 0;
    }
    row->data = entry;
    /*
    * Index values
    */

   // entry->snmpCommunityIndex[MAC_CHAR_ACCESS]; //@STBconfig_n
    snprintf(communtiyindex, sizeof(communtiyindex), "@STBnotifyconfig");
    snprintf(CommunitySecurityName, sizeof(CommunitySecurityName), "@STBnotifyconfig");//"@STBconfig_n" same as index
    snprintf(CommunityTransportTag, sizeof(CommunityTransportTag), "");
    snprintf(CommuntiyName, sizeof(CommuntiyName), "public");
    /*
    * Column values
    */
    entry->snmpCommunityIndex_len = strlen(communtiyindex);
    memcpy(entry->snmpCommunityIndex, communtiyindex, entry->snmpCommunityIndex_len);

   // SNMP_DEBUGPRINT("\n snmpCommunity Index string ------------ %s\n",entry->snmpCommunityIndex);
    entry->snmpCommunityName_len = strlen(CommuntiyName);
    memcpy(entry->snmpCommunityName, (char*)CommuntiyName, entry->snmpCommunityName_len);  //CommunityName public
    //SNMP_DEBUGPRINT("\n Communitysting %s --------- entry->snmpCommunityName- %s \n",Communitysting, entry->snmpCommunityName );
    entry->snmpCommunitySecurityName_len = strlen(CommunitySecurityName);
    memcpy(entry->snmpCommunitySecurityName, CommunitySecurityName, entry->snmpCommunitySecurityName_len);
    //"@STBconfig_n" same as index

    //SNMP_DEBUGPRINT("\n CommunitySecurityName %s --------- entry->snmpCommunitySecurityName- %s \n",CommunitySecurityName  , entry->snmpCommunitySecurityName);
    //entry->old_snmpCommunitySecurityName[MAC_CHAR_ACCESS]; //the Engine ID of the OCHD2.1 associated SNMP Entity                                                           Storage     Status

    memcpy(entry->snmpCommunityContextEngineID, "",strlen(""));
    //SNMP_DEBUGPRINT("\n entry->snmpCommunityContextEngineID- %s \n", entry->snmpCommunityContextEngineID);

    entry->snmpCommunityContextEngineID_len = strlen(entry->snmpCommunityContextEngineID);
    //SNMP_DEBUGPRINT("\n entry->snmpCommunityContextEngineID %s \n", entry->snmpCommunityContextEngineID);
    memcpy(entry->snmpCommunityContextName, "",strlen("")); //"empty string"
    entry->snmpCommunityContextName_len = strlen(entry->snmpCommunityContextName);

      //SNMP_DEBUGPRINT("\n entry->snmpCommunityContextName %s \n", entry->snmpCommunityContextName);

    memcpy(entry->snmpCommunityTransportTag,CommunityTransportTag, strlen(CommunityTransportTag));
    entry->snmpCommunityTransportTag_len = strlen(entry->snmpCommunityTransportTag);

    //SNMP_DEBUGPRINT("\n entry->snmpCommunityTransportTag %s \n", entry->snmpCommunityTransportTag);
    entry->snmpCommunityStorageType =  2;          //volatile(2)
        //SNMP_DEBUGPRINT("\n entry->snmpCommunityStorageType %d \n", entry->snmpCommunityStorageType);
    entry->snmpCommunityStatus = 1;
          //  SNMP_DEBUGPRINT("\n entry->snmpCommunityStatus %d \n", entry->snmpCommunityStatus);
    //     netsnmp_tdata_row_add_index(row, ASN_UNSIGNED,
    //          (count+1),
    //          sizeof(count+1));
    // SNMP_DEBUGPRINT("\n snmpCommunity Index string ------------ %s\n",entry->snmpCommunityIndex);
    netsnmp_tdata_row_add_index(row, ASN_PRIV_IMPLIED_OCTET_STR, // was ASN_OCTET_STR,
                                entry->snmpCommunityIndex,
                                entry->snmpCommunityIndex_len);

    //SNMP_DEBUGPRINT("\n snmpCommunity Index string ------------ %s\n",entry->snmpCommunityIndex);
    netsnmp_tdata_add_row(table_data, row);
    //SNMP_DEBUGPRINT("\n snmpCommunityTable_createEntry_allData ::END \n");
    //auto_unlock(&vlg_TlvEventDblock);
    return 1;

}


void
    snmpCommunityTable_free(netsnmp_cache * cache, void *vmagic)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
    /*netsnmp_tdata_row *this;

    while           ((this = netsnmp_tdata_get_first_row(table))) {
        netsnmp_tdata_remove_and_delete_row(table, this);
}*/
    //auto_unlock(&vlg_TlvEventDblock);
}
/** handles requests for the snmpCommunityTable table */
int
 snmpCommunityTable_handler(netsnmp_mib_handler *handler,
                               netsnmp_handler_registration *reginfo,
                               netsnmp_agent_request_info *reqinfo,
                               netsnmp_request_info *requests)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct snmpCommunityTable_entry *table_entry;
    int             ret;
    vl_row = NULL;

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request = requests; request; request = request->next) {
            /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(snmpCommunityTable_entry);

            switch (table_info->colnum) {
            case COLUMN_SNMPCOMMUNITYNAME:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         snmpCommunityName,
                                         table_entry->
                                         snmpCommunityName_len);
                break;
            case COLUMN_SNMPCOMMUNITYSECURITYNAME:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         snmpCommunitySecurityName,
                                         table_entry->
                                         snmpCommunitySecurityName_len);
                break;
            case COLUMN_SNMPCOMMUNITYCONTEXTENGINEID:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         snmpCommunityContextEngineID,
                                         table_entry->
                                         snmpCommunityContextEngineID_len);
                break;
            case COLUMN_SNMPCOMMUNITYCONTEXTNAME:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         snmpCommunityContextName,
                                         table_entry->
                                         snmpCommunityContextName_len);
                break;
            case COLUMN_SNMPCOMMUNITYTRANSPORTTAG:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         snmpCommunityTransportTag,
                                         table_entry->
                                         snmpCommunityTransportTag_len);
                break;
            case COLUMN_SNMPCOMMUNITYSTORAGETYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           snmpCommunityStorageType);
                break;
            case COLUMN_SNMPCOMMUNITYSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           snmpCommunityStatus);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpCommunityTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPCOMMUNITYNAME:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              snmpCommunityName));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPCOMMUNITYSECURITYNAME:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              snmpCommunitySecurityName));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPCOMMUNITYCONTEXTENGINEID:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              snmpCommunityContextEngineID));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPCOMMUNITYCONTEXTNAME:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              snmpCommunityContextName));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPCOMMUNITYTRANSPORTTAG:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              snmpCommunityTransportTag));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPCOMMUNITYSTORAGETYPE:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPCOMMUNITYSTATUS:
                ret = netsnmp_check_vb_rowstatus(request->requestvb,
                                                 (table_entry ? RS_ACTIVE :
                                                  RS_NONEXISTENT));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
		      //auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_ERR_NOTWRITABLE);
		  //auto_unlock(&vlg_TlvEventDblock);
                return SNMP_ERR_NOERROR;
            }
        }
        break;

    case MODE_SET_RESERVE2:
        for (request = requests; request; request = request->next) {
            netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPCOMMUNITYSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    table_row =
                        snmpCommunityTable_createEntry(table_data,(char*)
                                                       table_info->
                                                       indexes->val.string,
                                                       table_info->
                                                       indexes->val_len);
                    if (table_row) {
                        netsnmp_insert_tdata_row(request, table_row);
                    } else {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_RESOURCEUNAVAILABLE);
			   //auto_unlock(&vlg_TlvEventDblock);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_FREE:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpCommunityTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPCOMMUNITYSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        snmpCommunityTable_removeEntry(table_data,
                                                       table_row);
                    }
                }
            }
        }
        break;

    case MODE_SET_ACTION:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpCommunityTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPCOMMUNITYNAME:
                memcpy(table_entry->old_snmpCommunityName,
                       table_entry->snmpCommunityName,
                       sizeof(table_entry->snmpCommunityName));
                table_entry->old_snmpCommunityName_len =
                    table_entry->snmpCommunityName_len;
                memset(table_entry->snmpCommunityName, 0,
                       sizeof(table_entry->snmpCommunityName));
                memcpy(table_entry->snmpCommunityName,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->snmpCommunityName_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_SNMPCOMMUNITYSECURITYNAME:
                memcpy(table_entry->old_snmpCommunitySecurityName,
                       table_entry->snmpCommunitySecurityName,
                       sizeof(table_entry->snmpCommunitySecurityName));
                table_entry->old_snmpCommunitySecurityName_len =
                    table_entry->snmpCommunitySecurityName_len;
                memset(table_entry->snmpCommunitySecurityName, 0,
                       sizeof(table_entry->snmpCommunitySecurityName));
                memcpy(table_entry->snmpCommunitySecurityName,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->snmpCommunitySecurityName_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_SNMPCOMMUNITYCONTEXTENGINEID:
                memcpy(table_entry->old_snmpCommunityContextEngineID,
                       table_entry->snmpCommunityContextEngineID,
                       sizeof(table_entry->snmpCommunityContextEngineID));
                table_entry->old_snmpCommunityContextEngineID_len =
                    table_entry->snmpCommunityContextEngineID_len;
                memset(table_entry->snmpCommunityContextEngineID, 0,
                       sizeof(table_entry->snmpCommunityContextEngineID));
                memcpy(table_entry->snmpCommunityContextEngineID,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->snmpCommunityContextEngineID_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_SNMPCOMMUNITYCONTEXTNAME:
                memcpy(table_entry->old_snmpCommunityContextName,
                       table_entry->snmpCommunityContextName,
                       sizeof(table_entry->snmpCommunityContextName));
                table_entry->old_snmpCommunityContextName_len =
                    table_entry->snmpCommunityContextName_len;
                memset(table_entry->snmpCommunityContextName, 0,
                       sizeof(table_entry->snmpCommunityContextName));
                memcpy(table_entry->snmpCommunityContextName,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->snmpCommunityContextName_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_SNMPCOMMUNITYTRANSPORTTAG:
                memcpy(table_entry->old_snmpCommunityTransportTag,
                       table_entry->snmpCommunityTransportTag,
                       sizeof(table_entry->snmpCommunityTransportTag));
                table_entry->old_snmpCommunityTransportTag_len =
                    table_entry->snmpCommunityTransportTag_len;
                memset(table_entry->snmpCommunityTransportTag, 0,
                       sizeof(table_entry->snmpCommunityTransportTag));
                memcpy(table_entry->snmpCommunityTransportTag,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->snmpCommunityTransportTag_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_SNMPCOMMUNITYSTORAGETYPE:
                table_entry->old_snmpCommunityStorageType =
                    table_entry->snmpCommunityStorageType;
                table_entry->snmpCommunityStorageType =
                    *request->requestvb->val.integer;
                break;
            }
        }
        /*
         * Check the internal consistency of an active row
         */
        for (request = requests; request; request = request->next) {
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPCOMMUNITYSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_ACTIVE:
                case RS_CREATEANDGO:
                    if ( 0 ) {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_INCONSISTENTVALUE);
			   //auto_unlock(&vlg_TlvEventDblock);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_UNDO:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpCommunityTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPCOMMUNITYNAME:
                memcpy(table_entry->snmpCommunityName,
                       table_entry->old_snmpCommunityName,
                       sizeof(table_entry->snmpCommunityName));
                memset(table_entry->old_snmpCommunityName, 0,
                       sizeof(table_entry->snmpCommunityName));
                table_entry->snmpCommunityName_len =
                    table_entry->old_snmpCommunityName_len;
                break;
            case COLUMN_SNMPCOMMUNITYSECURITYNAME:
                memcpy(table_entry->snmpCommunitySecurityName,
                       table_entry->old_snmpCommunitySecurityName,
                       sizeof(table_entry->snmpCommunitySecurityName));
                memset(table_entry->old_snmpCommunitySecurityName, 0,
                       sizeof(table_entry->snmpCommunitySecurityName));
                table_entry->snmpCommunitySecurityName_len =
                    table_entry->old_snmpCommunitySecurityName_len;
                break;
            case COLUMN_SNMPCOMMUNITYCONTEXTENGINEID:
                memcpy(table_entry->snmpCommunityContextEngineID,
                       table_entry->old_snmpCommunityContextEngineID,
                       sizeof(table_entry->snmpCommunityContextEngineID));
                memset(table_entry->old_snmpCommunityContextEngineID, 0,
                       sizeof(table_entry->snmpCommunityContextEngineID));
                table_entry->snmpCommunityContextEngineID_len =
                    table_entry->old_snmpCommunityContextEngineID_len;
                break;
            case COLUMN_SNMPCOMMUNITYCONTEXTNAME:
                memcpy(table_entry->snmpCommunityContextName,
                       table_entry->old_snmpCommunityContextName,
                       sizeof(table_entry->snmpCommunityContextName));
                memset(table_entry->old_snmpCommunityContextName, 0,
                       sizeof(table_entry->snmpCommunityContextName));
                table_entry->snmpCommunityContextName_len =
                    table_entry->old_snmpCommunityContextName_len;
                break;
            case COLUMN_SNMPCOMMUNITYTRANSPORTTAG:
                memcpy(table_entry->snmpCommunityTransportTag,
                       table_entry->old_snmpCommunityTransportTag,
                       sizeof(table_entry->snmpCommunityTransportTag));
                memset(table_entry->old_snmpCommunityTransportTag, 0,
                       sizeof(table_entry->snmpCommunityTransportTag));
                table_entry->snmpCommunityTransportTag_len =
                    table_entry->old_snmpCommunityTransportTag_len;
                break;
            case COLUMN_SNMPCOMMUNITYSTORAGETYPE:
                table_entry->snmpCommunityStorageType =
                    table_entry->old_snmpCommunityStorageType;
                table_entry->old_snmpCommunityStorageType = 0;
                break;
            case COLUMN_SNMPCOMMUNITYSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        snmpCommunityTable_removeEntry(table_data,
                                                       table_row);
                    }
                }
                break;
            }
        }
        break;

    case MODE_SET_COMMIT:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpCommunityTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPCOMMUNITYSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_ACTIVE:
                    table_entry->snmpCommunityStatus = RS_ACTIVE;
                    break;

                case RS_CREATEANDWAIT:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_NOTINSERVICE:
                    table_entry->snmpCommunityStatus = RS_NOTINSERVICE;
                    break;

                case RS_DESTROY:
                    snmpCommunityTable_removeEntry(table_data, table_row);
                }
            }
        }
        break;
    }
	//auto_unlock(&vlg_TlvEventDblock);
    return SNMP_ERR_NOERROR;
}
