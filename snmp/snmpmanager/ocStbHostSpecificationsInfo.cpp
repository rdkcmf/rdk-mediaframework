/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.scalar.conf 11805 2005-01-07 09:37:18Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "rdk_debug.h"
#include "ocStbHostSpecificationsInfo.h"

/** Initializes the ocStbHostSpecificationsInfo module */
void
init_ocStbHostSpecificationsInfo(void)
{
    static oid      ocStbHostCfrSpecificationIssue_oid[] =
        { 1, 3, 6, 1, 4, 1, 4491, 2, 3, 1, 1, 4, 5, 5, 1 };
    static oid      ocStbHostMibSpecificationIssue_oid[] =
        { 1, 3, 6, 1, 4, 1, 4491, 2, 3, 1, 1, 4, 5, 5, 2 };

    DEBUGMSGTL(("ocStbHostSpecificationsInfo", "Initializing\n"));

    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("ocStbHostCfrSpecificationIssue",
                             handle_ocStbHostCfrSpecificationIssue,
                             ocStbHostCfrSpecificationIssue_oid,
                             OID_LENGTH
                             (ocStbHostCfrSpecificationIssue_oid),
                             HANDLER_CAN_RONLY));
    netsnmp_register_scalar(netsnmp_create_handler_registration
                            ("ocStbHostMibSpecificationIssue",
                             handle_ocStbHostMibSpecificationIssue,
                             ocStbHostMibSpecificationIssue_oid,
                             OID_LENGTH
                             (ocStbHostMibSpecificationIssue_oid),
                             HANDLER_CAN_RONLY));
}
static char g_CfrSpecificationIssue[255]="OC-SP-HOST2.1-CFR-I11-100507";
static char g_MibSpecificationIssue[255]="OC-SP-MIB-HOST2.X-I14-120531";
int
handle_ocStbHostCfrSpecificationIssue(netsnmp_mib_handler *handler,
                                      netsnmp_handler_registration
                                      *reginfo,
                                      netsnmp_agent_request_info *reqinfo,
                                      netsnmp_request_info *requests)
{
    /*
     * We are never called for a GETNEXT if it's registered as a
     * "instance", as it's "magically" handled for us.
     */

    /*
     * a instance handler also only hands us one request at a time, so
     * we don't need to loop over a list of requests; we'll only get one.
     */

    switch (reqinfo->mode) {

    case MODE_GET:
        RDK_LOG(RDK_LOG_DEBUG, "LOG.RDK.SNMP", "\n Enter into the OC-SP-HOST2.1-CFR-I07-090206 :: display %s \n lenght is %d",g_CfrSpecificationIssue,strlen(g_CfrSpecificationIssue));
        snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
                                 (u_char *)
                                         g_CfrSpecificationIssue
                                 ,
                                 strlen(g_CfrSpecificationIssue));
        break;


    default:
        /*
         * we should never get here, so this is a really bad error
         */
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_ocStbHostCfrSpecificationIssue\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_ocStbHostMibSpecificationIssue(netsnmp_mib_handler *handler,
                                      netsnmp_handler_registration
                                      *reginfo,
                                      netsnmp_agent_request_info *reqinfo,
                                      netsnmp_request_info *requests)
{
    /*
     * We are never called for a GETNEXT if it's registered as a
     * "instance", as it's "magically" handled for us.
     */

    /*
     * a instance handler also only hands us one request at a time, so
     * we don't need to loop over a list of requests; we'll only get one.
     */

    switch (reqinfo->mode) {

    case MODE_GET:
        RDK_LOG(RDK_LOG_DEBUG, "LOG.RDK.SNMP", "\n Enter into the OC-SP-MIB-HOST2.X-I06-090206 :: display %s \n lenght is %d",g_MibSpecificationIssue,strlen(g_MibSpecificationIssue));
        snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
                                 (u_char *)                                         g_MibSpecificationIssue
                                 ,
                                 strlen(g_MibSpecificationIssue));
        break;

    default:
        /*
         * we should never get here, so this is a really bad error
         */
        snmp_log(LOG_ERR,
                 "unknown mode (%d) in handle_ocStbHostMibSpecificationIssue\n",
                 reqinfo->mode);
        return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}
