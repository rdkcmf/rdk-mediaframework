/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "vacmAccessTable.h"
#include "snmpAccessInclude.h"
#include "vl_ocStbHost_GetData.h"
//#include "vlMemCpy.h"
#include "utilityMacros.h"
#include "SnmpIORM.h"

#define vlMemCpy(pDest, pSrc, nCount, nDestCapacity)            \
            memcpy(pDest, pSrc, nCount)

/** Initializes the vacmAccessTable module */
void
init_vacmAccessTable(void)
{
    /*
     * here we initialize all the tables we're planning on supporting
     */

    initialize_table_vacmAccessTable();

}

//# Determine the first/last column names

/** Initialize the vacmAccessTable table by defining its contents and how it's structured */
void
initialize_table_vacmAccessTable(void)
{
    static oid      vacmAccessTable_oid[] = { 1, 3, 6, 1, 6, 3, 16, 1, 4 };
    size_t          vacmAccessTable_oid_len =
        OID_LENGTH(vacmAccessTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("vacmAccessTable",
                                            vacmAccessTable_handler,
                                            vacmAccessTable_oid,
                                            vacmAccessTable_oid_len,
                                            HANDLER_CAN_RWRITE);

    table_data = netsnmp_tdata_create_table("vacmAccessTable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info, ASN_PRIV_IMPLIED_OCTET_STR /*ASN_OCTET_STR*/, /* index: vacmGroupName */
                                    ASN_PRIV_IMPLIED_OCTET_STR /*ASN_OCTET_STR*/,     /* index: vacmAccessContextPrefix */
                                     ASN_INTEGER,       /* index: vacmAccessSecurityModel */
                                     ASN_INTEGER,       /* index: vacmAccessSecurityLevel */
                                     0);

    table_info->min_column = COLUMN_VACMACCESSCONTEXTMATCH;
    table_info->max_column = COLUMN_VACMACCESSSTATUS;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(VACMACCESSTABLE_TIMEOUT,
                                 vacmAccessTable_load,
                                 vacmAccessTable_free, vacmAccessTable_oid,
                                 vacmAccessTable_oid_len);
    cache->magic = (void *) table_data;
    cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
    NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
    NETSNMP_CACHE_DONT_AUTO_RELEASE;

    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "vacmAccessTable");

        /*
         * Initialise the contents of the table here
         */

        if(0 == vacmAccessTable_load(cache,table_data))
    {
            //snmpCommunityTable_load"
      SNMP_DEBUGPRINT(" ERROR:: vacmAccessTable_load Not yet table initialise here \n");
    }
}

/*
 * create a new row in the table
 */
netsnmp_tdata_row *vacmAccessTable_createEntry(netsnmp_tdata * table_data,
                                               char *vacmGroupName,
                                               size_t vacmGroupName_len,
                                               char
                                               *vacmAccessContextPrefix,
                                               size_t
                                               vacmAccessContextPrefix_len,
                                               long
                                               vacmAccessSecurityModel,
                                               long
                                               vacmAccessSecurityLevel) {
    struct vacmAccessTable_entry *entry;
    netsnmp_tdata_row *row;



                entry = SNMP_MALLOC_TYPEDEF(struct vacmAccessTable_entry);
    if              (!entry)
                        return NULL;

                    row = netsnmp_tdata_create_row();
    if              (!row) {
        SNMP_FREE(entry);
        return NULL;
    }
    row->           data = entry;
    memcpy(entry->vacmGroupName, vacmGroupName, vacmGroupName_len);
    entry->vacmGroupName_len = vacmGroupName_len;
    netsnmp_tdata_row_add_index(row, ASN_OCTET_STR,
                                entry->vacmGroupName, vacmGroupName_len);
    memcpy(entry->vacmAccessContextPrefix, vacmAccessContextPrefix,
           vacmAccessContextPrefix_len);
    entry->vacmAccessContextPrefix_len = vacmAccessContextPrefix_len;
    netsnmp_tdata_row_add_index(row, ASN_OCTET_STR,
                                entry->vacmAccessContextPrefix,
                                vacmAccessContextPrefix_len);
    entry->vacmAccessSecurityModel = vacmAccessSecurityModel;
    netsnmp_tdata_row_add_index(row, ASN_INTEGER,
                                &(entry->vacmAccessSecurityModel),
                                sizeof(entry->vacmAccessSecurityModel));
    entry->vacmAccessSecurityLevel = vacmAccessSecurityLevel;
    netsnmp_tdata_row_add_index(row, ASN_INTEGER,
                                &(entry->vacmAccessSecurityLevel),
                                sizeof(entry->vacmAccessSecurityLevel));
    netsnmp_tdata_add_row(table_data, row);
    return row;
}

/*
 * remove a row from the table
 */
void
    vacmAccessTable_removeEntry(netsnmp_tdata * table_data,
                                netsnmp_tdata_row * row) {
    struct vacmAccessTable_entry *entry;

    if (!row)
        return;                 /* Nothing to remove */
    entry = (struct vacmAccessTable_entry *)
        netsnmp_tdata_remove_and_delete_row(table_data, row);
    if (entry)
        SNMP_FREE(entry);       /* XXX - release any other internal resources */
}

#define MAX_ROW_INDEX_VIEW 20
//static int TlvClist = 2;
static int accessviewtype[MAX_ROW_INDEX_VIEW];// = { 1, 2};
char accviewname[MAX_ROW_INDEX_VIEW][STRLEN_CHAR_ACCESS];//={"wholemib", "allwholemib"};

//here we will get follwoing vaues from tlv :: numberoftlv-list (n times 53 obj) each interface contains v1 and v2 access
// and accview name 53.4 (name of the access) , accview type 53.3 (1 or 2 or null)
#ifdef __cplusplus
extern "C" {
#endif

int static iszviwetp;
int static inamesz;
void vacmAccessTYPETableEventhandling( char * accessviewtypeValue /*53.4 or 54.1*/ )
{

        int Szlistdosevent;
       SNMP_DEBUGPRINT("\n snmpV1V2CommunityTableEventhandling :: End snmpV1V2CommunityTableEventhandling   :::  %s\n", accessviewtypeValue);
       // memcpy(Communitysting+isz,tlvparseCm , strlen(tlvparseCm));
        //TlvClist = tlvconfNlist; //kept for reference isz gives the count for number of 53 tages process in a tlvconfigfile
        accessviewtype[iszviwetp] = int(accessviewtypeValue);
        iszviwetp++;
        Szlistdosevent = iszviwetp;
            if(iszviwetp >= MAX_ROW_INDEX_VIEW) //it supports max row 20's
       {
           iszviwetp = 0;
           Szlistdosevent = 0;
       }
        SNMP_DEBUGPRINT("\n snmpV1V2CommunityTableEventhandling :: End snmpV1V2CommunityTableEventhandling   ::: iSz %d\n", Szlistdosevent);

      // return 1;
}

void vacmAccessNAMETableEventhandling(char *accviewname_value/*53.4 or 54.1*/ )
{

        int Szlistdosevent;
       SNMP_DEBUGPRINT("\n snmpV1V2CommunityTableEventhandling :: End snmpV1V2CommunityTableEventhandling   :::  %s\n",accviewname_value);
       // memcpy(Communitysting+isz,tlvparseCm , strlen(tlvparseCm));
       // TlvClist = tlvconfNlist; //kept for reference isz gives the count for number of 53 tages process in a tlvconfigfile
       vlMemCpy(accviewname+inamesz, accviewname_value , strlen(accviewname_value), STRLEN_CHAR_ACCESS);
        inamesz++;
        Szlistdosevent = inamesz;
        SNMP_DEBUGPRINT("\n snmpV1V2CommunityTableEventhandling :: End snmpV1V2CommunityTableEventhandling   ::: iSz %d\n", Szlistdosevent);

      // return 1;
}
#ifdef __cplusplus
}
#endif

/*
 * Example cache handling - set up table_data list from a suitable file
 */
int
   vacmAccessTable_load(netsnmp_cache * cache, void *vmagic) {
    int accessviewtype_default;
    char accviewname_default[256];
    int secmodel_default;
    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *row;
    char comm[256];
    //isz = TlvClist;
    SNMP_DEBUGPRINT("\n ::::     vacmAccessTable_load   Start:::  \n");
    bool replace_table = false;
    int count = 0;
    int v1v2;
    if(netsnmp_tdata_row_first(table_data))
    {
        replace_table = true;
    }
     SNMP_DEBUGPRINT("\n  :::::::::   vacmAccessTable_load::: iszviwetp %d\n",iszviwetp);

     //memcpy(comm,Communitysting[count],sizeof(Communitysting[count]));
    for(count = 0; count < iszviwetp; count++) //isz is represents the Tlvconfigproces list
    {
               if(replace_table)
               {
                    replace_table = false;
                    Table_free(table_data);
               }
          //each v1v2 co-exitscommuntiyv1v2 entites in the tlv217 should process v1=1 and v2=2
        for( v1v2 = 1; v1v2 <= 2; v1v2++)
        {
              vacmAccessTable_createEntry_allData(table_data, accessviewtype[count],  accviewname[count], v1v2, count);

        }

    }
    if(iszviwetp == 0)
    {
       Table_free(table_data);
         accessviewtype_default = 1;
        vlMemCpy(accviewname_default, "",strlen(""), STRLEN_CHAR_ACCESS);
        secmodel_default = 2;
        vacmAccessTable_createEntry_allData(table_data, accessviewtype_default, accviewname_default,secmodel_default, count);

    }

     SNMP_DEBUGPRINT("\n vacmAccessTable_createEntry_allData :: End  :::  \n");
    return 1;
}
int vacmAccessTable_createEntry_allData(netsnmp_tdata *table_data, int accessviewtype, char*  accviewname,int secmodel,int count)
{
     SNMP_DEBUGPRINT("\n vacmAccessTable_createEntry_allData ::Start \n");
    // char accesviewonly[STRLEN_CHAR_ACCESS];
     //char fullaccess[STRLEN_CHAR_ACCESS];
     char GroupName[STRLEN_CHAR_ACCESS] = {0};

      //snprintf(readonly, sizeof(readonly), "accessviewtype");//?@STBconfigV1_0?

    struct vacmAccessTable_entry *entry;
    netsnmp_tdata_row *row;
    entry = SNMP_MALLOC_TYPEDEF(struct vacmAccessTable_entry);
    if (!entry)
    return 0;

    row = netsnmp_tdata_create_row();
    if (!row) {
    SNMP_FREE(entry);
    return 0;
    }
    row->data = entry;

     entry->vacmGroupName_len = strlen(GroupName);
     vlMemCpy(entry->vacmGroupName, GroupName, entry->vacmGroupName_len, STRLEN_CHAR_ACCESS);
     entry->vacmAccessContextPrefix_len = 0;//sizeof should be change depanding on OID given by the Vendor
     memset(entry->vacmAccessContextPrefix, 0, entry->vacmAccessContextPrefix_len);
     entry->vacmAccessSecurityModel = secmodel;
     entry->vacmAccessSecurityLevel = VACMACCESSSECURITYLEVEL_NOAUTHNOPRIV;
    /*
     * Column values
     */
    entry->vacmAccessContextMatch = VACMACCESSCONTEXTMATCH_EXACT;
    if(accessviewtype ==  1 || accessviewtype ==  2)
    {
            entry->vacmAccessReadViewName_len = strlen(accviewname);
          vlMemCpy(entry->vacmAccessReadViewName, accviewname, entry->vacmAccessReadViewName_len, STRLEN_CHAR_ACCESS);

    }
    if( accessviewtype ==  2)
    {
          entry->vacmAccessWriteViewName_len = strlen(accviewname);
        vlMemCpy(entry->vacmAccessWriteViewName , accviewname, entry->vacmAccessWriteViewName_len, STRLEN_CHAR_ACCESS);
    }
    entry->vacmAccessNotifyViewName_len = 0;//zero ocate lenght
    memset(entry->vacmAccessNotifyViewName, 0, entry->vacmAccessNotifyViewName_len);
    entry->vacmAccessStorageType = VACMACCESSSTORAGETYPE_VOLATILE;
    entry->vacmAccessStatus = VACMACCESSSTATUS_ACTIVE;


    netsnmp_tdata_row_add_index(row, ASN_PRIV_IMPLIED_OCTET_STR, // was ASN_OCTET_STR,
                                entry->vacmGroupName,
                                entry->vacmGroupName_len);
    netsnmp_tdata_row_add_index(row, ASN_PRIV_IMPLIED_OCTET_STR, // was ASN_OCTET_STR,
                                entry->vacmAccessContextPrefix,
                                entry->vacmAccessContextPrefix_len);
    netsnmp_tdata_row_add_index(row, ASN_UNSIGNED,
            &(entry->vacmAccessSecurityModel),
            sizeof(entry->vacmAccessSecurityModel));
    netsnmp_tdata_row_add_index(row, ASN_UNSIGNED,
            &(entry->vacmAccessSecurityLevel),
            sizeof(entry->vacmAccessSecurityLevel));

    //SNMP_DEBUGPRINT("\n snmpCommunity Index string ------------ %s\n",entry->snmpCommunityIndex);
    netsnmp_tdata_add_row(table_data, row);
    SNMP_DEBUGPRINT("\n vacmAccessTable_createEntry_allData ::END \n");
   return 1;

}


void
     vacmAccessTable_free(netsnmp_cache * cache, void *vmagic) {
/*    netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *this;

    while           ((this = netsnmp_tdata_get_first_row(table))) {
        netsnmp_tdata_remove_and_delete_row(table, this);
}*/}
/** handles requests for the vacmAccessTable table */

int
 vacmAccessTable_handler(netsnmp_mib_handler *handler,
                            netsnmp_handler_registration *reginfo,
                            netsnmp_agent_request_info *reqinfo,
                            netsnmp_request_info *requests) {

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct vacmAccessTable_entry *table_entry;
    int             ret;
    vl_row = NULL;

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request = requests; request; request = request->next) {
//             table_entry = (struct vacmAccessTable_entry *)                netsnmp_tdata_extract_entry(request);
            /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(vacmAccessTable_entry);


            switch (table_info->colnum) {
            case COLUMN_VACMACCESSCONTEXTMATCH:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           vacmAccessContextMatch);
                break;
            case COLUMN_VACMACCESSREADVIEWNAME:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         vacmAccessReadViewName,
                                         table_entry->
                                         vacmAccessReadViewName_len);
                break;
            case COLUMN_VACMACCESSWRITEVIEWNAME:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         vacmAccessWriteViewName,
                                         table_entry->
                                         vacmAccessWriteViewName_len);
                break;
            case COLUMN_VACMACCESSNOTIFYVIEWNAME:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         vacmAccessNotifyViewName,
                                         table_entry->
                                         vacmAccessNotifyViewName_len);
                break;
            case COLUMN_VACMACCESSSTORAGETYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           vacmAccessStorageType);
                break;
            case COLUMN_VACMACCESSSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->vacmAccessStatus);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmAccessTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMACCESSCONTEXTMATCH:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_VACMACCESSREADVIEWNAME:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              vacmAccessReadViewName));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_VACMACCESSWRITEVIEWNAME:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              vacmAccessWriteViewName));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_VACMACCESSNOTIFYVIEWNAME:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              vacmAccessNotifyViewName));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_VACMACCESSSTORAGETYPE:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_VACMACCESSSTATUS:
                ret = netsnmp_check_vb_rowstatus(request->requestvb,
                                                 (table_entry ? RS_ACTIVE :
                                                  RS_NONEXISTENT));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_ERR_NOTWRITABLE);
                return SNMP_ERR_NOERROR;
            }
        }
        break;

    case MODE_SET_RESERVE2:
        for (request = requests; request; request = request->next) {
            netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMACCESSSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    table_row =
                        vacmAccessTable_createEntry(table_data,(char*)
                                                    table_info->indexes->
                                                    val.string,
                                                    table_info->indexes->
                                                    val_len,(char*)
                                                    table_info->indexes->
                                                    val.string,
                                                    table_info->indexes->
                                                    val_len,
                                                    *table_info->indexes->
                                                    val.integer,
                                                    *table_info->indexes->
                                                    val.integer);
                    if (table_row) {
                        netsnmp_insert_tdata_row(request, table_row);
                    } else {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_RESOURCEUNAVAILABLE);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_FREE:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmAccessTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMACCESSSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        vacmAccessTable_removeEntry(table_data, table_row);
                    }
                }
            }
        }
        break;

    case MODE_SET_ACTION:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmAccessTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMACCESSCONTEXTMATCH:
                table_entry->old_vacmAccessContextMatch =
                    table_entry->vacmAccessContextMatch;
                table_entry->vacmAccessContextMatch =
                    *request->requestvb->val.integer;
                break;
            case COLUMN_VACMACCESSREADVIEWNAME:
                memcpy(table_entry->old_vacmAccessReadViewName,
                       table_entry->vacmAccessReadViewName,
                       sizeof(table_entry->vacmAccessReadViewName));
                table_entry->old_vacmAccessReadViewName_len =
                    table_entry->vacmAccessReadViewName_len;
                memset(table_entry->vacmAccessReadViewName, 0,
                       sizeof(table_entry->vacmAccessReadViewName));
                memcpy(table_entry->vacmAccessReadViewName,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->vacmAccessReadViewName_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_VACMACCESSWRITEVIEWNAME:
                memcpy(table_entry->old_vacmAccessWriteViewName,
                       table_entry->vacmAccessWriteViewName,
                       sizeof(table_entry->vacmAccessWriteViewName));
                table_entry->old_vacmAccessWriteViewName_len =
                    table_entry->vacmAccessWriteViewName_len;
                memset(table_entry->vacmAccessWriteViewName, 0,
                       sizeof(table_entry->vacmAccessWriteViewName));
                memcpy(table_entry->vacmAccessWriteViewName,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->vacmAccessWriteViewName_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_VACMACCESSNOTIFYVIEWNAME:
                memcpy(table_entry->old_vacmAccessNotifyViewName,
                       table_entry->vacmAccessNotifyViewName,
                       sizeof(table_entry->vacmAccessNotifyViewName));
                table_entry->old_vacmAccessNotifyViewName_len =
                    table_entry->vacmAccessNotifyViewName_len;
                memset(table_entry->vacmAccessNotifyViewName, 0,
                       sizeof(table_entry->vacmAccessNotifyViewName));
                memcpy(table_entry->vacmAccessNotifyViewName,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->vacmAccessNotifyViewName_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_VACMACCESSSTORAGETYPE:
                table_entry->old_vacmAccessStorageType =
                    table_entry->vacmAccessStorageType;
                table_entry->vacmAccessStorageType =
                    *request->requestvb->val.integer;
                break;
            }
        }
        /*
         * Check the internal consistency of an active row
         */
        for (request = requests; request; request = request->next) {
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMACCESSSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_ACTIVE:
                case RS_CREATEANDGO:
                    if ( 0 ) {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_INCONSISTENTVALUE);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_UNDO:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmAccessTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMACCESSCONTEXTMATCH:
                table_entry->vacmAccessContextMatch =
                    table_entry->old_vacmAccessContextMatch;
                table_entry->old_vacmAccessContextMatch = 0;
                break;
            case COLUMN_VACMACCESSREADVIEWNAME:
                memcpy(table_entry->vacmAccessReadViewName,
                       table_entry->old_vacmAccessReadViewName,
                       sizeof(table_entry->vacmAccessReadViewName));
                memset(table_entry->old_vacmAccessReadViewName, 0,
                       sizeof(table_entry->vacmAccessReadViewName));
                table_entry->vacmAccessReadViewName_len =
                    table_entry->old_vacmAccessReadViewName_len;
                break;
            case COLUMN_VACMACCESSWRITEVIEWNAME:
                memcpy(table_entry->vacmAccessWriteViewName,
                       table_entry->old_vacmAccessWriteViewName,
                       sizeof(table_entry->vacmAccessWriteViewName));
                memset(table_entry->old_vacmAccessWriteViewName, 0,
                       sizeof(table_entry->vacmAccessWriteViewName));
                table_entry->vacmAccessWriteViewName_len =
                    table_entry->old_vacmAccessWriteViewName_len;
                break;
            case COLUMN_VACMACCESSNOTIFYVIEWNAME:
                memcpy(table_entry->vacmAccessNotifyViewName,
                       table_entry->old_vacmAccessNotifyViewName,
                       sizeof(table_entry->vacmAccessNotifyViewName));
                memset(table_entry->old_vacmAccessNotifyViewName, 0,
                       sizeof(table_entry->vacmAccessNotifyViewName));
                table_entry->vacmAccessNotifyViewName_len =
                    table_entry->old_vacmAccessNotifyViewName_len;
                break;
            case COLUMN_VACMACCESSSTORAGETYPE:
                table_entry->vacmAccessStorageType =
                    table_entry->old_vacmAccessStorageType;
                table_entry->old_vacmAccessStorageType = 0;
                break;
            case COLUMN_VACMACCESSSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        vacmAccessTable_removeEntry(table_data, table_row);
                    }
                }
                break;
            }
        }
        break;

    case MODE_SET_COMMIT:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmAccessTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMACCESSSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_ACTIVE:
                    table_entry->vacmAccessStatus = RS_ACTIVE;
                    break;

                case RS_CREATEANDWAIT:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_NOTINSERVICE:
                    table_entry->vacmAccessStatus = RS_NOTINSERVICE;
                    break;

                case RS_DESTROY:
                    vacmAccessTable_removeEntry(table_data, table_row);
                }
            }
        }
        break;
    }
    return SNMP_ERR_NOERROR;
}
