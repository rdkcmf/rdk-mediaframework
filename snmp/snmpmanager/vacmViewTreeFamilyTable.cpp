/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
 * @defgroup VACM VACM Table (View-based Access Control Model)
 * @ingroup SNMP_MGR
 * @ingroup VACM
 * @{
 */

/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

/**
 * @file vacmViewTreeFamilyTable.cpp
 * @brief This file is used to create vacmViewTreeFamilyTable with default entries
 * like oid, Family vie name, max id, oid subtree etc and registers the handlers
 * for the VACM requests.
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "vacmViewTreeFamilyTable.h"
#include "snmpAccessInclude.h"
#include "vl_ocStbHost_GetData.h"
//#include "vlMemCpy.h"
#include "utilityMacros.h"

/**
 * @brief This function is a init function which calls initialize function to
 * initialize the vacmViewTreeFamilyTable module and table.
 *
 * @return None.
 */
void
init_vacmViewTreeFamilyTable(void)
{
    /*
     * here we initialize all the tables we're planning on supporting
     */
    initialize_table_vacmViewTreeFamilyTable();
}

/**
 * @brief This function is used to initialize the vacmViewTreeFamilyTable table
 * by defining its contents and how it's structured. It creates and registers
 * the handler and creates the cache for the table.
 * 
 * @return None.
 */
void
initialize_table_vacmViewTreeFamilyTable(void)
{
    static oid      vacmViewTreeFamilyTable_oid[] =
        { 1, 3, 6, 1, 6, 3, 16, 1, 5, 2 };
    size_t          vacmViewTreeFamilyTable_oid_len =
        OID_LENGTH(vacmViewTreeFamilyTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("vacmViewTreeFamilyTable",
                                            vacmViewTreeFamilyTable_handler,
                                            vacmViewTreeFamilyTable_oid,
                                            vacmViewTreeFamilyTable_oid_len,
                                            HANDLER_CAN_RWRITE);

    table_data = netsnmp_tdata_create_table("vacmViewTreeFamilyTable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info, ASN_OCTET_STR, /* index: vacmViewTreeFamilyViewName */
                                     ASN_OBJECT_ID,     /* index: vacmViewTreeFamilySubtree */
                                     0);

    table_info->min_column = COLUMN_VACMVIEWTREEFAMILYMASK;
    table_info->max_column = COLUMN_VACMVIEWTREEFAMILYSTATUS;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(VACMVIEWTREEFAMILYTABLE_TIMEOUT,
                                 vacmViewTreeFamilyTable_load,
                                 vacmViewTreeFamilyTable_free,
                                 vacmViewTreeFamilyTable_oid,
                                 vacmViewTreeFamilyTable_oid_len);
        cache->magic = (void *) table_data;
    cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
    NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
    NETSNMP_CACHE_DONT_AUTO_RELEASE;

    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "vacmViewTreeFamilyTable");

        /*
         * Initialise the contents of the table here
         */
     if(0 == vacmViewTreeFamilyTable_load(cache,table_data))
    {
            //snmpCommunityTable_load"
      SNMP_DEBUGPRINT(" ERROR:: vacmViewTreeFamilyTable_load Not yet table initialise here \n");
    }
}

/**
 * @brief This function is used to create new row and entry in vacmViewTreeFamilyTable.
 *
 * @param[in] vacmViewTreeFamilyViewName VACM Tree Family view name.
 * @param[in] vacmViewTreeFamilyViewName_len VACM Tree Family view name length.
 * @param[in] vacmViewTreeFamilySubtree VACM Tree Family subtree.
 * @param[in] vacmViewTreeFamilySubtree_len VACM Tree Family subtree name length.
 * @param[out] table_data Netsnmp table where info are stored.
 *
 * @return row Struct pointer having address of new row. For failed condition,
 * it returns NULL.
 */
netsnmp_tdata_row *vacmViewTreeFamilyTable_createEntry(netsnmp_tdata *
                                                       table_data,
                                                       char
                                                       *vacmViewTreeFamilyViewName,
                                                       size_t
                                                       vacmViewTreeFamilyViewName_len,
                                                       oid *
                                                       vacmViewTreeFamilySubtree,
                                                       size_t
                                                       vacmViewTreeFamilySubtree_len)
{
    struct vacmViewTreeFamilyTable_entry *entry;
    netsnmp_tdata_row *row;
        entry = SNMP_MALLOC_TYPEDEF(struct vacmViewTreeFamilyTable_entry);
    if              (!entry)
                        return NULL;

                    row = netsnmp_tdata_create_row();
    if              (!row) {
        SNMP_FREE(entry);
        return NULL;
    }
    row->           data = entry;
    memcpy(entry->vacmViewTreeFamilyViewName, vacmViewTreeFamilyViewName,
           vacmViewTreeFamilyViewName_len );
    entry->vacmViewTreeFamilyViewName_len = vacmViewTreeFamilyViewName_len;
    netsnmp_tdata_row_add_index(row, ASN_OCTET_STR,
                                entry->vacmViewTreeFamilyViewName,
                                vacmViewTreeFamilyViewName_len);
    memcpy(entry->vacmViewTreeFamilySubtree, vacmViewTreeFamilySubtree,
           vacmViewTreeFamilySubtree_len);
    entry->vacmViewTreeFamilySubtree_len = vacmViewTreeFamilySubtree_len;
    netsnmp_tdata_row_add_index(row, ASN_OBJECT_ID,
                                entry->vacmViewTreeFamilySubtree,
                                vacmViewTreeFamilySubtree_len);
    netsnmp_tdata_add_row(table_data, row);
    return row;
}

/**
 * @brief This function is used to remove an entry or column from the info table.
 *
 * @param[in] table_data Table from where the entry has to be removed.
 * @param[in] row Struct pointer of the row which has to be removed.
 *
 * @return None
 */
void
    vacmViewTreeFamilyTable_removeEntry(netsnmp_tdata * table_data,
                                        netsnmp_tdata_row * row) {
    struct vacmViewTreeFamilyTable_entry *entry;

    if (!row)
        return;                 /* Nothing to remove */
    entry = (struct vacmViewTreeFamilyTable_entry *)
        netsnmp_tdata_remove_and_delete_row(table_data, row);
    if (entry)
        SNMP_FREE(entry);       /* XXX - release any other internal resources */
}


//Dummy date for test;
char acessviewnameV3[MAXROW_ACCESS][STRLEN_CHAR_ACCESS]; //={"wholemib", "wholemib"};
char oidSubtree[MAXROW_ACCESS][128];// = {".1.3.6.1.6" , ".1.3.6"};
char acessMax[MAXROW_ACCESS][STRLEN_CHAR_ACCESS]; // = {"0xF1", ""};
int accessviewtype[MAXROW_ACCESS];// = { 1 , 2};
//char tlvparseCm[20];
static int SzClist;
//here we will get follwoing vaues from tlv :: numberoftlv-list (n times 53 obj)
// here we wil get form Tlv follwoing values :: OIDsubtree 54.2 , mask 54.3, accviewtype 54.4 (1 included 2 exelude)

#ifdef __cplusplus
extern "C" {
#endif


int static iszvw,oidsz, maxsz,typesz;
/**
 * @brief This function is used to store the Access view name.
 * 
 * @param[in] accessviewV3Name Access view name.
 *
 * @return None.
 */
void vacmViewTreeFamilyTableEventhandling_viewname( char *accessviewV3Name )
{
        int Szlistdosevent;
       SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTableEventhandling :: End :::  %s\n", accessviewV3Name);
        memcpy(acessviewnameV3+iszvw, accessviewV3Name , strlen(accessviewV3Name));
        iszvw++;
        Szlistdosevent = iszvw;
        SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTableEventhandling :: End  ::: iSz %d\n", Szlistdosevent);

      // return 1;
}

/**
 * @brief This function is used to store the name of oidSubtree.
 *
 * @param[in] oidSubtree oidSubtree name.
 *
 * @return None.
 */
void vacmViewTreeFamilyTableEventhandling_oidsubtree( char *oidSubtree )
{
        int Szlistdosevent;
       SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTableEventhandling :: End :::  %s\n", oidSubtree);

        memcpy(oidSubtree+oidsz, oidSubtree , strlen(oidSubtree) );

        oidsz++;
        Szlistdosevent = oidsz;
        SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTableEventhandling :: End  ::: iSz %d\n", Szlistdosevent);

      // return 1;
}

/**
 * @brief This function is used to store the submaxId.
 *
 * @param[in] maxid submaxId.
 *
 * @return None.
 */
void vacmViewTreeFamilyTableEventhandling_submaxId(char *maxid  )
{
        int Szlistdosevent;
       SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTableEventhandling :: End :::  %s\n",maxid);

        memcpy(acessMax+maxsz, maxid , strlen(maxid));

        maxsz++;
        Szlistdosevent = maxsz;
        SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTableEventhandling :: End  ::: iSz %d\n", Szlistdosevent);

      // return 1;
}

/**
 * @brief This function is used to store the viewtype.
 *
 * @param[in] viewtype View type.
 *
 * @return None.
 */
void vacmViewTreeFamilyTableEventhandling_type( char * viewtype )
{
        int Szlistdosevent;
       SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTableEventhandling :: End :::  %s\n", viewtype);

        accessviewtype[typesz] = int(viewtype);

        typesz++;
        Szlistdosevent = typesz;
        SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTableEventhandling :: End  ::: iSz %d\n", Szlistdosevent);

      // return 1;
}
#ifdef __cplusplus
}
#endif

/**
 * @brief This function is used to free/delete the content of the table.
 * Currently this function is not implemented.
 */
void
        vacmViewTreeFamilyTable_free(netsnmp_cache * cache, void *vmagic) {
    /*netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *this;

    while           ((this = netsnmp_tdata_get_first_row(table))) {
        netsnmp_tdata_remove_and_delete_row(table, this);
}*/}

/**
 * @brief This function is used to create and load the netsnmp table data entries
 * like FamilyViewName, FamilySubtree, StorageType etc.
 *
 * @param[in] cache Struct pointer containing Cached data for the table.
 * @param[out] vmagic
 *
 * @return Returns 1 by default (Success condition).
 */
int
   vacmViewTreeFamilyTable_load(netsnmp_cache * cache, void *vmagic) {

    char acessviewnameV3d_default[STRLEN_CHAR_ACCESS];
    char  oidSubtree_default[128];
    char acessMax_default[STRLEN_CHAR_ACCESS];
    int accessviewtype_default;

    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *row;
    char comm[256];
    //iszvw = 2;
    SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTable_load ::   :::  \n");
    bool replace_table = false;
    int count = 0;
    if(netsnmp_tdata_row_first(table_data))
    {
        replace_table = true;
    }
     SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTable_load :: vacmViewTreeFamilyTable_load   ::: iSz %d\n",iszvw);

     //memcpy(comm,Communitysting[count],sizeof(Communitysting[count]));
    for(count = 0; count < iszvw; count++) //isz also represents the number of types the 53 tlv has present in tlv.conf
    {
               if(replace_table)
               {
                    replace_table = false;
                    Table_free(table_data);
               }
      vacmViewTreeFamilyTable_createEntry_allData(table_data, count, acessviewnameV3[count], oidSubtree[count] , acessMax[count], accessviewtype[count]);

      //RDK_LOG(RDK_LOG_DEBUG, "LOG.RDK.SNMP", "\n snmpCommunityTable_load :: snmpCommunityTable_load   ::: iSz %d\n",isz);
    }
    if(iszvw == 0)
    {
       Table_free(table_data);
        memcpy(acessviewnameV3d_default, " " , strlen(" "));
        snprintf(oidSubtree_default,
                sizeof(oidSubtree_default),
                       "%d.%d.%d",1,3,6);
        memcpy(acessMax_default, " ", strlen(" "));
        accessviewtype_default = 2;
        vacmViewTreeFamilyTable_createEntry_allData(table_data, count, acessviewnameV3d_default, oidSubtree_default , acessMax_default, accessviewtype_default);


    }
     SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTable_load :: End vacmViewTreeFamilyTable_load   :::  \n");
    return 1;
}

/**
 * @brief This function is used to copy info like Acessviewname, oidSubtree, maxId,
 * accessviewtype and fill these values in the netsnmp table.
 *
 * @param[in] count Total number of types of tlv present in tlv.conf.
 * @param[in] acessviewnameV3 Access view name.
 * @param[in] oidSubtree Name of oidSubtree.
 * @param[in] acessMax Max Id.
 * @param[in] accessviewtype Type of access view.
 * @param[out] table_data Table where entries and data will be stored.
 *
 * @return Returns 1 for success and 0 for failure condition.
 */
int vacmViewTreeFamilyTable_createEntry_allData(netsnmp_tdata *table_data,int count, char *acessviewnameV3,char* oidSubtree , char *acessMax, int accessviewtype)
{
    SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTable_createEntry_allData ::Start \n");
    struct vacmViewTreeFamilyTable_entry *entry;
    netsnmp_tdata_row *row;
    entry = SNMP_MALLOC_TYPEDEF(struct vacmViewTreeFamilyTable_entry);
    if (!entry)
    return 0;

    row = netsnmp_tdata_create_row();
    if (!row) {
    SNMP_FREE(entry);
    return 0;
    }
    row->data = entry;
    /*
     * Index values
     */
     entry->vacmViewTreeFamilyViewName_len = strlen(acessviewnameV3);
    memcpy(entry->vacmViewTreeFamilyViewName, acessviewnameV3, entry->vacmViewTreeFamilyViewName_len) ;
    entry->vacmViewTreeFamilySubtree_len = strlen(oidSubtree);
    memcpy(entry->vacmViewTreeFamilySubtree, oidSubtree, entry->vacmViewTreeFamilySubtree_len);

    /*
     * Column values
     */
     entry->vacmViewTreeFamilyMask_len = strlen(acessMax);
     memcpy(entry->vacmViewTreeFamilyMask, acessMax, entry->vacmViewTreeFamilyMask_len);
     if(accessviewtype == 1  )
     {
          entry->vacmViewTreeFamilyType =  VACMVIEWTREEFAMILYTYPE_INCLUDED;
     }
     if (  accessviewtype == 2 )
     {

          entry->vacmViewTreeFamilyType = VACMVIEWTREEFAMILYTYPE_EXCLUDED;
     }

     entry->vacmViewTreeFamilyStorageType = VACMVIEWTREEFAMILYSTORAGETYPE_VOLATILE;
     entry->vacmViewTreeFamilyStatus = VACMVIEWTREEFAMILYSTATUS_ACTIVE;



    netsnmp_tdata_row_add_index(row, ASN_PRIV_IMPLIED_OCTET_STR, // was ASN_OCTET_STR,
                                entry->vacmViewTreeFamilyViewName,
                                entry->vacmViewTreeFamilyViewName_len);

    netsnmp_tdata_row_add_index(row, ASN_PRIV_IMPLIED_OCTET_STR, // was ASN_OCTET_STR,
                                entry->vacmViewTreeFamilySubtree,
                                entry->vacmViewTreeFamilySubtree_len);
    netsnmp_tdata_add_row(table_data, row);
   SNMP_DEBUGPRINT("\n vacmViewTreeFamilyTable_createEntry_allData ::END \n");
   return 1;

}


/**
 * @brief This function is used to handle the requests for VACM tree family table.
 * It handles requests like GET, Set Action, UNDO etc.
 *
 * @param[in] handler Sturct pointer of Handler for netsnmp mib.
 * @param[in] reginfo Struct pointer for registration of handlers.
 * @param[in] reqinfo Struct poniter of netsnmp agent request.
 * @param[in] requests Struct pointer for the request which has to be handled.
 *
 * @retval SNMP_ERR_NOERROR Returns for successful condtion.
 */
int
    vacmViewTreeFamilyTable_handler(netsnmp_mib_handler *handler,
                                    netsnmp_handler_registration *reginfo,
                                    netsnmp_agent_request_info *reqinfo,
                                    netsnmp_request_info *requests) {

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;

    struct vacmViewTreeFamilyTable_entry *table_entry;
    int             ret;

    vl_row = NULL;
    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request = requests; request; request = request->next) {
//            table_entry = (struct vacmViewTreeFamilyTable_entry *)                netsnmp_tdata_extract_entry(request);
            /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(vacmViewTreeFamilyTable_entry);

            switch (table_info->colnum) {
            case COLUMN_VACMVIEWTREEFAMILYMASK:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         vacmViewTreeFamilyMask,
                                         table_entry->
                                         vacmViewTreeFamilyMask_len);
                break;
            case COLUMN_VACMVIEWTREEFAMILYTYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           vacmViewTreeFamilyType);
                break;
            case COLUMN_VACMVIEWTREEFAMILYSTORAGETYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           vacmViewTreeFamilyStorageType);
                break;
            case COLUMN_VACMVIEWTREEFAMILYSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           vacmViewTreeFamilyStatus);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmViewTreeFamilyTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMVIEWTREEFAMILYMASK:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              vacmViewTreeFamilyMask));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_VACMVIEWTREEFAMILYTYPE:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_VACMVIEWTREEFAMILYSTORAGETYPE:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_VACMVIEWTREEFAMILYSTATUS:
                ret = netsnmp_check_vb_rowstatus(request->requestvb,
                                                 (table_entry ? RS_ACTIVE :
                                                  RS_NONEXISTENT));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_ERR_NOTWRITABLE);
                return SNMP_ERR_NOERROR;
            }
        }
        break;

    case MODE_SET_RESERVE2:
        for (request = requests; request; request = request->next) {
            netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMVIEWTREEFAMILYSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    table_row =
                        vacmViewTreeFamilyTable_createEntry(table_data,(char*)
                                                            table_info->
                                                            indexes->val.
                                                            string,
                                                            table_info->
                                                            indexes->
                                                            val_len,(oid*)
                                                            table_info->
                                                            indexes->val.
                                                            string,
                                                            table_info->
                                                            indexes->
                                                            val_len);
                    if (table_row) {
                        netsnmp_insert_tdata_row(request, table_row);
                    } else {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_RESOURCEUNAVAILABLE);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_FREE:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmViewTreeFamilyTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMVIEWTREEFAMILYSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        vacmViewTreeFamilyTable_removeEntry(table_data,
                                                            table_row);
                    }
                }
            }
        }
        break;

    case MODE_SET_ACTION:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmViewTreeFamilyTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMVIEWTREEFAMILYMASK:
                memcpy(table_entry->old_vacmViewTreeFamilyMask,
                       table_entry->vacmViewTreeFamilyMask,
                       sizeof(table_entry->vacmViewTreeFamilyMask));
                table_entry->old_vacmViewTreeFamilyMask_len =
                    table_entry->vacmViewTreeFamilyMask_len;
                memset(table_entry->vacmViewTreeFamilyMask, 0,
                       sizeof(table_entry->vacmViewTreeFamilyMask));
                memcpy(table_entry->vacmViewTreeFamilyMask,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->vacmViewTreeFamilyMask_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_VACMVIEWTREEFAMILYTYPE:
                table_entry->old_vacmViewTreeFamilyType =
                    table_entry->vacmViewTreeFamilyType;
                table_entry->vacmViewTreeFamilyType =
                    *request->requestvb->val.integer;
                break;
            case COLUMN_VACMVIEWTREEFAMILYSTORAGETYPE:
                table_entry->old_vacmViewTreeFamilyStorageType =
                    table_entry->vacmViewTreeFamilyStorageType;
                table_entry->vacmViewTreeFamilyStorageType =
                    *request->requestvb->val.integer;
                break;
            }
        }
        /*
         * Check the internal consistency of an active row
         */
        for (request = requests; request; request = request->next) {
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMVIEWTREEFAMILYSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_ACTIVE:
                case RS_CREATEANDGO:
                    if ( 0 ) {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_INCONSISTENTVALUE);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_UNDO:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmViewTreeFamilyTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMVIEWTREEFAMILYMASK:
                memcpy(table_entry->vacmViewTreeFamilyMask,
                       table_entry->old_vacmViewTreeFamilyMask,
                       sizeof(table_entry->vacmViewTreeFamilyMask));
                memset(table_entry->old_vacmViewTreeFamilyMask, 0,
                       sizeof(table_entry->vacmViewTreeFamilyMask));
                table_entry->vacmViewTreeFamilyMask_len =
                    table_entry->old_vacmViewTreeFamilyMask_len;
                break;
            case COLUMN_VACMVIEWTREEFAMILYTYPE:
                table_entry->vacmViewTreeFamilyType =
                    table_entry->old_vacmViewTreeFamilyType;
                table_entry->old_vacmViewTreeFamilyType = 0;
                break;
            case COLUMN_VACMVIEWTREEFAMILYSTORAGETYPE:
                table_entry->vacmViewTreeFamilyStorageType =
                    table_entry->old_vacmViewTreeFamilyStorageType;
                table_entry->old_vacmViewTreeFamilyStorageType = 0;
                break;
            case COLUMN_VACMVIEWTREEFAMILYSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        vacmViewTreeFamilyTable_removeEntry(table_data,
                                                            table_row);
                    }
                }
                break;
            }
        }
        break;

    case MODE_SET_COMMIT:
        for (request = requests; request; request = request->next) {
            table_entry = (struct vacmViewTreeFamilyTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_VACMVIEWTREEFAMILYSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_ACTIVE:
                    table_entry->vacmViewTreeFamilyStatus = RS_ACTIVE;
                    break;

                case RS_CREATEANDWAIT:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_NOTINSERVICE:
                    table_entry->vacmViewTreeFamilyStatus =
                        RS_NOTINSERVICE;
                    break;

                case RS_DESTROY:
                    vacmViewTreeFamilyTable_removeEntry(table_data,
                                                        table_row);
                }
            }
        }
        break;
    }
    return SNMP_ERR_NOERROR;
}

/** @} */
