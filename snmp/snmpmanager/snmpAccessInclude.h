/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.column_enums.conf 12909 2005-09-29 22:16:22Z hardaker $
 */
#ifndef SNMP_ACCESS_CONTROL
#define SNMP_ACCESS_CONTROL

#define STRLEN_CHAR_ACCESS 256
#define MAXROW_ACCESS 20

#include "net-snmp/net-snmp-config.h"
#include "net-snmp/types.h"

 /*
     * Typical data structure for a row entry 
     */
typedef struct snmpTargetAddrTable_entry {
    /*
     * Index values 
     */
    char            snmpTargetAddrName[STRLEN_CHAR_ACCESS]; //@STBconfigTag_0_0
    size_t          snmpTargetAddrName_len;

    /*
     * Column values 
     */
    oid             snmpTargetAddrTDomain[STRLEN_CHAR_ACCESS]; //snmpUDPDomain
    size_t          snmpTargetAddrTDomain_len;
    oid             old_snmpTargetAddrTDomain[STRLEN_CHAR_ACCESS];
    size_t          old_snmpTargetAddrTDomain_len;
    char            snmpTargetAddrTAddress[STRLEN_CHAR_ACCESS]; //0A 00 00 00 00 00
    size_t          snmpTargetAddrTAddress_len;
    char            old_snmpTargetAddrTAddress[STRLEN_CHAR_ACCESS];
    size_t          old_snmpTargetAddrTAddress_len;
    long            snmpTargetAddrTimeout;        //1500   
    long            old_snmpTargetAddrTimeout;
    long            snmpTargetAddrRetryCount;        //3
    long            old_snmpTargetAddrRetryCount;
    char            snmpTargetAddrTagList[STRLEN_CHAR_ACCESS];     //?@STBconfigTag_0?
    size_t          snmpTargetAddrTagList_len;
    char            old_snmpTargetAddrTagList[STRLEN_CHAR_ACCESS];
    size_t          old_snmpTargetAddrTagList_len;
    char            snmpTargetAddrParams[STRLEN_CHAR_ACCESS];        //00
    size_t          snmpTargetAddrParams_len;
    char            old_snmpTargetAddrParams[STRLEN_CHAR_ACCESS]; 
    size_t          old_snmpTargetAddrParams_len; 
    long            snmpTargetAddrStorageType;      //volatile(2) 
    long            old_snmpTargetAddrStorageType;
    long            snmpTargetAddrRowStatus;       //active(1)

    int             valid;
} snmpTargetAddrTable_t;


 typedef struct snmpCommunityTable_entry {
    char            snmpCommunityIndex[STRLEN_CHAR_ACCESS];
    size_t          snmpCommunityIndex_len;

    char            snmpCommunityName[STRLEN_CHAR_ACCESS];
    size_t          snmpCommunityName_len;
    char            old_snmpCommunityName[STRLEN_CHAR_ACCESS];
    size_t          old_snmpCommunityName_len;
    char            snmpCommunitySecurityName[STRLEN_CHAR_ACCESS];//"@STBconfig_n" same as index
    size_t          snmpCommunitySecurityName_len;
    char            old_snmpCommunitySecurityName[STRLEN_CHAR_ACCESS]; //the Engine ID of the OCHD2.1
   size_t           old_snmpCommunitySecurityName_len;
    char             snmpCommunityContextEngineID[STRLEN_CHAR_ACCESS]; 
    size_t          snmpCommunityContextEngineID_len;
    char            old_snmpCommunityContextEngineID[STRLEN_CHAR_ACCESS];
    size_t          old_snmpCommunityContextEngineID_len;
    char            snmpCommunityContextName[STRLEN_CHAR_ACCESS]; //"empty string"
    size_t          snmpCommunityContextName_len;
    char            old_snmpCommunityContextName[STRLEN_CHAR_ACCESS];
    size_t          old_snmpCommunityContextName_len;
    char            snmpCommunityTransportTag[STRLEN_CHAR_ACCESS]; // @STBconfigTag_0
    size_t          snmpCommunityTransportTag_len;
    char            old_snmpCommunityTransportTag[STRLEN_CHAR_ACCESS];
    size_t          old_snmpCommunityTransportTag_len;
    long            snmpCommunityStorageType;          //volatile(2)
    long            old_snmpCommunityStorageType;
    long            snmpCommunityStatus;

    int             valid;
} snmpCommunityTable_t;

//example how the date will look like 
// Verify that table contains two rows containing the following data:
//  Index*         Name       SecurityName   Context TransportTag      Storage     Status
//                                           Name                      Type
//                                                                                           OCHD2
//  ?@STBconfig_0? ?public?   ?@STBconfig_0? ??      ?@STBconfigTag_0? volatile(2) active(1)
//  ?@STBconfig_1? ?supermax? ?@STBconfig_1? ??      ?@STBconfigTag_1? volatile(2) active(1)



//example how the date will look like 
// Name*                TDomain       TAddress          Timeout      RetryCount
// ?@STBconfigTag_0_0?  snmpUDPDomain 0A 00 00 00 00 00 1500         3
// ?@STBconfigTag_1_0?  snmpUDPDomain 0A 00 00 00 00 00 1500         3
//                                                                              OCHD2
// TagList             Params          StorageType         RowStatus
// ?@STBconfigTag_0?   00              volatile(2)         active(1)
// ?@STBconfigTag_1?   00              volatile(2)         active(1)
 /*
     * Typical data structure for a row entry 
     */
typedef struct snmpTargetAddrExtTable_entry {
    /*
     * Index values 
     */
    char            snmpTargetAddrName[STRLEN_CHAR_ACCESS];  //@STBconfigTag_0_0 , @STBconfigTag_1_0?
    size_t          snmpTargetAddrName_len;

    /*
     * Column values 
     */
    char            snmpTargetAddrTMask[STRLEN_CHAR_ACCESS];    //<empty>FF 00 00 00 00 00
    size_t          snmpTargetAddrTMask_len; 
    char            old_snmpTargetAddrTMask[STRLEN_CHAR_ACCESS];
    size_t          old_snmpTargetAddrTMask_len;
    long            snmpTargetAddrMMS;            //484
    long            old_snmpTargetAddrMMS;

    int             valid;
}snmpTargetAddrExtTable_t;



//example how the date will look like 
// Name*               TMask                    MMS
// ?@STBconfigTag_0_0? <empty>FF 00 00 00 00 00 484
// ?@STBconfigTag_1_0? <empty>FF 80 00 00 00 00 484




 /*
     * Typical data structure for a row entry 
     */
typedef struct vacmAccessTable_entry {
    /*
     * Index values 
     */
    char            vacmGroupName[STRLEN_CHAR_ACCESS];
    size_t          vacmGroupName_len;
    char            vacmAccessContextPrefix[STRLEN_CHAR_ACCESS];
    size_t          vacmAccessContextPrefix_len;
    long            vacmAccessSecurityModel;
    long            vacmAccessSecurityLevel;
    /*
     * Column values 
     */
    long            vacmAccessContextMatch;
    long            old_vacmAccessContextMatch;
    char            vacmAccessReadViewName[STRLEN_CHAR_ACCESS];
    size_t          vacmAccessReadViewName_len;
    char            old_vacmAccessReadViewName[STRLEN_CHAR_ACCESS];
    size_t          old_vacmAccessReadViewName_len;
    char            vacmAccessWriteViewName[STRLEN_CHAR_ACCESS];
    size_t          vacmAccessWriteViewName_len;
    char            old_vacmAccessWriteViewName[STRLEN_CHAR_ACCESS];
    size_t          old_vacmAccessWriteViewName_len;
    char            vacmAccessNotifyViewName[STRLEN_CHAR_ACCESS];
    size_t          vacmAccessNotifyViewName_len;
    char            old_vacmAccessNotifyViewName[STRLEN_CHAR_ACCESS];
    size_t          old_vacmAccessNotifyViewName_len;
    long            vacmAccessStorageType;
    long            old_vacmAccessStorageType;
    long            vacmAccessStatus;

    int             valid;
}vacmAccessTable_t;


// GroupName*            ContexPrefix*  SecurityModel*  SecurityLevel*  ContextMatch
// ?@STBconfigV1_0?      <empty>        SNMPV1(1)       noAuthPriv(1)   exact(1)
// ?@STBconfigV2_0?      <empty>        SNMPV2c(2)      noAuthPriv(1)   exact(1)
// ?@STBconfigV1_1?      <empty>        SNMPV1(1)       noAuthPriv(1)   exact(1)
// ?@STBconfigV2_1?      <empty>        SNMPV2c(2)      noAuthPriv(1)   exact(1)
//                                                                                   OCHD2
// ReadViewName     WriteViewName      NotifyViewName  StorageType     Status
// ?readonly?       <empty>            <empty>         volatile(2)     active(1)
// ?readonly?       <empty>            <empty>         volatile(2)     active(1)
// ?fullaccess?     ?fullaccess?       <empty>         volatile(2)     active(1)
// ?fullaccess?     ?fullaccess?       <empty>         volatile(2)     active(1)

  /*
     * Typical data structure for a row entry 
     */
typedef struct vacmSecurityToGroupTable_entry {
    /*
     * Index values 
     */
    long            vacmSecurityModel;
    char            vacmSecurityName[STRLEN_CHAR_ACCESS];
    size_t          vacmSecurityName_len;

    /*
     * Column values 
     */
    char            vacmGroupName[STRLEN_CHAR_ACCESS];
    size_t          vacmGroupName_len;
    char            old_vacmGroupName[STRLEN_CHAR_ACCESS];
    size_t          old_vacmGroupName_len;
    long            vacmSecurityToGroupStorageType;
    long            old_vacmSecurityToGroupStorageType;
    long            vacmSecurityToGroupStatus;

    int             valid;
}vacmSecurityToGroupTable_t;


//example how the date will look like 
// SecurityModel* SecurityName*  GroupName        SecurityToGroup SecurityToGroup
//                                                StorageType     Status
//                                                                                OCHD2
// SNMPV1(1)      ?@STBconfig_0? ?@STBconfigV1_0? volatile(2)     active(1)
// SNMPV2c(1)     ?@STBconfig_0? ?@STBconfigV2_0? volatile(2)     active(1)
// SNMPV1(1)      ?@STBconfig_1? ?@STBconfigV1_1? volatile(2)     active(1)
// SNMPV2c(1)     ?@STBconfig_1? ?@STBconfigV2_1? volatile(2)     active(1)

  /*
     * Typical data structure for a row entry 
     */
typedef struct vacmViewTreeFamilyTable_entry {
    /*
     * Index values 
     */
    char            vacmViewTreeFamilyViewName[STRLEN_CHAR_ACCESS];
    size_t          vacmViewTreeFamilyViewName_len;
    char             vacmViewTreeFamilySubtree[STRLEN_CHAR_ACCESS];
    size_t          vacmViewTreeFamilySubtree_len;

    /*
     * Column values 
     */
    char            vacmViewTreeFamilyMask[STRLEN_CHAR_ACCESS];
    size_t          vacmViewTreeFamilyMask_len;
    char            old_vacmViewTreeFamilyMask[STRLEN_CHAR_ACCESS];
    size_t          old_vacmViewTreeFamilyMask_len;
    long            vacmViewTreeFamilyType;
    long            old_vacmViewTreeFamilyType;
    long            vacmViewTreeFamilyStorageType;
    long            old_vacmViewTreeFamilyStorageType;
    long            vacmViewTreeFamilyStatus;

    int             valid;
}vacmViewTreeFamilyTable;

/*                                                                               
Verify that table contains 4 rows containing following data:
                                                                                 
 ViewName*     Subtree*     Mask        Type         StorageType Status          
 ?readonly?    .snmpV2      <empty> or  excluded(2)  volatile(2) active(1)
                                                                                 REQ2521
               .1.3.6.1.6   0xF1
                                                                                 REQ2571
 ?fullaccess?  .snmpV2      <empty>     included(1)  volatile(2) active(1) OCHD2
               .1.3.6.1.6
                                                                                 REQ2572
 ?readonly?    .iso.org.dod <empty>     included(1)  volatile(2) active(1)
               .1.3.6
 ?fullaccess?  .iso.org.dod <empty>     included(1)  volatile(2) active(1)
               .1.3.6
*/



  

#ifdef __cplusplus
extern "C" {
#endif

void snmpvacmViewTreeTableEventhandling(char *SnmpViewF); //53.4 Access view type tag
void snmpvacmSecurityToGroupEventhandling(vacmSecurityToGroupTable_t *SnmpStgt); //53.3 Access view type tag
void snmpV1V2CommunityTableEventhandling(int iConfig, char * strPrefix, char * strCommunity, bool bIsPermanent = false);
void snmpClearCommunityTableEvents();
void vacmSecurityToGroupTableEventhandling(int tlvconfNlist) ;
void snmpvacmAccessTableEventhandling(char *SnmpVacm); //53.3 Access view type tag
void vacmAccessTYPETableEventhandling(char * valueofTag );
void vacmAccessNAMETableEventhandling(char * valueofTag/*53.4*/ );
void vacmViewTreeFamilyTableEventhandling_viewname(char * valueofTag );
void vacmViewTreeFamilyTableEventhandling_oidsubtree(char * valueofTag );
void vacmViewTreeFamilyTableEventhandling_submaxId(char *valueofTag  );
void vacmViewTreeFamilyTableEventhandling_type(char * valueofTag );  //vlSnmpProcessTlv217Field (ppParseBuf, 

#ifdef __cplusplus
}
#endif
/*
     * Typical data structure for a row entry 
     */

//TLV 217 get data

//typedef struct tvlparsegetdata{


// char TransportAddressAccess[20][STRLEN_CHAR_ACCESS];
// char TransportAddressMask[20][STRLEN_CHAR_ACCESS];
// char AccessViewType[20][STRLEN_CHAR_ACCESS];
// char AccessViewName[20][STRLEN_CHAR_ACCESS];  //53.4
// char SNMPv3_AccessViewConfig[20][STRLEN_CHAR_ACCESS];  
// char AccessViewSubtree[20][STRLEN_CHAR_ACCESS];
// char AccessViewMask[20][STRLEN_CHAR_ACCESS];
// char AccessViewType[20][STRLEN_CHAR_ACCESS];

//} tvlparsegetdata_t;

#endif //SNMP_ACCESS_CONTROL


