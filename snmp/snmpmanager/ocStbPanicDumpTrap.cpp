/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.notify.conf 10110 2004-04-15 12:29:19Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "rdk_debug.h"
#include "ocStbPanicDumpTrap.h"

static oid  snmptrap_oid[] = { 1, 3, 6, 1, 6, 3, 1, 1, 4, 1, 0 };
int send_ocStbPanicDumpTrap_trap()
{
    /*For Every 30 min the trap_notification_bySubAgent() will be called and if the g_EventCount is non-zero , traps will be trigger to the specified Destionation/Head-end )*/
    /*snmp_alarm_register(30,     // seconds 
                        SA_REPEAT,      // repeat (every 30 seconds)
                        trap_notification_bySubAgent,      // our callback
                        NULL    // no callback data needed
                       );*/
    return 1;
}
extern int g_EventCount;
extern char g_DumpFIlePath[255];
void
  trap_notification_bySubAgent(unsigned int clientreg, void *clientarg)
{
  /*Based on the Event Count we will send the traps "g_EventCount" */
    RDK_LOG(RDK_LOG_DEBUG, "LOG.RDK.SNMP", "\n ::: ----BEFOR the g_Event Count is zero A notification/trap was Trigger to the Head-End/Specified Destination ---- :::\n");
  while(g_EventCount)
  {
    netsnmp_variable_list *var_list = NULL;
    oid             ocStbPanicDumpTrap_oid[] =
        { 1, 3, 6, 1, 4, 1, 4491, 2, 3, 1, 0, 1 };
    oid             ocStbHostDumpFilePath_oid[] =
        { 1, 3, 6, 1, 4, 1, 4491, 2, 3, 1, 1, 4, 5, 4, 4, 0 };

    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
                              snmptrap_oid, OID_LENGTH(snmptrap_oid),
                              ASN_OBJECT_ID,
                              ( u_char*)ocStbPanicDumpTrap_oid,
                              sizeof(oid)*(sizeof(ocStbPanicDumpTrap_oid)));

    /*
     * Add any objects from the trap definition
     */
    snmp_varlist_add_variable(&var_list,
                              ocStbHostDumpFilePath_oid,
                              OID_LENGTH(ocStbHostDumpFilePath_oid),
                              ASN_OCTET_STR, (u_char*)g_DumpFIlePath
                              /*
                               * Set an appropriate value for ocStbHostDumpFilePath
                               */
                                      , strlen(g_DumpFIlePath));

    /*
     * Add any extra (optional) objects here
     */

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    RDK_LOG(RDK_LOG_DEBUG, "LOG.RDK.SNMP", "\n ::: ----BEFOR the g_Event Count non- zero A notification/trap was Trigger to the Head-End/Specified Destination ---- :::\n");
    send_v2trap(var_list);
    snmp_free_varbind(var_list);
    g_EventCount--;
  }
   // return SNMP_ERR_NOERROR;
}
