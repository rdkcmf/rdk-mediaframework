/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
 * @defgroup VivCert_MIB Vividlogic MIB Requests
 * @ingroup SNMP_MGR
 * @ingroup VivCert_MIB
 * @{
 */

/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

/**
 * @file This file deals with the initialization of VividlogiccertificationTable
 * and handling its requests.
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "ocStbHostMibModule.h"
#include "vividlogicmib.h"
#include "SnmpIORM.h"
#include "vl_ocStbHost_GetData.h"

/**
 * @brief This function is used to start the initialization of all vivid
 * logic mib certification tables.
 *
 * @return None
 */
void
init_vividlogicmib(void)
{
    /*
     * here we initialize all the tables we're planning on supporting
     */
    initialize_table_VividlogiccertificationTable();
}

/**
 * @brief This function is used to initialize the Vivid logic certification Tables.
 * It creates the table, registers snmp handlers and updates the cache with helpers
 * like free, load, etc.
 *
 * @return None
 */
void
initialize_table_VividlogiccertificationTable(void)
{
    static oid      VividlogiccertificationTable_oid[] =
        { 1, 3, 6, 1, 4, 1, 31800, 1, 1, 1 };
    size_t          VividlogiccertificationTable_oid_len =
        OID_LENGTH(VividlogiccertificationTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("VividlogiccertificationTable",
                                            VividlogiccertificationTable_handler,
                                            VividlogiccertificationTable_oid,
                                            VividlogiccertificationTable_oid_len,
                                            HANDLER_CAN_RONLY);

    table_data =
        netsnmp_tdata_create_table("VividlogiccertificationTable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info, ASN_UNSIGNED,  /* index: VividlogicCEFInterfaceIndex */
                                     0);

    table_info->min_column = COLUMN_VIVIDLOGICCERTFULLINFO;
    table_info->max_column = COLUMN_VIVIDLOGICCERTFULLINFO;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(VIVIDLOGICCERTIFICATIONTABLE_TIMEOUT,
                                 VividlogiccertificationTable_load,
                                 VividlogiccertificationTable_free,
                                 VividlogiccertificationTable_oid,
                                 VividlogiccertificationTable_oid_len);
        cache->magic = (void *) table_data;
    cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
     NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
     NETSNMP_CACHE_DONT_AUTO_RELEASE;
    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "VividlogiccertificationTable");

        /*
         * Initialise the contents of the table here
         */
         if(0 == VividlogiccertificationTable_load(cache, table_data))
    {
            //vl_ocStbHostAVInterfaceTable_getdata"
      SNMP_DEBUGPRINT(" ERROR:: Not ye Ieee1394certificationTable_load table initialise here \n");
    }

}

/**
 * @brief This function is used to initialize the content of certification Table.
 * It updates the table info.
 *
 * @param[in] cache Struct pointer as cache where certification table is getting updated..
 * @param[out] vmagic Void pointer having address of certification table, where
 * latest data has to be updated.
 *
 * @return Returns 1 for success and 0 for failed condition.
 */
int
    VividlogiccertificationTable_load(netsnmp_cache * cache,
                                      void *vmagic) {
    netsnmp_tdata * table = (netsnmp_tdata *) vmagic;

     SNMP_DEBUGPRINT("..........VividlogiccertificationTable....Start .table initialise here ............\n");
    if( GETDATA_FAILED ==  vl_VividlogiccertificationTable_getdata(table))
     {
         SNMP_DEBUGPRINT(" ERROR:: Not ye VividlogiccertificationTable table initialise here \n");
         return 0;
     }
    SNMP_DEBUGPRINT("........End of ..VividlogiccertificationTable....initialise ...........\n");
     return 1;

}

/**
 * @brief This function is used to free the table. It deletes all rows and data
 * from the table.
 *
 * @param[in] cache Struct pointer for cache
 * @param[out] vmagic Void pointer to contain address of netsnmp table.
 *
 * @return None
 */
void
  VividlogiccertificationTable_free(netsnmp_cache * cache,
                                      void *vmagic) {
    netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
/*    netsnmp_tdata_row *this;

    while           ((this = netsnmp_tdata_get_first_row(table))) {
        netsnmp_tdata_remove_and_delete_row(table, this);
}*/
}

/**
 * @brief This function is used to handle the requests for VividlogiccertificationTable
 * table.
 *
 * @param[in] handler Struct pointer for request handlers.
 * @param[in] reginfo Handler registration pointer.
 * @param[in] reqinfo Struct pointer of request info containing modes.
 * @param[in] requests Request struct pointer, in linked list.
 *
 * @retval SNMP_ERR_NOERROR Returns by default, as success condition.
 */
int
   VividlogiccertificationTable_handler(netsnmp_mib_handler *handler,
                                         netsnmp_handler_registration
                                         *reginfo,
                                         netsnmp_agent_request_info
                                         *reqinfo,
                                         netsnmp_request_info *requests) {

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct VividlogiccertificationTable_entry *table_entry;
    int             ret;


    vl_row = NULL;
    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request = requests; request; request = request->next) {
            //table_entry = (struct VividlogiccertificationTable_entry *)                netsnmp_tdata_extract_entry(request);

           /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(VividlogiccertificationTable_entry);

            switch (table_info->colnum) {
            case COLUMN_VIVIDLOGICCERTFULLINFO:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         VividlogicCertFullInfo,
                                         table_entry->
                                         VividlogicCertFullInfo_len);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

    }
    return SNMP_ERR_NOERROR;
}

/** @} */
