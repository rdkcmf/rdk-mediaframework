/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "snmpTargetParamsTable.h"
#include "snmpAccessInclude.h"
#include "vlMutex.h"
#include "Tlvevent.h"
#include "cardManagerIf.h"
#include "SnmpIORM.h"
#include "vl_ocStbHost_GetData.h"

static vlMutex & vlg_TlvEventDblock = TlvConfig::vlGetTlvEventDbLock();

#ifdef AUTO_LOCKING
static void auto_lock(rmf_osal_Mutex *mutex)
{

               if(!mutex) 
			   	RDK_LOG(RDK_LOG_ERROR, "LOG.RDK.POD","\n\n\n\n %s: Mutex is NULL \n\n\n", __FUNCTION__);
		 rmf_osal_mutexAcquire(*mutex);
}

static void auto_unlock(rmf_osal_Mutex *mutex)
{
         if(mutex)
		 rmf_osal_mutexRelease(*mutex);
}
#endif
//#undef SNMP_DEBUGPRINT
//#define SNMP_DEBUGPRINT(a,args...) fprintf( stderr, "%s:%d:"#a"\n", __FUNCTION__,__LINE__, ##args)
/** Initializes the snmpTargetParamsTable module */
/*void
init_snmpTargetParamsTable(void)
{
  */  /*
     * here we initialize all the tables we're planning on supporting
     */
//     initialize_table_snmpTargetParamsTable();
// }

//# Determine the first/last column names

/** Initialize the snmpTargetParamsTable table by defining its contents and how it's structured */
void
initialize_table_snmpTargetParamsTable(void)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    static oid      snmpTargetParamsTable_oid[] =
        { 1, 3, 6, 1, 6, 3, 12, 1, 3 };
    size_t          snmpTargetParamsTable_oid_len =
        OID_LENGTH(snmpTargetParamsTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("snmpTargetParamsTable",
                                            snmpTargetParamsTable_handler,
                                            snmpTargetParamsTable_oid,
                                            snmpTargetParamsTable_oid_len,
                                            HANDLER_CAN_RWRITE);

    table_data = netsnmp_tdata_create_table("snmpTargetParamsTable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info,
                           ASN_PRIV_IMPLIED_OCTET_STR/*ASN_OCTET_STR*/, /* index: snmpTargetParamsName */
                                     0);

    table_info->min_column = COLUMN_SNMPTARGETPARAMSMPMODEL;
    table_info->max_column = COLUMN_SNMPTARGETPARAMSROWSTATUS;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(SNMPTARGETPARAMSTABLE_TIMEOUT,
                                 snmpTargetParamsTable_load,
                                 snmpTargetParamsTable_free,
                                 snmpTargetParamsTable_oid,
                                 snmpTargetParamsTable_oid_len);
    cache->magic = (void *) table_data;
    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "snmpTargetParamsTable");
    cache->magic = (void *) table_data;
    cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
            NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
            NETSNMP_CACHE_DONT_AUTO_RELEASE;
    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "snmpTargetParamsTable");

    /* Initialise the contents of the table here */
    if(0 == snmpTargetParamsTable_load(cache,table_data))
    {
        //snmpTargetParamsTable_load"
        SNMP_DEBUGPRINT(" ERROR:: Not yet table initialise here \n");
    }
    //auto_unlock(&vlg_TlvEventDblock);
}


/*
 * create a new row in the table
 */
netsnmp_tdata_row *snmpTargetParamsTable_createEntry(netsnmp_tdata *
                                                     table_data,
                                                     char
                                                     *snmpTargetParamsName,
                                                     size_t
                                                     snmpTargetParamsName_len)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    struct snmpTargetParamsTable_entry *entry;
    netsnmp_tdata_row *row;

          entry = SNMP_MALLOC_TYPEDEF(struct snmpTargetParamsTable_entry);
    if              (!entry){
		          //auto_unlock(&vlg_TlvEventDblock);
                        return NULL;
    	}

                    row = netsnmp_tdata_create_row();
    if              (!row) {
        SNMP_FREE(entry);
        //auto_unlock(&vlg_TlvEventDblock);
        return NULL;
    }
    row->           data = entry;
    memcpy(entry->snmpTargetParamsName, snmpTargetParamsName,
           snmpTargetParamsName_len);
    entry->snmpTargetParamsName_len = snmpTargetParamsName_len;
    netsnmp_tdata_row_add_index(row, ASN_OCTET_STR,
                                entry->snmpTargetParamsName,
                                snmpTargetParamsName_len);
    netsnmp_tdata_add_row(table_data, row);
    //auto_unlock(&vlg_TlvEventDblock);
    return row;
}

/*
 * remove a row from the table
 */
void
  snmpTargetParamsTable_removeEntry(netsnmp_tdata * table_data,
                                      netsnmp_tdata_row * row)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    struct snmpTargetParamsTable_entry *entry;

    if (!row){
	 //auto_unlock(&vlg_TlvEventDblock);
        return;                 /* Nothing to remove */
    	}
    entry = (struct snmpTargetParamsTable_entry *)
        netsnmp_tdata_remove_and_delete_row(table_data, row);
    if (entry)
        SNMP_FREE(entry);       /* XXX - release any other internal resources */
	//auto_unlock(&vlg_TlvEventDblock);
}

#if 1
vector<v3NotificationReceiver_t> vlg_snmp_agent_NotificationReceiverList;


#ifdef __cplusplus
extern "C" {
#endif
void snmpClearTargetParamsTableEvents()
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    vlg_snmp_agent_NotificationReceiverList.clear();
    //auto_unlock(&vlg_TlvEventDblock);
}

int static iszTadd;
void snmpTargetParamsTableEventhandling(struct v3NotificationReceiver_t & SnmpAddt)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    vlg_snmp_agent_NotificationReceiverList.push_back(SnmpAddt);
  //auto_unlock(&vlg_TlvEventDblock);
}
#ifdef __cplusplus
}
#endif
#endif //if 0
/*
 * Example cache handling - set up table_data list from a suitable file
 */
int
snmpTargetParamsTable_load(netsnmp_cache * cache, void *vmagic)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *row;

    SNMP_DEBUGPRINT("\n snmpTargetParamsTable_load :: Start snmpTargetParamsTable_load   :::  \n");
    bool replace_table = false;
    int count = 0;
    if(netsnmp_tdata_row_first(table_data))
    {
        replace_table = true;
    }

    for(count = 0; count < vlg_snmp_agent_NotificationReceiverList.size(); count++)
    {
        if(replace_table)
        {
            replace_table = false;
            Table_free(table_data);
        }
        snmpTargetParamsTable_createEntry_allData(table_data, vlg_snmp_agent_NotificationReceiverList[count], count);
    }
    if(vlg_snmp_agent_NotificationReceiverList.size() == 0)
    {
         Table_free(table_data);
         v3NotificationReceiver_t receiver;
         snmpTargetParamsTable_createEntry_allData(table_data, receiver, count);
    }

    SNMP_DEBUGPRINT("\n snmpTargetParamsTable_load :: End snmpTargetParamsTable_load   :::  \n");
    //auto_unlock(&vlg_TlvEventDblock);
    return 1;
}

int snmpTargetParamsTable_createEntry_allData(netsnmp_tdata * table_data, struct v3NotificationReceiver_t & rReceiver, int count)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    int i = 0;
    SNMP_DEBUGPRINT("\n snmpTargetParamsTable_createEntry_allData ::Start \n");
    struct snmpTargetParamsTable_entry *entry;
    netsnmp_tdata_row *row;
    entry = SNMP_MALLOC_TYPEDEF(struct snmpTargetParamsTable_entry);
    if (!entry){
    //auto_unlock(&vlg_TlvEventDblock);
    return 0;
    	}

    row = netsnmp_tdata_create_row();
    if (!row) {
    SNMP_FREE(entry);
    //auto_unlock(&vlg_TlvEventDblock);
    return 0;
    }
    row->data = entry;
    /*
     * Index values
     */

    char TargetParamsName[STRLEN_CHAR_ACCESS];
    char TargetParamsSecurityName[STRLEN_CHAR_ACCESS];

    const char * pszTargetParamsSecurityName = "";

    switch(rReceiver.eV3TrapType)
    {
        case VL_TLV_217_NOTIFY_TRAP_V1:
        case VL_TLV_217_NOTIFY_TRAP_V2C:
        case VL_TLV_217_NOTIFY_INFORM_V2C:
        {
            pszTargetParamsSecurityName = "@STBnotifyconfig";
        }
        break;

        case VL_TLV_217_NOTIFY_TRAP_V2C_IN_V3:
        case VL_TLV_217_NOTIFY_INFORM_V2C_IN_V3:
        {
            if(rReceiver.v3securityName.size() > 0)
            {
                pszTargetParamsSecurityName = rReceiver.v3securityName.c_str();
            }
            else
            {
                pszTargetParamsSecurityName = "@STBnotifyconfig";
            }
        }
        break;

        default:
        {
            // do nothing
        }
        break;
    }

    snprintf(TargetParamsName, sizeof(TargetParamsName), "@STBnotifyconfig_%d", count);
    memset (TargetParamsSecurityName, '\0', sizeof(TargetParamsSecurityName) );
    strncpy(TargetParamsSecurityName,pszTargetParamsSecurityName,sizeof(TargetParamsSecurityName)-1 );

    entry->snmpTargetParamsName_len = strlen(TargetParamsName);
    memcpy(entry->snmpTargetParamsName,TargetParamsName, entry->snmpTargetParamsName_len); //@STBconfigTag_0_0

    entry->snmpTargetParamsSecurityName_len = strlen(TargetParamsSecurityName);
    memcpy(entry->snmpTargetParamsSecurityName, TargetParamsSecurityName, entry->snmpTargetParamsSecurityName_len);     //?@STBconfigTag_0?


    switch(rReceiver.eV3TrapType)
    {
        case VL_TLV_217_NOTIFY_TRAP_V1:
        {
            entry->snmpTargetParamsMPModel = 0;
            entry->snmpTargetParamsSecurityModel = 1;
        }
        break;

        case VL_TLV_217_NOTIFY_TRAP_V2C:
        case VL_TLV_217_NOTIFY_INFORM_V2C:
        {
            entry->snmpTargetParamsMPModel = 1;
            entry->snmpTargetParamsSecurityModel = 2;
        }
        break;

        case VL_TLV_217_NOTIFY_TRAP_V2C_IN_V3:
        case VL_TLV_217_NOTIFY_INFORM_V2C_IN_V3:
        {
            entry->snmpTargetParamsMPModel = 3;
            entry->snmpTargetParamsSecurityModel = 3;
        }
        break;

        default:
        {
            entry->snmpTargetParamsMPModel = 0;
        }
        break;
    }

    switch(rReceiver.eV3TrapType)
    {
        case VL_TLV_217_NOTIFY_TRAP_V1:
        case VL_TLV_217_NOTIFY_TRAP_V2C:
        case VL_TLV_217_NOTIFY_INFORM_V2C:
        {
            entry->snmpTargetParamsStorageType = 2;      //volatile(2)
            entry->snmpTargetParamsRowStatus = 1 ;       //active(1)
            entry->snmpTargetParamsSecurityLevel = 1;    //noAuthNoPriv(1)
        }
        break;

        case VL_TLV_217_NOTIFY_TRAP_V2C_IN_V3:
        case VL_TLV_217_NOTIFY_INFORM_V2C_IN_V3:
        {
            entry->snmpTargetParamsStorageType = 2;      //volatile(2)
            entry->snmpTargetParamsRowStatus = 1 ;       //active(1)
            entry->snmpTargetParamsSecurityLevel = 3;    //authPriv(3)
        }
        break;

        default:
        {
            entry->snmpTargetParamsStorageType = 1;      //other(1)
            entry->snmpTargetParamsRowStatus = 2 ;       //notInService(2)
            entry->snmpTargetParamsSecurityLevel = 1;    //noAuthNoPriv(1)
        }
        break;
    }

    netsnmp_tdata_row_add_index(row, ASN_PRIV_IMPLIED_OCTET_STR, // was ASN_OCTET_STR,
                                entry->snmpTargetParamsName,
                                entry->snmpTargetParamsName_len);

    netsnmp_tdata_add_row(table_data, row);
    SNMP_DEBUGPRINT("\n snmpTargetParamsTable_createEntry_allData ::END \n");
    //auto_unlock(&vlg_TlvEventDblock);
    return 1;

}


void
   snmpTargetParamsTable_free(netsnmp_cache * cache, void *vmagic)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
    /*netsnmp_tdata_row *this;

    while           ((this = netsnmp_tdata_get_first_row(table))) {
        netsnmp_tdata_remove_and_delete_row(table, this);
}*/
//auto_unlock(&vlg_TlvEventDblock);
}
/** handles requests for the snmpTargetParamsTable table */
int
snmpTargetParamsTable_handler(netsnmp_mib_handler *handler,
                                  netsnmp_handler_registration *reginfo,
                                  netsnmp_agent_request_info *reqinfo,
                                  netsnmp_request_info *requests)
{VL_AUTO_LOCK(vlg_TlvEventDblock);

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct snmpTargetParamsTable_entry *table_entry;
    int             ret;
    vl_row = NULL;

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request = requests; request; request = request->next) {
            /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(snmpTargetParamsTable_entry);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETPARAMSMPMODEL:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           snmpTargetParamsMPModel);
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYMODEL:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           snmpTargetParamsSecurityModel);
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYNAME:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         snmpTargetParamsSecurityName,
                                         table_entry->
                                         snmpTargetParamsSecurityName_len);
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYLEVEL:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           snmpTargetParamsSecurityLevel);
                break;
            case COLUMN_SNMPTARGETPARAMSSTORAGETYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           snmpTargetParamsStorageType);
                break;
            case COLUMN_SNMPTARGETPARAMSROWSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           snmpTargetParamsRowStatus);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpTargetParamsTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETPARAMSMPMODEL:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
			//auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYMODEL:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
			//auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYNAME:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size'
                 */
                ret =
                    netsnmp_check_vb_type_and_max_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->
                                                              snmpTargetParamsSecurityName));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
			//auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYLEVEL:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
			//auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETPARAMSSTORAGETYPE:
                /*
                 * or possibly 'netsnmp_check_vb_int_range'
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
			//auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SNMPTARGETPARAMSROWSTATUS:
                ret = netsnmp_check_vb_rowstatus(request->requestvb,
                                                 (table_entry ? RS_ACTIVE :
                                                  RS_NONEXISTENT));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
			//auto_unlock(&vlg_TlvEventDblock);
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_ERR_NOTWRITABLE);
		  //auto_unlock(&vlg_TlvEventDblock);
                return SNMP_ERR_NOERROR;
            }
        }
        break;

    case MODE_SET_RESERVE2:
        for (request = requests; request; request = request->next) {
            netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETPARAMSROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    table_row =
                            snmpTargetParamsTable_createEntry(table_data,(char*)
                                                          table_info->
                                                          indexes->val.
                                                                  string,
                                                          table_info->
                                                          indexes->
                                                          val_len);
                    if (table_row) {
                        netsnmp_insert_tdata_row(request, table_row);
                    } else {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_RESOURCEUNAVAILABLE);
			   //auto_unlock(&vlg_TlvEventDblock);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_FREE:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpTargetParamsTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETPARAMSROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        snmpTargetParamsTable_removeEntry(table_data,
                                                          table_row);
                    }
                }
            }
        }
        break;

    case MODE_SET_ACTION:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpTargetParamsTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETPARAMSMPMODEL:
                table_entry->old_snmpTargetParamsMPModel =
                    table_entry->snmpTargetParamsMPModel;
                table_entry->snmpTargetParamsMPModel =
                    *request->requestvb->val.integer;
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYMODEL:
                table_entry->old_snmpTargetParamsSecurityModel =
                    table_entry->snmpTargetParamsSecurityModel;
                table_entry->snmpTargetParamsSecurityModel =
                    *request->requestvb->val.integer;
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYNAME:
                memcpy(table_entry->old_snmpTargetParamsSecurityName,
                       table_entry->snmpTargetParamsSecurityName,
                       sizeof(table_entry->snmpTargetParamsSecurityName));
                table_entry->old_snmpTargetParamsSecurityName_len =
                    table_entry->snmpTargetParamsSecurityName_len;
                memset(table_entry->snmpTargetParamsSecurityName, 0,
                       sizeof(table_entry->snmpTargetParamsSecurityName));
                memcpy(table_entry->snmpTargetParamsSecurityName,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->snmpTargetParamsSecurityName_len =
                    request->requestvb->val_len;
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYLEVEL:
                table_entry->old_snmpTargetParamsSecurityLevel =
                    table_entry->snmpTargetParamsSecurityLevel;
                table_entry->snmpTargetParamsSecurityLevel =
                    *request->requestvb->val.integer;
                break;
            case COLUMN_SNMPTARGETPARAMSSTORAGETYPE:
                table_entry->old_snmpTargetParamsStorageType =
                    table_entry->snmpTargetParamsStorageType;
                table_entry->snmpTargetParamsStorageType =
                    *request->requestvb->val.integer;
                break;
            }
        }
        /*
         * Check the internal consistency of an active row
         */
        for (request = requests; request; request = request->next) {            
                netsnmp_tdata_extract_entry(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETPARAMSROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_ACTIVE:
                case RS_CREATEANDGO:
                    if ( *request->requestvb->val.integer !=RS_ACTIVE || *request->requestvb->val.integer != RS_CREATEANDGO ) {
                        netsnmp_set_request_error(reqinfo, request,
                                                  SNMP_ERR_INCONSISTENTVALUE);
			   //auto_unlock(&vlg_TlvEventDblock);
                        return SNMP_ERR_NOERROR;
                    }
                }
            }
        }
        break;

    case MODE_SET_UNDO:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpTargetParamsTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETPARAMSMPMODEL:
                table_entry->snmpTargetParamsMPModel =
                    table_entry->old_snmpTargetParamsMPModel;
                table_entry->old_snmpTargetParamsMPModel = 0;
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYMODEL:
                table_entry->snmpTargetParamsSecurityModel =
                    table_entry->old_snmpTargetParamsSecurityModel;
                table_entry->old_snmpTargetParamsSecurityModel = 0;
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYNAME:
                memcpy(table_entry->snmpTargetParamsSecurityName,
                       table_entry->old_snmpTargetParamsSecurityName,
                       sizeof(table_entry->snmpTargetParamsSecurityName));
                memset(table_entry->old_snmpTargetParamsSecurityName, 0,
                       sizeof(table_entry->snmpTargetParamsSecurityName));
                table_entry->snmpTargetParamsSecurityName_len =
                    table_entry->old_snmpTargetParamsSecurityName_len;
                break;
            case COLUMN_SNMPTARGETPARAMSSECURITYLEVEL:
                table_entry->snmpTargetParamsSecurityLevel =
                    table_entry->old_snmpTargetParamsSecurityLevel;
                table_entry->old_snmpTargetParamsSecurityLevel = 0;
                break;
            case COLUMN_SNMPTARGETPARAMSSTORAGETYPE:
                table_entry->snmpTargetParamsStorageType =
                    table_entry->old_snmpTargetParamsStorageType;
                table_entry->old_snmpTargetParamsStorageType = 0;
                break;
            case COLUMN_SNMPTARGETPARAMSROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                case RS_CREATEANDWAIT:
                    if (table_entry && !table_entry->valid) {
                        snmpTargetParamsTable_removeEntry(table_data,
                                                          table_row);
                    }
                }
                break;
            }
        }
        break;

    case MODE_SET_COMMIT:
        for (request = requests; request; request = request->next) {
            table_entry = (struct snmpTargetParamsTable_entry *)
                netsnmp_tdata_extract_entry(request);
            table_row = netsnmp_tdata_extract_row(request);
            table_data = netsnmp_tdata_extract_table(request);
            table_info = netsnmp_extract_table_info(request);

            switch (table_info->colnum) {
            case COLUMN_SNMPTARGETPARAMSROWSTATUS:
                switch (*request->requestvb->val.integer) {
                case RS_CREATEANDGO:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_ACTIVE:
                    table_entry->snmpTargetParamsRowStatus = RS_ACTIVE;
                    break;

                case RS_CREATEANDWAIT:
                    table_entry->valid = 1;
                    /*
                     * Fall-through
                     */
                case RS_NOTINSERVICE:
                    table_entry->snmpTargetParamsRowStatus =
                        RS_NOTINSERVICE;
                    break;

                case RS_DESTROY:
                    snmpTargetParamsTable_removeEntry(table_data,
                                                      table_row);
                }
            }
        }
        break;
    }
    //auto_unlock(&vlg_TlvEventDblock);
    return SNMP_ERR_NOERROR;
}
