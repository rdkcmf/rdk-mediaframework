/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 17695 2009-07-21 12:22:18Z dts12 $
 */


#include "ocStbHostMibModule.h"
#include "vl_ocStbHost_GetData.h"

/** Initialize the ocStbHostDVIHDMIAvailableVideoFormatTable table by defining its contents and how it's structured */
void
initialize_table_ocStbHostDVIHDMIAvailableVideoFormatTable(void)
{
    static oid ocStbHostDVIHDMIAvailableVideoFormatTable_oid[] = {1,3,6,1,4,1,4491,2,3,1,1,1,2,4,2};
    size_t ocStbHostDVIHDMIAvailableVideoFormatTable_oid_len   = OID_LENGTH(ocStbHostDVIHDMIAvailableVideoFormatTable_oid);
    netsnmp_handler_registration    *reg;
    netsnmp_tdata                   *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg = netsnmp_create_handler_registration(
              "ocStbHostDVIHDMIAvailableVideoFormatTable",     ocStbHostDVIHDMIAvailableVideoFormatTable_handler,
              ocStbHostDVIHDMIAvailableVideoFormatTable_oid, ocStbHostDVIHDMIAvailableVideoFormatTable_oid_len,
              HANDLER_CAN_RONLY
              );

    table_data = netsnmp_tdata_create_table("ocStbHostDVIHDMIAvailableVideoFormatTable", 0 );
    table_info = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    netsnmp_table_helper_add_indexes(table_info,
                           ASN_INTEGER,  /* index: ocStbHostDVIHDMIAvailableVideoFormatIndex */
                           0);

    table_info->min_column = COLUMN_OCSTBHOSTDVIHDMIAVAILABLEVIDEOFORMAT;
    table_info->max_column = COLUMN_OCSTBHOSTDVIHDMIAVAILABLEVIDEOFORMAT;
    
    netsnmp_tdata_register( reg, table_data, table_info );
    cache =  netsnmp_cache_create(OCSTBHOSTDVIHDMIAVAILABLE_TIMEOUT,
                                 ocStbHostDVIHDMIAvailableVideoFormatTable_load,
                                 ocStbHostDVIHDMIAvailableVideoFormatTable_free,
                                 ocStbHostDVIHDMIAvailableVideoFormatTable_oid,
                                 ocStbHostDVIHDMIAvailableVideoFormatTable_oid_len);
    cache->magic = (void *) table_data;
    netsnmp_inject_handler_before(reg,netsnmp_cache_handler_get(cache), "ocStbHostDVIHDMIAvailableVideoFormatTable");

     /*
        * Initialise the contents of the table here
     */
    if(0 == ocStbHostDVIHDMIAvailableVideoFormatTable_load(cache, table_data))
    {
            //vl_ocStbHostAVInterfaceTable_getdata"
        printf(" ERROR:: Not ye ocStbHostDVIHDMIAvailableVideoFormatTable_load table initialise here \n");
    }

    
}

/* create a new row in the table */
// netsnmp_tdata_row *
// ocStbHostDVIHDMIAvailableVideoFormatTable_createEntry(netsnmp_tdata *table_data
//                  , long  ocStbHostDVIHDMIAvailableVideoFormatIndex
//                 ) {
//     struct ocStbHostDVIHDMIAvailableVideoFormatTable_entry *entry;
//     netsnmp_tdata_row *row;
// 
//     entry = SNMP_MALLOC_TYPEDEF(struct ocStbHostDVIHDMIAvailableVideoFormatTable_entry);
//     if (!entry)
//         return NULL;
// 
//     row = netsnmp_tdata_create_row();
//     if (!row) {
//         SNMP_FREE(entry);
//         return NULL;
//     }
//     row->data = entry;
//     entry->ocStbHostDVIHDMIAvailableVideoFormatIndex = ocStbHostDVIHDMIAvailableVideoFormatIndex;
//     netsnmp_tdata_row_add_index( row, ASN_INTEGER,
//                                  &(entry->ocStbHostDVIHDMIAvailableVideoFormatIndex),
//                                  sizeof(entry->ocStbHostDVIHDMIAvailableVideoFormatIndex));
//     netsnmp_tdata_add_row( table_data, row );
//     return row;
// }
// 
// /* remove a row from the table */
// void
// ocStbHostDVIHDMIAvailableVideoFormatTable_removeEntry(netsnmp_tdata     *table_data, 
//                  netsnmp_tdata_row *row) {
//     struct ocStbHostDVIHDMIAvailableVideoFormatTable_entry *entry;
// 
//     if (!row)
//         return;    /* Nothing to remove */
//     entry = (struct ocStbHostDVIHDMIAvailableVideoFormatTable_entry *)
//         netsnmp_tdata_remove_and_delete_row( table_data, row );
//     if (entry)
//         SNMP_FREE( entry );   /* XXX - release any other internal resources */
// }
/*
 * Example cache handling - set up table_data list from a suitable file
 */
int
ocStbHostDVIHDMIAvailableVideoFormatTable_load(netsnmp_cache * cache,void *vmagic)
{
    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *row;

    //printf("...............Start  ocStbHostDVIHDMIAvailableVideoFormatTable ............\n");
    if(0 == vl_ocStbHostDVIHDMIAvailableVideoFormatTable_getdata(table_data))
    {

       // printf(" ERROR:: Not yet table initialise here \n");
    }

    //printf("................End  ocStbHostDVIHDMIAvailableVideoFormatTable ............\n");
        return 1;
    }

void
ocStbHostDVIHDMIAvailableVideoFormatTable_free(netsnmp_cache * cache, void *vmagic)
{
            netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
/*    netsnmp_tdata_row *this;

                    while           ((this = netsnmp_tdata_get_first_row(table))) {
                    netsnmp_tdata_remove_and_delete_row(table, this);}*/

}

/** handles requests for the ocStbHostDVIHDMIAvailableVideoFormatTable table */
int
ocStbHostDVIHDMIAvailableVideoFormatTable_handler(
    netsnmp_mib_handler               *handler,
    netsnmp_handler_registration      *reginfo,
    netsnmp_agent_request_info        *reqinfo,
    netsnmp_request_info              *requests) {

    netsnmp_request_info       *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata              *table_data;
    netsnmp_tdata_row          *table_row;
    struct ocStbHostDVIHDMIAvailableVideoFormatTable_entry          *table_entry;
    int                         ret;

    DEBUGMSGTL(("ocStbHostDVIHDMIAvailableVideoFormatTable:handler", "Processing request (%d)\n", reqinfo->mode));

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request=requests; request; request=request->next) {
            table_entry = (struct ocStbHostDVIHDMIAvailableVideoFormatTable_entry *)
                              netsnmp_tdata_extract_entry(request);
            table_info  =     netsnmp_extract_table_info( request);
    
            switch (table_info->colnum) {
            case COLUMN_OCSTBHOSTDVIHDMIAVAILABLEVIDEOFORMAT:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->ocStbHostDVIHDMIAvailableVideoFormat);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

    }
    return SNMP_ERR_NOERROR;
}
