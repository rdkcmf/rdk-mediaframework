/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/



/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "SnmpIORM.h"
#include "ocStbHostMibModule.h"
#include "vl_ocStbHost_GetData.h"
#include "rdk_debug.h"
//#include "vl_ocStbHost_GetData.h"
//#include "vlochd_OC_STB_HOST_MIB_Data.h"

// #define CHRMAX2 256
// #define MAX_IOD_LENGTH2 128
/** Initializes the ocStbHostAVInterfaceTable module */
// void
// init_ocStbHostAVInterfaceTable(void)
// {
//     /*
//      * here we initialize all the tables we're planning on supporting
//      */
//      SNMP_DEBUGPRINT("init_ocStbHostAVInterfaceTable \n.");
//     initialize_table_ocStbHostAVInterfaceTable();
// }

//# Determine the first/last column names

/** Initialize the ocStbHostAVInterfaceTable table by defining its contents and how it's structured */
 // netsnmp_tdata  *table_data;
void
initialize_table_ocStbHostAVInterfaceTable(void)
{

    static oid      ocStbHostAVInterfaceTable_oid[] =
        { 1, 3, 6, 1, 4, 1, 4491, 2, 3, 1, 1, 1, 2, 2 };

    size_t          ocStbHostAVInterfaceTable_oid_len =
        OID_LENGTH(ocStbHostAVInterfaceTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("ocStbHostAVInterfaceTable",
                                            ocStbHostAVInterfaceTable_handler,
                                            ocStbHostAVInterfaceTable_oid,
                                            ocStbHostAVInterfaceTable_oid_len,
                                            HANDLER_CAN_RONLY);

   // SNMP_DEBUGPRINT(" :: initialize_table_ocStbHostAVInterfaceTable table_data ::\n");
    table_data =
    netsnmp_tdata_create_table("ocStbHostAVInterfaceTable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info, ASN_UNSIGNED,  /* index: ocStbHostAVInterfaceIndex */
                                     0);

    table_info->min_column = COLUMN_OCSTBHOSTAVINTERFACETYPE;
    table_info->max_column = COLUMN_OCSTBHOSTAVINTERFACESTATUS;


   // SNMP_DEBUGPRINT("initialize_table_ocStbHostAVInterfaceTable Catch ...3......\n");
    netsnmp_tdata_register(reg, table_data, table_info);
   // SNMP_DEBUGPRINT("Before Catch .....2....");
    cache = netsnmp_cache_create(OCSTBHOSTAVINTERFACETABLE_TIMEOUT/*-1*/,
                                 ocStbHostAVInterfaceTable_load,
                                 ocStbHostAVInterfaceTable_free,
                                 ocStbHostAVInterfaceTable_oid,
                                 ocStbHostAVInterfaceTable_oid_len);
   //SNMP_DEBUGPRINT("Before Catch ....4.....\n");
        cache->magic = (void *) table_data;
   cache->flags = NETSNMP_CACHE_DONT_INVALIDATE_ON_SET |
NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD | NETSNMP_CACHE_DONT_FREE_EXPIRED |
NETSNMP_CACHE_DONT_AUTO_RELEASE;

   netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "ocStbHostAVInterfaceTable");



        /*
         * Initialise the contents of the table here
         */
//       netsnmp_cache_timer_start  (cache);
//       //starts the recurring cache_load callback
//       netsnmp_cache_timer_stop (cache);



      if(0 == ocStbHostAVInterfaceTable_load(cache,table_data))
    {
            //vl_ocStbHostAVInterfaceTable_getdata"
      SNMP_DEBUGPRINT(" ERROR:: Not yet table initialise here \n");
    }


}

/*
 * Example cache handling - set up table_data list from a suitable file
 */

/*
unsigned int netsnmp_cache_timer_start (netsnmp_cache *cache)
starts the recurring cache_load callback
void netsnmp_cache_timer_stop (netsnmp_cache *cache)
stops the recurring cache_load callback*/


int
ocStbHostAVInterfaceTable_load(netsnmp_cache * cache, void *vmagic) {


    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;

    netsnmp_tdata_row *row;
    //struct ocStbHostAVInterfaceTable_entry *this
     //cache->magic
    /**
     *vl_ocStbHostAVInterfaceTable_getdata module will  Initialise the contents of the table here
     */
       SNMP_DEBUGPRINT("................Start .ocStbHostAVInterfaceTable_load ............\n");

      // ocStbHostAVInterfaceTable_free(cache,table_data);


      if(0 == vl_ocStbHostAVInterfaceTable_getdata(table_data))
    {
            //vl_ocStbHostAVInterfaceTable_getdata"
      SNMP_DEBUGPRINT(" ERROR:: Not yet table initialise here \n");
    }

       SNMP_DEBUGPRINT("................END .ocStbHostAVInterfaceTable_load ............\n");
    return 1;
}


void
ocStbHostAVInterfaceTable_free(netsnmp_cache * cache, void *vmagic) {
    netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *temprow;
    SNMP_DEBUGPRINT("\n Free the initialised Table here \n ");
    //netsnmp_tdata_delete_table(table);

//      while((temprow = /*netsnmp_tdata_row_get*/netsnmp_tdata_row_first(table))) {
//          netsnmp_tdata_remove_and_delete_row(table, temprow);

//            }

}

/** handles requests for the ocStbHostAVInterfaceTable table */
int
ocStbHostAVInterfaceTable_handler(netsnmp_mib_handler *handler,
                                      netsnmp_handler_registration
                                      *reginfo,
                                      netsnmp_agent_request_info *reqinfo,
                                      netsnmp_request_info *requests) {

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct ocStbHostAVInterfaceTable_entry *table_entry;
    int             ret;
    vl_row = NULL;
    /*
      if(0 == vl_ocStbHostAVInterfaceTable_getdata(table_data))
    {
            //vl_ocStbHostAVInterfaceTable_getdata"
      SNMP_DEBUGPRINT(" ERROR:: Not yet table initialise here \n");
    }
       */

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    //SNMP_DEBUGPRINT("\n:::::: BEFORE THE MODE GET::::::\n");

    case MODE_GET:
        for (request = requests; request; request = request->next) {
            //table_entry = (struct ocStbHostAVInterfaceTable_entry *)                netsnmp_tdata_extract_entry(request);
            /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(ocStbHostAVInterfaceTable_entry);


            //SNMP_DEBUGPRINT("....ocStbHostAVInterfaceTable_handler:: INSIDE..MODE_GET: ............\n");
            switch (table_info->colnum) {
            case COLUMN_OCSTBHOSTAVINTERFACETYPE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                //temp1_oid[]= {1,3,6,1,2,1,49};
                snmp_set_var_typed_value(request->requestvb, ASN_OBJECT_ID,
                                         (u_char *) table_entry->
                                         ocStbHostAVInterfaceType,
                                         sizeof(oid)*table_entry->
                                         ocStbHostAVInterfaceType_len);
                 //SNMP_DEBUGPRINT("....COLUMN_OCSTBHOSTAVINTERFACETYPE:: ..MODE_GET: ............\n");
                break;
            case COLUMN_OCSTBHOSTAVINTERFACEDESC:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->
                                         ocStbHostAVInterfaceDesc,
                                         table_entry->
                                         ocStbHostAVInterfaceDesc_len);
        //SNMP_DEBUGPRINT("....COLUMN_OCSTBHOSTAVINTERFACEDESC:: ..MODE_GET: ............\n");
                break;
            case COLUMN_OCSTBHOSTAVINTERFACESTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostAVInterfaceStatus);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

    }
    return SNMP_ERR_NOERROR;
}

