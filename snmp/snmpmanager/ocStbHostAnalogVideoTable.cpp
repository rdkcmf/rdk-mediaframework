/*
* If not stated otherwise in this file or this component's LICENSE file the
* following copyright and licenses apply:
*
* Copyright 2011 RDK Management
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.table_data.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "ocStbHostMibModule.h"
#include "vl_ocStbHost_GetData.h"
#include "rdk_debug.h"
/** Initialize the ocStbHostAnalogVideoTable table by defining its contents and how it's structured */
void
initialize_table_ocStbHostAnalogVideoTable(void)
{
    static oid      ocStbHostAnalogVideoTable_oid[] =
        { 1, 3, 6, 1, 4, 1, 4491, 2, 3, 1, 1, 1, 2, 7, 4 };
    size_t          ocStbHostAnalogVideoTable_oid_len =
        OID_LENGTH(ocStbHostAnalogVideoTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_tdata  *table_data;
    netsnmp_table_registration_info *table_info;
    netsnmp_cache  *cache;

    reg =
        netsnmp_create_handler_registration("ocStbHostAnalogVideoTable",
                                            ocStbHostAnalogVideoTable_handler,
                                            ocStbHostAnalogVideoTable_oid,
                                            ocStbHostAnalogVideoTable_oid_len,
                                            HANDLER_CAN_RONLY);

    table_data =
        netsnmp_tdata_create_table("ocStbHostAnalogVideoTable", 0);
    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info, ASN_UNSIGNED,  /* index: ocStbHostAVInterfaceIndex */ 0);

    table_info->min_column = COLUMN_OCSTBHOSTANALOGVIDEOPROTECTIONSTATUS;
    table_info->max_column = COLUMN_OCSTBHOSTANALOGVIDEOPROTECTIONSTATUS;

    netsnmp_tdata_register(reg, table_data, table_info);
    cache = netsnmp_cache_create(OCSTBHOSTANALOGVIDEOTABLE_TIMEOUT/*-1*/,
                                 ocStbHostAnalogVideoTable_load,
                                 ocStbHostAnalogVideoTable_free,
                                 ocStbHostAnalogVideoTable_oid,
                                 ocStbHostAnalogVideoTable_oid_len);
        cache->magic = (void *) table_data;
    netsnmp_inject_handler_before(reg, netsnmp_cache_handler_get(cache),
                                  "ocStbHostAnalogVideoTable");


        /*
         * Initialise the contents of the table here
         */
         if(0 == ocStbHostAnalogVideoTable_load(cache, table_data))
    {
            //vl_ocStbHostAVInterfaceTable_getdata"
      RDK_LOG(RDK_LOG_DEBUG, "LOG.RDK.SNMP", " ERROR:: Not ye ocStbHostComponentVideoTable_load table initialise here \n");
    }
    return; //Mamidi:042209
}

/*
 * Example cache handling - set up table_data list from a suitable file
 */
int
ocStbHostAnalogVideoTable_load(netsnmp_cache * cache, void *vmagic) {
    netsnmp_tdata * table_data = (netsnmp_tdata *) vmagic;
    netsnmp_tdata_row *row;

    if(0 == vl_ocStbHostAnalogVideoTable_getdata(table_data))
    {
      //vl_ocStbHostAVInterfaceTable_getdata"
      RDK_LOG(RDK_LOG_DEBUG, "LOG.RDK.SNMP", " ERROR:: Not yet table initialise here \n");
        return 0; //Mamidi:042209
    }

//    vl_ocStbHostAnalogVideoTable_getdata();
    return 1; //Mamidi:042209

}

void
ocStbHostAnalogVideoTable_free(netsnmp_cache * cache, void *vmagic) {
    netsnmp_tdata * table = (netsnmp_tdata *) vmagic;
   // netsnmp_tdata_row *this;
    //netsnmp_tdata_delete_table(table);
//     while           ((this = netsnmp_tdata_get_first_row(table))) {
//         netsnmp_tdata_remove_and_delete_row(table, this);}
    return; //Mamidi:042209

}



/** handles requests for the ocStbHostAnalogVideoTable table */
int
 ocStbHostAnalogVideoTable_handler(netsnmp_mib_handler *handler,
                                      netsnmp_handler_registration
                                      *reginfo,
                                      netsnmp_agent_request_info *reqinfo,
                                      netsnmp_request_info *requests) {

    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    netsnmp_tdata * table_data;
    netsnmp_tdata_row *table_row;
    netsnmp_tdata * vl_table_data;
    netsnmp_tdata_row *vl_row;
    struct ocStbHostAnalogVideoTable_entry *table_entry;
    int             ret;

    vl_row = NULL;
    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
     //RDK_LOG(RDK_LOG_DEBUG, "LOG.RDK.SNMP", "....ocStbHostAnalogVideoTable_handler:: ..MODE_GET: ............\n");
    case MODE_GET:
        for (request = requests; request; request = request->next) {
            //table_entry = (struct ocStbHostAnalogVideoTable_entry *)                netsnmp_tdata_extract_entry(request);
            /*changed due to wrong values in retriving first element of the Table*/
            VL_SNMP_PREPARE_AND_CHECK_TABLE_GET_REQUEST(ocStbHostAnalogVideoTable_entry);

            switch (table_info->colnum) {
            case COLUMN_OCSTBHOSTANALOGVIDEOPROTECTIONSTATUS:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->
                                           ocStbHostAnalogVideoProtectionStatus);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

    }
    return SNMP_ERR_NOERROR;
}
